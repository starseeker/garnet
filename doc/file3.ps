%!PS-Adobe-2.0
%%Title: tutorial/tutorial.mss
%%DocumentFonts: (atend)
%%Creator: Andrew Mickish and Scribe 7(1700)
%%CreationDate: 12 December 1994 15:25
%%Pages: 11 0
%%EndComments
%%BeginProcSet: PStoPS 1 15
userdict begin
[/showpage/erasepage/copypage]{dup where{pop dup load
 type/operatortype eq{1 array cvx dup 0 3 index cvx put
 bind def}{pop}ifelse}{pop}ifelse}forall
[/letter/legal/executivepage/a4/a4small/b5/com10envelope
 /monarchenvelope/c5envelope/dlenvelope/lettersmall/note
 /folio/quarto/a5]{dup where{dup wcheck{exch{}put}
 {pop{}def}ifelse}{pop}ifelse}forall
/setpagedevice {pop}bind 1 index where{dup wcheck{3 1 roll put}
 {pop def}ifelse}{def}ifelse
/PStoPSmatrix matrix currentmatrix def
/PStoPSxform matrix def/PStoPSclip{clippath}def
/defaultmatrix{PStoPSmatrix exch PStoPSxform exch concatmatrix}bind def
/initmatrix{matrix defaultmatrix setmatrix}bind def
/initclip[{matrix currentmatrix PStoPSmatrix setmatrix
 [{currentpoint}stopped{$error/newerror false put{newpath}}
 {/newpath cvx 3 1 roll/moveto cvx 4 array astore cvx}ifelse]
 {[/newpath cvx{/moveto cvx}{/lineto cvx}
 {/curveto cvx}{/closepath cvx}pathforall]cvx exch pop}
 stopped{$error/errorname get/invalidaccess eq{cleartomark
 $error/newerror false put cvx exec}{stop}ifelse}if}bind aload pop
 /initclip dup load dup type dup/operatortype eq{pop exch pop}
 {dup/arraytype eq exch/packedarraytype eq or
  {dup xcheck{exch pop aload pop}{pop cvx}ifelse}
  {pop cvx}ifelse}ifelse
 {newpath PStoPSclip clip newpath exec setmatrix} bind aload pop]cvx def
/initgraphics{initmatrix newpath initclip 1 setlinewidth
 0 setlinecap 0 setlinejoin []0 setdash 0 setgray
 10 setmiterlimit}bind def
end
%%EndProcSet
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq 
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath translate
    100.0 -100.0 scale pop /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
    div dup scale 100.0 -100.0 scale
    /showpage {} def
    /letter {} def
    /lettersmall {} def
    /note {} def
    } bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
   {dup FontMapDict exch known{FontMapDict exch get} if
   original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
/RC {100.0 -100.0 scale
612.0 0.0 translate
-90.0 rotate
.01 -.01 scale} bind def
/URC {100.0 -100.0 scale
90.0 rotate
-612.0 0.0 translate
.01 -.01 scale} bind def
/RCC {100.0 -100.0 scale
0.0 -792.0 translate 90.0 rotate
.01 -.01 scale} bind def
/URCC {100.0 -100.0 scale
-90.0 rotate 0.0 792.0 translate
.01 -.01 scale} bind def
%%EndProlog
%%BeginSetup
userdict/PStoPSxform PStoPSmatrix matrix currentmatrix
 matrix invertmatrix matrix concatmatrix
 matrix invertmatrix put
%%EndSetup
%%Page: (0,1,2,3) 1
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
11 SS 
1 1 0 8280 7200 GB 
%%BeginDocument: single-sided.ps
%!PS-Adobe-2.0
%
%  This PostScript code turns off double-sided printing,
%  which is desirable since we want to be able to move the
%  Tables of Contents by hand after the manuals are printed.
%
statusdict begin
   false setduplexmode
end

%%EndDocument
 GE 16 /Times-Bold AF
26191 18976 MT
(Garnet Tutorial)SH
11 SS 
27753 21368 MT
(Andrew Mickish)SH
/Times-Roman SF
28183 23294 MT
(December 1994)SH
/Times-Bold SF
29634 44214 MT
(Abstract)SH
/Times-Roman SF
8280 45966 MT
(This tutorial has been designed to introduce the reader to the basic concepts of)
16 W( Garnet.  The reader should)15 W
8280 47262 MT
(have already taken the Garnet Tour before starting the tutorial.)SH
21010 52980 MT
(Copyright)SH
/Symbol SF
25747 XM
(\323)SH
/Times-Roman SF
26891 XM
(1994 - Carnegie Mellon University)SH
8280 59763 MT
(This research was sponsored by NCCOSC under Contract No.  N66001-94-C-6037, Arpa Order)
207 W( No.)208 W
8280 61059 MT
(B326. The)
381 W( views and conclusions contained in this document)
53 W( are those of the authors and should not be)52 W
8280 62355 MT
(interpreted as representing the official policies, either expressed or implied, of NCCOSC or)
192 W( the U.S.)193 W
8280 63651 MT
(Government.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.2)
SH( Load)
1800 W( Garnet)SH
51886 XM
(Page 63)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(1. Setting Up)SH
14 SS 
8280 13146 MT
(1.1. Take the Tour)SH
11 /Times-Roman AF
8280 14342 MT
(Before beginning this tutorial, you should have already)
7 W( completed the Garnet Tour, available in a separate)6 W
8280 15538 MT
(document. The)
559 W( Tour was a series of exercises intended to acquaint you with a few of the features of)142 W
8280 16734 MT
(Garnet, while giving you a feel for)
284 W( the interactive programming aspects of Garnet.  This Tutorial)283 W
8280 17930 MT
(investigates all of those)
178 W( features in greater depth, while explaining the fundamental principles behind)179 W
8280 19126 MT
(objects, inheritance, constraints, interactors, and the actual writing of code.)SH
8280 21424 MT
(In the Garnet Tour, you)
169 W( were given some background information about how to load Garnet, how to)168 W
8280 22620 MT
(access the different Garnet packages, garbage collection, the main-event-loop for interactors, etc.  It may)49 W
8280 23816 MT
(be helpful to review this information from the first few sections of the Tour before starting the Tutorial.)SH
14 /Times-Bold AF
8280 27634 MT
(1.2. Load Garnet)SH
11 /Times-Roman AF
8280 28830 MT
(Using the instructions from the Tour, load Garnet into your lisp process.  Also,)
39 W( type in the following line)38 W
8280 30026 MT
(so that references to the KR package can be eliminated \050we)
157 W( will explicitly reference the other Garnet)158 W
8280 31222 MT
(packages\051:)SH
8 /Courier AF
10200 32387 MT
(\050use-package :KR\051)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 64)
SH( Garnet)
830 W( Tutorial)SH
34650 XM
(The Prototype-Instance System)
SH( Chapter)
1550 W( 2)SH
46800 50 6120 4486 UL
16 /Times-Bold AF
6120 8272 MT
(2. The Prototype-Instance System)SH
11 /Times-Roman AF
6120 10524 MT
(The basic idea behind programming in Garnet is creating objects and displaying them)
46 W( in windows on the)45 W
6120 11720 MT
(screen. An)
303 W( object is any of the fundamental data types in Garnet.  Lines, circles, aggregates and windows)14 W
6120 12916 MT
(are all)
132 W( objects.  These are all)131 W
/Times-Italic SF
19864 XM
(prototype)SH
/Times-Roman SF
24486 XM
(objects -- you make copies of these objects and customize the)131 W
6120 14112 MT
(copies to have your desired size and position, as well as other)
59 W( graphic qualities such as filling styles and)60 W
6120 15308 MT
(line styles.  When you make a customized copy of)
36 W( an object, we say you create an)35 W
/Times-Italic SF
43101 XM
(instance)SH
/Times-Roman SF
47077 XM
(of the object.)35 W
6120 16504 MT
(Thus, Garnet is a prototype-instance system.)SH
14 /Times-Bold AF
6120 20322 MT
(2.1. Inheritance)SH
11 /Times-Roman AF
6120 21518 MT
(When instances are created, an)
157 W( inheritance link is established between the prototype and the instance.)158 W
/Times-Italic SF
6120 22714 MT
(Inheritance)SH
/Times-Roman SF
11592 XM
(is the property that allows instances)
127 W( to get values from their prototypes without specifying)126 W
6120 23910 MT
(those values)
19 W( in the instances themselves.  For example, if we set the filling style of a rectangle to be gray,)20 W
6120 25106 MT
(and then we)
171 W( create an instance of that rectangle, then the instance will also have a gray filling style.)170 W
6120 26302 MT
(Naturally, this leads to an inheritance hierarchy among the objects)
49 W( in the Garnet system.  In fact, there is)50 W
6120 27498 MT
(one root object in Garnet -- the)229 W
10 /Courier AF
21620 XM
(view-object)SH
11 /Times-Roman AF
28724 XM
(-- that all other)
229 W( objects are instances of \050except for)228 W
6120 28694 MT
(interactors, which have their own root\051.)
30 W( Figure)
336 W( 2-1 shows some of the objects in Garnet and how they fit)31 W
6120 29890 MT
(into the inheritance hierarchy.  \050The average user will never)
50 W( be concerned with the actual)49 W
10 /Courier AF
46320 XM
(view-object)SH
11 /Times-Roman AF
6120 31086 MT
(or)SH
10 /Courier AF
7311 XM
(graphical-object)SH
11 /Times-Roman AF
17186 XM
(prototypes.\051)SH
46800 50 6120 32482 UL
75 100 0 6607 73903 GB 
%%BeginDocument: tutorial/opal-inheritance.ps
%!PS-Adobe-2.0
%%Title: Aggregraph Demo
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 16, 1991, 10:00 AM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/RoundtanglePath
   {    % stack: left, top, width, height, radius
        /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
        /right l w add def  /bottom t h sub def
          l r add t moveto                         % origin
          right t right t r sub r arcto            % top side
          right bottom right r sub bottom r arcto  % right side
          l bottom l bottom r add r arcto          % bottom side
          l t l r add t r arcto                    % left side
          16 {pop} repeat  % each arcto accumulates 4 stack parameters
   } def

/RoundtangleDict 27 dict def
/DrawRoundtangle
   {    % stack: left, top, width, height, radius, line-halftone,
        %        line-red, line-green, line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        
        RoundtangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub  width thickness sub  height thickness sub
          radius thickness sub RoundtanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height radius thickness-by-2 sub RoundtanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
46 -181 translate
gsave
0 648 375 286 ClipToRectangle
0 40 translate
gsave
0 0 0 0 false 0 0 [] 1 115 587 95 474 DrawLine
0 0 0 0 false 0 0 [] 1 115 477 95 474 DrawLine
0 0 0 0 false 0 0 [] 1 115 358 95 474 DrawLine
0 0 0 0 false 0 0 [] 1 206 371 185 358 DrawLine
0 0 0 0 false 0 0 [] 1 206 344 185 358 DrawLine
0 0 0 0 false 0 0 [] 1 254 560 234 477 DrawLine
0 0 0 0 false 0 0 [] 1 254 533 234 477 DrawLine
0 0 0 0 false 0 0 [] 1 254 493 234 477 DrawLine
0 0 0 0 false 0 0 [] 1 254 452 234 477 DrawLine
0 0 0 0 false 0 0 [] 1 254 425 234 477 DrawLine
0 0 0 0 false 0 0 [] 1 303 506 282 493 DrawLine
0 0 0 0 false 0 0 [] 1 303 479 282 493 DrawLine
0 0 0 0 false 0 0 [] 1 254 398 234 477 DrawLine
10 485 85 22 5 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRoundtangle
14 470 77 0 0 0 0 false (View-Object) 12 /Courier DrawText
115 598 50 22 5 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRoundtangle
119 583 42 0 0 0 0 false (Window) 12 /Courier DrawText
115 488 119 22 5 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRoundtangle
119 473 111 0 0 0 0 false (Graphical-Object) 12 /Courier DrawText
115 369 70 22 5 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRoundtangle
119 354 62 0 0 0 0 false (Aggregate) 12 /Courier DrawText
206 382 85 22 5 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRoundtangle
210 367 77 0 0 0 0 false (Aggregadget) 12 /Courier DrawText
206 355 71 22 5 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRoundtangle
210 340 63 0 0 0 0 false (Aggrelist) 12 /Courier DrawText
254 571 49 22 5 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRoundtangle
258 556 41 0 0 0 0 false (Bitmap) 12 /Courier DrawText
254 544 78 22 5 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRoundtangle
258 529 70 0 0 0 0 false (Multipoint) 12 /Courier DrawText
254 504 28 22 5 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRoundtangle
258 489 20 0 0 0 0 false (Arc) 12 /Courier DrawText
254 463 70 22 5 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRoundtangle
258 448 62 0 0 0 0 false (Rectangle) 12 /Courier DrawText
254 436 35 22 5 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRoundtangle
258 421 27 0 0 0 0 false (Line) 12 /Courier DrawText
303 517 48 22 5 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRoundtangle
307 502 40 0 0 0 0 false (Circle) 12 /Courier DrawText
303 490 35 22 5 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRoundtangle
307 475 27 0 0 0 0 false (Oval) 12 /Courier DrawText
254 409 36 22 5 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRoundtangle
258 394 28 0 0 0 0 false (Text) 12 /Courier DrawText
grestore

grestore

showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 118 253 493 539

%%EndDocument
 GE /Times-Bold SF
6120 56680 MT
(Figure 2-1:)SH
/Times-Roman SF
11893 XM
(The inheritance hierarchy among some of the)
61 W( Garnet prototype objects.  All of the standard)62 W
11893 57876 MT
(shapes in)
177 W( garnet are instances of the)176 W
10 /Courier AF
29221 XM
(graphical-object)SH
11 /Times-Roman AF
39272 XM
(prototype. As)
627 W( an example of)176 W
11893 59072 MT
(inheritance, the)141 W
10 /Courier AF
19230 XM
(circle)SH
11 /Times-Roman AF
23246 XM
(and)SH
10 /Courier AF
25250 XM
(oval)SH
11 /Times-Roman AF
28066 XM
(objects are both special types)
141 W( of arcs, and they inherit)142 W
11893 60268 MT
(most of their properties from the)103 W
10 /Courier AF
27113 XM
(arc)SH
11 /Times-Roman AF
29291 XM
(prototype object.  The Gadgets \050the Garnet widgets\051)103 W
11893 61464 MT
(are not pictured in this hierarchy, but most of them are)
218 W( instances of the)219 W
10 /Courier AF
46320 XM
(aggregadget)SH
11 /Times-Roman AF
11893 62660 MT
(object.)SH
46800 50 6120 64612 UL
6120 68000 MT
(To see an example of inheritance, let's create an instance of a)
78 W( window and look at some of its inherited)77 W
6120 69196 MT
(values. After)
275 W( you have loaded Garnet, type in the following code.)SH
8 /Courier AF
8040 70361 MT
(\050create-instance 'MY-WIN inter:interactor-window)SH
9480 71226 MT
(\050:left 800\051 \050:top 100\051\051)SH
8040 72091 MT
(\050opal:update MY-WIN\051)SH
/Times-Italic SF
18600 XM
(; To make the window appear)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 2.2)
SH( Prototypes)1800 W
51886 XM
(Page 65)SH
46800 50 8280 4486 UL
11 SS 
8280 9592 MT
(The window should)
111 W( appear in the upper-right corner of your screen.  In the definition of the MY-WIN)112 W
8280 10788 MT
(schema, we gave a value of 800 to the)33 W
10 /Courier AF
25619 XM
(:left)SH
11 /Times-Roman AF
28926 XM
(slot and a value of 100 to the)32 W
10 /Courier AF
42196 XM
(:top)SH
11 /Times-Roman AF
44903 XM
(slot. Let's)
339 W( check these)32 W
8280 11984 MT
(slots in MY-WIN to see if they are correct.  Type in the following lines.)SH
8 /Courier AF
10200 13197 MT
(\050gv MY-WIN :left\051)SH
/Times-Italic SF
20280 XM
(; Should be 800)SH
/Courier SF
10200 14062 MT
(\050gv MY-WIN :top\051)SH
/Times-Italic SF
20280 XM
(; Should be 100)SH
11 /Times-Roman AF
8280 16360 MT
(The function)105 W
10 /Courier AF
14416 XM
(gv)SH
11 /Times-Roman AF
15996 XM
(gets the values of slots from an object.)
105 W( If)
487 W( you got the right values for the)106 W
10 /Courier AF
50111 XM
(:left)SH
11 /Times-Roman AF
53492 XM
(and)SH
10 /Courier AF
8280 17556 MT
(:top)SH
11 /Times-Roman AF
10967 XM
(slots of MY-WIN,)
12 W( then you see that the values you supplied during the)11 W
10 /Courier AF
42578 XM
(create-instance)SH
11 /Times-Roman AF
51864 XM
(call are)11 W
8280 18752 MT
(still being used by MY-WIN.  These are values that are held in the instance itself.  On)
32 W( the other hand, try)33 W
8280 19948 MT
(typing in the following lines.)SH
8 /Courier AF
10200 21113 MT
(\050gv MY-WIN :width\051)SH
10200 21978 MT
(\050gv MY-WIN :height\051)SH
11 /Times-Roman AF
8280 24276 MT
(We did not supply values)
9 W( to the)8 W
10 /Courier AF
22547 XM
(:width)SH
11 /Times-Roman AF
26430 XM
(and)SH
10 /Courier AF
28301 XM
(:height)SH
11 /Times-Roman AF
32784 XM
(slots of MY-WIN when it was created.  Therefore,)8 W
8280 25472 MT
(these values are)104 W
/Times-Italic SF
15829 XM
(inherited)SH
/Times-Roman SF
20180 XM
(from the prototype.  That is, they)
104 W( were defined in the)105 W
10 /Courier AF
44880 XM
(interactor-window)SH
11 /Times-Roman AF
8280 26668 MT
(object when it)
154 W( was created, and now MY-WIN inherits those values as its own.  We could, however,)153 W
8280 27864 MT
(override these inherited values.  Let's change)
182 W( the width and height of MY-WIN using)183 W
10 /Courier AF
48803 XM
(s-value)SH
11 /Times-Roman AF
(, the)183 W
8280 29060 MT
(function that sets the values of slots.)SH
8 /Courier AF
10200 30225 MT
(\050s-value MY-WIN :width 100\051)SH
10200 31090 MT
(\050s-value MY-WIN :height 400\051)SH
10200 31955 MT
(\050opal:update MY-WIN\051)SH
/Times-Italic SF
20760 XM
(; To cause the changes to appear)SH
11 /Times-Roman AF
8280 34253 MT
(The dimensions)
49 W( of the window should change, reflecting the new values we have supplied to its)48 W
10 /Courier AF
51480 XM
(:width)SH
11 /Times-Roman AF
8280 35449 MT
(and)SH
10 /Courier AF
10161 XM
(:height)SH
11 /Times-Roman AF
14654 XM
(slots. If)
311 W( we were to now use)18 W
10 /Courier AF
27657 XM
(gv)SH
11 /Times-Roman AF
29150 XM
(to look)
18 W( at the width and height of MY-WIN, we would get)19 W
8280 36645 MT
(back the new values, since the old ones are no longer inherited.)SH
8280 38943 MT
(The inheritance hierarchy which was partially pictured)
47 W( in Figure 2-1 is traced from the leaves toward the)46 W
8280 40139 MT
(root \050from right to left\051 during a search)
79 W( for a value.  Whenever we use)80 W
10 /Courier AF
40501 XM
(gv)SH
11 /Times-Roman AF
42056 XM
(to get the value of a slot, the)80 W
8280 41335 MT
(object first checks to see if it has a)
46 W( local value for that slot.  If there is no value for the slot in the object,)45 W
8280 42531 MT
(then the object looks to its prototype to)
20 W( see if it has a value for the slot.  This search continues until either)21 W
8280 43727 MT
(a value for the slot is found or the root object is reached.  When no inherited or local value for the slot is)40 W
8280 44923 MT
(found, the value NIL is)
51 W( returned \050which, by the way, looks just the same as a user-defined local value of)52 W
8280 46119 MT
(NIL for a slot\051.)SH
8280 48417 MT
(Since we are now finished with the example of MY-WIN, let's destroy it so it does)
131 W( not interfere with)130 W
8280 49613 MT
(future examples in this tutorial.  Type in the following line.)SH
8 /Courier AF
10200 50778 MT
(\050opal:destroy MY-WIN\051)SH
14 /Times-Bold AF
8280 54596 MT
(2.2. Prototypes)SH
11 /Times-Roman AF
8280 55792 MT
(When programming in)
95 W( Garnet, inheritance among objects can eliminate a lot of duplicated code.  If we)96 W
8280 56988 MT
(want to create several objects that look similar, we could create each of them)
84 W( from scratch and copy all)83 W
8280 58184 MT
(the values that we need into each object.  However, inheritance allows us to)
117 W( define these objects more)118 W
8280 59380 MT
(efficiently, by creating several similar objects as instances of a single prototype.)SH
46800 50 8280 61531 UL
1 1 0 1080 105728 GB 
%%BeginDocument: tutorial/proto-rects.ps
%!PS-Adobe-2.0
%%Title: Opal 5
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 24, 1991, 3:44 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
174 -286 translate
gsave
0 648 120 75 ClipToRectangle
0 0 translate
gsave
20 628 40 20 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
40 618 40 20 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
60 608 40 20 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
grestore

grestore

0 648 120 75 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 246 359 366 434

%%EndDocument
 GE /Times-Bold SF
8280 71580 MT
(Figure 2-2:)SH
/Times-Roman SF
14053 XM
(Three instances created from one prototype rectangle.)SH
ES
PStoPSsaved restore
%%Page: (4,5,6,7) 2
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 66)
SH( Garnet)
830 W( Tutorial)SH
34650 XM
(The Prototype-Instance System)
SH( Chapter)
1550 W( 2)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(To start, look at the picture in Figure 2-2.  We are going to define three rectangles with)
105 W( three different)104 W
6120 9151 MT
(filling styles and put them in a window.  First, let's create a)
125 W( window with a top-level aggregate.  \050For)126 W
6120 10347 MT
(now, just think of an aggregate as an object which contains several other)
28 W( objects.\051  As we add our objects)27 W
6120 11543 MT
(to this aggregate, they will be displayed in the window.)SH
8 /Courier AF
8040 12708 MT
(\050create-instance 'WIN inter:interactor-window)SH
9480 13573 MT
(\050:left 750\051\050:top 80\051\050:width 200\051\050:height 400\051\051)SH
8040 14438 MT
(\050create-instance 'TOP-AGG opal:aggregate\051)SH
8040 15303 MT
(\050s-value WIN :aggregate TOP-AGG\051)SH
8040 16168 MT
(\050opal:update WIN\051)SH
11 /Times-Roman AF
6120 18466 MT
(Now let's consider the design for the rectangles.  The first thing to notice is that all of the rectangles)
20 W( have)21 W
6120 19662 MT
(the same width and height.  Therefore, we will create a prototype rectangle which has a width)
19 W( of 40 and a)18 W
6120 20858 MT
(height of 20, and)
49 W( then we will create three instances of that rectangle.  To create the prototype rectangle,)50 W
6120 22054 MT
(type the following.)SH
8 /Courier AF
8040 23219 MT
(\050create-instance 'PROTO-RECT opal:rectangle)SH
9480 24084 MT
(\050:width 40\051 \050:height 20\051\051)SH
11 /Times-Roman AF
6120 26382 MT
(This rectangle will not appear anywhere, because)
7 W( it will not be added to the window.  But now we need to)6 W
6120 27578 MT
(create the three actual rectangles that will be)
22 W( displayed.  Since the prototype has the correct values for the)23 W
6120 28774 MT
(width and height, we only need to specify the left, top, and filling styles of our instances.)SH
8 /Courier AF
8040 29939 MT
(\050create-instance 'R1 PROTO-RECT)SH
9480 30804 MT
(\050:left 20\051 \050:top 20\051)SH
9480 31669 MT
(\050:filling-style opal:white-fill\051\051)SH
8040 33399 MT
(\050create-instance 'R2 PROTO-RECT)SH
9480 34264 MT
(\050:left 40\051 \050:top 30\051)SH
9480 35129 MT
(\050:filling-style opal:gray-fill\051\051)SH
8040 36859 MT
(\050create-instance 'R3 PROTO-RECT)SH
9480 37724 MT
(\050:left 60\051 \050:top 40\051)SH
9480 38589 MT
(\050:filling-style opal:black-fill\051\051)SH
8040 40319 MT
(\050opal:add-components TOP-AGG R1 R2 R3\051)SH
/Times-Italic SF
27240 XM
(; Give the aggregate three components)SH
/Courier SF
8040 41184 MT
(\050opal:update WIN\051)SH
11 /Times-Roman AF
6120 43482 MT
(After you update the window, you can see that the instances R1,)
33 W( R2, and R3 have inherited their)32 W
10 /Courier AF
49320 XM
(:width)SH
11 /Times-Roman AF
6120 44678 MT
(and)SH
10 /Courier AF
8039 XM
(:height)SH
11 /Times-Roman AF
12570 XM
(from PROTO-RECT.  You may wish to use)56 W
10 /Courier AF
32603 XM
(gv)SH
11 /Times-Roman AF
34134 XM
(to verify)
56 W( this.  With these three rectangles)57 W
6120 45874 MT
(still in the window, we are ready to look at another important use of inheritance.  Try)
34 W( changing the width)33 W
6120 47070 MT
(and height of the prototype as follows.)SH
8 /Courier AF
8040 48235 MT
(\050s-value PROTO-RECT :width 30\051)SH
8040 49100 MT
(\050s-value PROTO-RECT :height 40\051)SH
8040 49965 MT
(\050opal:update WIN\051)SH
11 /Times-Roman AF
6120 52263 MT
(The result should look like the rectangles in Figure 2-3.  Just by changing)
137 W( the values in the prototype)138 W
6120 53459 MT
(rectangle, we were able to change the appearance of all its instances.)
52 W( This)
378 W( is because the three instances)51 W
6120 54655 MT
(inherit their width and height from the prototype, even when the prototype changes.)SH
46800 50 6120 56806 UL
1 1 0 -1080 102203 GB 
%%BeginDocument: tutorial/changed-proto.ps
%!PS-Adobe-2.0
%%Title: Opal 6
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 24, 1991, 3:52 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
179 -274 translate
gsave
0 648 110 100 ClipToRectangle
0 0 translate
gsave
20 628 30 40 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
40 618 30 40 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
60 608 30 40 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
grestore

grestore

0 648 110 100 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 251 346 361 446

%%EndDocument
 GE /Times-Bold SF
6120 69355 MT
(Figure 2-3:)SH
/Times-Roman SF
11893 XM
(The instances change whenever the prototype object changes.)SH
46800 50 6120 71307 UL
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 2.4)
SH( The)
1800 W( Inspector)SH
51886 XM
(Page 67)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(For our last look)
208 W( at inheritance in this section, let's try to override the inherited slots in one of the)209 W
8280 9151 MT
(instances. Suppose)
493 W( we now want the rectangles to look)
109 W( like Figure 2-4.  In this case, we only want to)108 W
8280 10347 MT
(change the dimensions of one of the instances.  The following lines should change)
54 W( the appearance of the)55 W
8280 11543 MT
(black rectangle accordingly.)SH
8 /Courier AF
10200 12708 MT
(\050s-value R3 :width 100\051)SH
10200 13573 MT
(\050opal:update WIN\051)SH
11 /Times-Roman AF
8280 15871 MT
(The rectangle R3 now has its own value for its)158 W
10 /Courier AF
30632 XM
(:width)SH
11 /Times-Roman AF
34665 XM
(slot, and no longer inherits it from)
158 W( PROTO-)157 W
8280 17067 MT
(RECT. If)
305 W( you change the)15 W
10 /Courier AF
19947 XM
(:width)SH
11 /Times-Roman AF
23838 XM
(of the prototype again, the width of R3 will not be affected.  However,)16 W
8280 18263 MT
(the width of R1 and R2 will change with the)
165 W( prototype, because they still inherit the values for their)164 W
10 /Courier AF
8280 19459 MT
(:width)SH
11 /Times-Roman AF
12371 XM
(slots. This)
707 W( shows how inheritance can be used flexibly to make specific exceptions to)
216 W( the)217 W
8280 20655 MT
(prototype object.)SH
46800 50 8280 22806 UL
1 1 0 1080 68203 GB 
%%BeginDocument: tutorial/override.ps
%!PS-Adobe-2.0
%%Title: Opal 6
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 24, 1991, 3:59 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
144 -274 translate
gsave
0 648 180 100 ClipToRectangle
0 0 translate
gsave
20 628 30 40 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
40 618 30 40 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
60 608 100 40 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
grestore

grestore

0 648 180 100 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 216 346 396 446

%%EndDocument
 GE /Times-Bold SF
8280 35355 MT
(Figure 2-4:)SH
/Times-Roman SF
14053 XM
(The width of R3 is overridden, so it is no longer inherited from the prototype.)SH
46800 50 8280 37307 UL
14 /Times-Bold AF
8280 40925 MT
(2.3. Default Values)SH
11 /Times-Roman AF
8280 42121 MT
(Because of inheritance, all instances of Garnet prototype objects)
161 W( have reasonable default values when)160 W
8280 43317 MT
(they are created.  As we saw in section 2.1, the)23 W
10 /Courier AF
29423 XM
(interactor-window)SH
11 /Times-Roman AF
39921 XM
(object has its own)23 W
10 /Courier AF
48201 XM
(:width)SH
11 /Times-Roman AF
(. So,)
321 W( if)24 W
8280 44513 MT
(an instance of it is created without an)
43 W( explicitly defined width, the width of the instance will be inherited)42 W
8280 45709 MT
(from the prototype, and it can be considered a default value.)SH
14 /Times-Bold AF
8280 49527 MT
(2.4. The Inspector)SH
11 /Times-Roman AF
8280 50723 MT
(An important tool for examining properties of objects is the)
18 W( Inspector.  This tool is loaded with Garnet by)19 W
8280 51919 MT
(default, and resides in the package)1 W
10 /Courier AF
23709 XM
(garnet-debug)SH
11 /Times-Roman AF
(. The)
277 W( Inspector is described in detail in)
1 W( the Debugging)SH
8280 53115 MT
(Manual that starts on page 461 of this reference manual.)SH
8280 55413 MT
(To run the inspector on our example of three)
25 W( rectangles, position the mouse over R3 \050the black rectangle\051)26 W
8280 56609 MT
(in the window, and hit the HELP key.  If your keyboard does not)
35 W( have a HELP key, or hitting it does not)34 W
8280 57805 MT
(seem to do anything, you can start the Inspector manually by typing)61 W
10 /Courier AF
39165 XM
(\050gd:Inspector R3\051)61 W
11 /Times-Roman AF
49762 XM
(into the lisp)61 W
8280 59001 MT
(listener. The)
275 W( Inspector window that appears will look like figure 2-5.)SH
8280 61299 MT
(The local slots and values for R3 are shown in the Inspector window.)
47 W( Inherited)
368 W( slots are not shown, like)46 W
10 /Courier AF
8280 62495 MT
(:height)SH
11 /Times-Roman AF
12824 XM
(or)SH
10 /Courier AF
14084 XM
(:line-style)SH
11 /Times-Roman AF
21028 XM
(\050assuming that)
69 W( you did not set these slots yourself, installing local values in)70 W
8280 63691 MT
(R3\051. If)
375 W( you have a color screen, some slots are red,)
50 W( indicating that these slots are public "parameters" of)49 W
8280 64887 MT
(the object \050we discuss parameters more in section 2.5\051.)SH
8280 67185 MT
(It is very easy to change properties of an object with the Inspector.  For example, to change the)60 W
10 /Courier AF
51480 XM
(:width)SH
11 /Times-Roman AF
8280 68381 MT
(of R3 using the inspector, click the mouse on)
71 W( the value of the)70 W
10 /Courier AF
36448 XM
(:width)SH
11 /Times-Roman AF
40393 XM
(slot \050which is 100 in figure 2-5\051.)70 W
8280 69577 MT
(Use standard Emacs commands to change the)
89 W( value of the slot to something significantly different, like)90 W
8280 70773 MT
(20. When)
275 W( you hit RETURN, the change will appear instantly in R3.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 68)
SH( Garnet)
830 W( Tutorial)SH
34650 XM
(The Prototype-Instance System)
SH( Chapter)
1550 W( 2)SH
46800 50 6120 4486 UL
11 SS 
75 100 0 6570 45825 GB 
%%BeginDocument: tutorial/inspector.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: Showing #k<R3>
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Sep 28, 1993, 2:30 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 278 540 515
%%%Pages: 1
%%EndComments


/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawMotifWindowFrame { % label left top w h 
                        % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def

    /bottom y bottommargin sub def
    /top y h add topmargin add def
    /left x leftmargin sub def
    /right x w add rightmargin add def

    /light .9 def
    /medium .7 def
    /dark .4 def

    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    medium setgray fill
  } exec

  { % outer upper left edges
    left bottom moveto
    right bottom lineto
    right top lineto
    right 2 sub top 2 sub lineto
    right 2 sub bottom 2 add lineto
    left 2 add bottom 2 add lineto
    closepath
    dark setgray fill
  } exec

  { % outer lower right edges
    left bottom moveto
    left top lineto
    right top lineto
    right 2 sub top 2 sub lineto
    left 2 add top 2 sub lineto
    left 2 add bottom 2 add lineto
    closepath
    light setgray fill
  } exec

  { % inner lower right edges
    left 9 add bottom 9 add moveto
    right 9 sub bottom 9 add lineto
    right 9 sub top 25 sub lineto
    right 11 sub top 27 sub lineto
    right 11 sub bottom 11 add lineto
    left 11 add bottom 11 add lineto
    closepath
    light setgray fill
  } exec

  { % inner upper left edges
    left 9 add bottom 9 add moveto
    left 9 add top 25 sub lineto
    right 9 sub top 25 sub lineto
    right 11 sub top 27 sub lineto
    left 11 add top 27 sub lineto
    left 11 add bottom 11 add lineto
    closepath
    dark setgray fill
  } exec

  { % top rut above label
    left 9 add top 9.5 sub moveto
    right 9.01 sub top 9.5 sub lineto
    dark setgray stroke
    left 10 add top 10.5 sub moveto
    right 9.01 sub top 10.5 sub lineto
    light setgray stroke
  } exec

  { % left edge of left button
    left 9.5 add top 9 sub moveto
    left 9.5 add top 25.99 sub lineto
    dark setgray stroke
    left 10.5 add top 10 sub moveto
    left 10.5 add top 25.99 sub lineto
    light setgray stroke
  } exec

  { % right edge of big right button
    right 10.5 sub top 11 sub moveto
    right 10.5 sub top 25.99 sub lineto
    dark setgray stroke
    right 9.5 sub top 11 sub moveto
    right 9.5 sub top 25.99 sub lineto
    light setgray stroke
  } exec

  { % right edge of left button
    left 26.5 add top 11 sub moveto
    left 26.5 add top 25.99 sub lineto
    dark setgray stroke
    left 27.5 add top 11 sub moveto
    left 27.5 add top 25.99 sub lineto
    light setgray stroke
  } exec

  { % edge between small and big right buttons
    right 27.5 sub top 11 sub moveto
    right 27.5 sub top 25.99 sub lineto
    dark setgray stroke
    right 26.5 sub top 11 sub moveto
    right 26.5 sub top 25.99 sub lineto
    light setgray stroke
  } exec

  { % left edge of small right button
    right 44.5 sub top 11 sub moveto
    right 44.5 sub top 25.99 sub lineto
    dark setgray stroke
    right 43.5 sub top 11 sub moveto
    right 43.5 sub top 25.99 sub lineto
    light setgray stroke
  } exec

  { % top left resize corner
    left 26.5 add top 1 sub moveto
    left 26.5 add top 9.99 sub lineto
    dark setgray stroke
    left 27.5 add top 1 sub moveto
    left 27.5 add top 9.99 sub lineto
    light setgray stroke

    left 1 add top 26.5 sub moveto
    left 9.99 add top 26.5 sub lineto
    dark setgray stroke
    left 1 add top 27.5 sub moveto
    left 9.99 add top 27.5 sub lineto
    light setgray stroke
  } exec

  { % top right resize corner
    right 27.5 sub top 1 sub moveto
    right 27.5 sub top 9.99 sub lineto
    dark setgray stroke
    right 26.5 sub top 1 sub moveto
    right 26.5 sub top 9.99 sub lineto
    light setgray stroke

    right 1.01 sub top 26.5 sub moveto
    right 9 sub top 26.5 sub lineto
    dark setgray stroke
    right 1.01 sub top 27.5 sub moveto
    right 9 sub top 27.5 sub lineto
    light setgray stroke
  } exec

  { % bottom left resize corner
    left 26.5 add bottom 1.01 add moveto
    left 26.5 add bottom 9 add lineto
    dark setgray stroke
    left 27.5 add bottom 1.01 add moveto
    left 27.5 add bottom 9 add lineto
    light setgray stroke

    left 1 add bottom 27.5 add moveto
    left 9.99 add bottom 27.5 add lineto
    dark setgray stroke
    left 1 add bottom 26.5 add moveto
    left 9.99 add bottom 26.5 add lineto
    light setgray stroke
  } exec

  { % bottom right resize corner
    right 27.5 sub bottom 1.01 add moveto
    right 27.5 sub bottom 9 add lineto
    dark setgray stroke
    right 26.5 sub bottom 1.01 add moveto
    right 26.5 sub bottom 9 add lineto
    light setgray stroke

    right 1.01 sub bottom 27.5 add moveto
    right 9 sub bottom 27.5 add lineto
    dark setgray stroke
    right 1.01 sub bottom 26.5 add moveto
    right 9 sub bottom 26.5 add lineto
    light setgray stroke
  } exec

  { % upper left button
    left 14.5 add top 19.99 sub moveto
    left 14.5 add top 16.5 sub lineto
    left 22.99 add top 16.5 sub lineto
    light setgray stroke
    left 15 add top 19.5 sub moveto
    left 22.5 add top 19.5 sub lineto
    left 22.5 add top 17 sub lineto
    dark setgray stroke
  } exec

  { % upper right big button
    right 14.01 sub top 14.5 sub moveto
    right 22.5 sub top 14.5 sub lineto
    right 22.5 sub top 22.99 sub lineto
    light setgray stroke
    right 14.5 sub top 15 sub moveto
    right 14.5 sub top 22.5 sub lineto
    right 22 sub top 22.5 sub lineto
    dark setgray stroke
  } exec

  { % upper right small button
    right 34.01 sub top 16.5 sub moveto
    right 37.5 sub top 16.5 sub lineto
    right 37.5 sub top 19.99 sub lineto
    light setgray stroke
    right 34.5 sub top 17 sub moveto
    right 34.5 sub top 19.5 sub lineto
    right 37 sub top 19.5 sub lineto
    dark setgray stroke
  } exec

  { % label
    /Helvetica-Bold findfont 10 scalefont setfont
    label stringwidth pop
    left 28 add right 44 sub add 2 div
    1 index 2 div sub
    dup 2 sub top 24 sub
    moveto
    1 index 4 add 0 rlineto
    0 12 rlineto
    exch 4 add neg 0 rlineto
    closepath
    1 setgray fill
    top 21 sub moveto
    0 setgray
    label show
  } exec

  end
} def

/DrawGenericWindowFrame { % label left top w h
                          % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

gsave
72 72 translate
0.97 0.97 scale
0 456 translate

%
% Begin new window
%
gsave
0 0 482 244 ClipToRectangle
gsave
0 0 482 244 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
11 -27 translate
(Showing #k<R3>) 0 0 460 206 11 27 11 11 DrawMotifWindowFrame
0 0 460 206 ClipToRectangle
gsave
4 -4 81 18 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
3 -3 81 18 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
4 -4 79 16 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
5 -5 -16 76 14 false [0 0 0] [1 1 1] (Show Object) 12 /Courier DrawText
91 -4 81 18 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
90 -3 81 18 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
91 -4 79 16 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
92 -5 -16 76 14 false [0 0 0] [1 1 1] (Show in New) 12 /Courier DrawText
178 -4 60 18 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
177 -3 60 18 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
178 -4 58 16 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
179 -5 -16 56 14 false [0 0 0] [1 1 1] (Re-Fetch) 12 /Courier DrawText
244 -4 87 18 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
243 -3 87 18 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
244 -4 85 16 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
245 -5 -16 83 14 false [0 0 0] [1 1 1] (Dependencies) 12 /Courier DrawText
337 -4 31 18 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
336 -3 31 18 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
337 -4 29 16 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
338 -5 -16 27 14 false [0 0 0] [1 1 1] (Done) 12 /Courier DrawText
374 -4 60 18 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
373 -3 60 18 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
374 -4 58 16 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
375 -5 -16 56 14 false [0 0 0] [1 1 1] (Done All) 12 /Courier DrawText
4 -28 39 18 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
3 -27 39 18 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
4 -28 37 16 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
5 -29 -40 35 14 false [0 0 0] [1 1 1] (Flash) 12 /Courier DrawText
49 -28 46 18 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
48 -27 46 18 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
49 -28 44 16 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
50 -29 -40 41 14 false [0 0 0] [1 1 1] (Search) 12 /Courier DrawText
101 -28 46 18 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
100 -27 46 18 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
101 -28 44 16 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
102 -29 -40 42 14 false [0 0 0] [1 1 1] (Notify) 12 /Courier DrawText
153 -28 39 18 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
152 -27 39 18 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
153 -28 37 16 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
154 -29 -40 35 14 false [0 0 0] [1 1 1] (Break) 12 /Courier DrawText
198 -28 87 18 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
197 -27 87 18 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
198 -28 85 16 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
199 -29 -40 82 14 false [0 0 0] [1 1 1] (Clear Breaks) 12 /Courier DrawText
291 -28 108 18 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
290 -27 108 18 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
291 -28 106 16 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
292 -29 -40 103 14 false [0 0 0] [1 1 1] (Inherited Slots) 12 /Courier DrawText
405 -28 52 18 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
404 -27 52 18 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
405 -28 50 16 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
406 -29 -40 47 14 false [0 0 0] [1 1 1] (Objects) 12 /Courier DrawText
2 -47 -62 64 20 false [0 0 0] [1 1 1] (#k<R3>) 18 /Courier-Bold DrawText
5 -77 -88 35 14 true [0 0 0] [1 1 1] (:IS-A) 12 /Courier DrawText
40 -77 -88 140 14 true [0 0 0] [1 1 1] ( = \050#k<PROTO-RECT>\051 ) 12 /Courier-Bold DrawText
5 -91 -102 35 14 true [0 0 0] [1 1 1] (:LEFT) 12 /Courier DrawText
40 -91 -102 42 14 true [0 0 0] [1 1 1] ( = 60 ) 12 /Courier-Bold DrawText
5 -105 -116 28 14 true [0 0 0] [1 1 1] (:TOP) 12 /Courier DrawText
33 -105 -116 42 14 true [0 0 0] [1 1 1] ( = 40 ) 12 /Courier-Bold DrawText
5 -119 -130 42 14 true [0 0 0] [1 1 1] (:WIDTH) 12 /Courier DrawText
47 -119 -130 49 14 true [0 0 0] [1 1 1] ( = 100 ) 12 /Courier-Bold DrawText
5 -133 -144 56 14 true [0 0 0] [1 1 1] (:VISIBLE) 12 /Courier DrawText
61 -133 -144 156 14 true [0 0 0] [1 1 1] ( - #k<F16-259-260-261-264>) 10 /Courier DrawText
217 -133 -144 28 14 true [0 0 0] [1 1 1] ( \050V\051) 12 /Courier-BoldOblique DrawText
245 -133 -144 35 14 true [0 0 0] [1 1 1] ( = T ) 12 /Courier-Bold DrawText
5 -147 -158 98 14 true [0 0 0] [1 1 1] (:FILLING-STYLE) 12 /Courier DrawText
103 -147 -158 161 14 true [0 0 0] [1 1 1] ( = #k<OPAL:BLACK-FILL> ) 12 /Courier-Bold DrawText
5 -161 -172 49 14 true [0 0 0] [1 1 1] (:PARENT) 12 /Courier DrawText
54 -161 -172 105 14 true [0 0 0] [1 1 1] ( = #k<TOP-AGG> ) 12 /Courier-Bold DrawText
5 -175 -186 84 14 true [0 0 0] [1 1 1] (:UPDATE-INFO) 12 /Courier DrawText
89 -175 -186 308 14 true [0 0 0] [1 1 1] ( = #<Update-Info dirty-p NIL invalid-p NIL> ) 12 /Courier-Bold DrawText
5 -189 -200 49 14 true [0 0 0] [1 1 1] (:WINDOW) 12 /Courier DrawText
54 -189 -200 77 14 true [0 0 0] [1 1 1] ( = #k<WIN> ) 12 /Courier-Bold DrawText
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier-BoldOblique /Courier-Bold /Courier Helvetica-Bold 
%%BoundingBox: 72 278 540 515

%%EndDocument
 GE /Times-Bold SF
6120 26727 MT
(Figure 2-5:)SH
/Times-Roman SF
11893 XM
(The Inspector displaying the slots and values of rectangle R3.)SH
46800 50 6120 28679 UL
6120 30777 MT
(To add a new local value to)
9 W( R3 -- that is, to override an inherited value with a new local value -- you have)8 W
6120 31973 MT
(to add an extra line to the Inspector window.  In our example, R3 does not have)
220 W( a local value for)221 W
10 /Courier AF
6120 33169 MT
(:height)SH
11 /Times-Roman AF
(, since its value)
15 W( is inherited from the prototype PROTO-RECT.  To override this value, click the)14 W
6120 34365 MT
(cursor at the end of a line, and type)36 W
10 /Courier AF
22204 XM
(^j)SH
11 /Times-Roman AF
23715 XM
(to add a new line to the display.  Now you can type)
36 W( ")37 W
10 /Courier AF
(:height =)37 W
6120 35561 MT
(100)SH
11 /Times-Roman AF
(" and hit RETURN to install the new slot/value pair.  The change should be reflected instantly in R3.)SH
6120 37859 MT
(You can bring up other)
190 W( Inspector windows by positioning the mouse over another object and hitting)189 W
6120 39055 MT
(HELP again, or you)
245 W( can select text that is already displayed in the Inspector and using the ")246 W
10 /Courier AF
(Show)SH
6120 40251 MT
(Object)SH
11 /Times-Roman AF
(" or ")7 W
10 /Courier AF
(Show in New)7 W
11 /Times-Roman AF
(" buttons.)
7 W( For)
287 W( example, to examine the)6 W
10 /Courier AF
36380 XM
(opal:black-fill)SH
11 /Times-Roman AF
45661 XM
(object that is the)6 W
6120 41447 MT
(value of R3's)1063 W
10 /Courier AF
15510 XM
(:filling-style)SH
11 /Times-Roman AF
25248 XM
(slot, either)
1063 W( click-and-drag or double-click on the)1064 W
10 /Courier AF
6120 42643 MT
(#k<OPAL:BLACK-FILL>)SH
11 /Times-Roman AF
17838 XM
(value and press the ")43 W
10 /Courier AF
(Show in New)43 W
11 /Times-Roman AF
(" button.  The object)
43 W( will be displayed in a)42 W
6120 43839 MT
(new window.)SH
6120 46137 MT
(When you are finished with)
63 W( the Inspector, you can click on the ")64 W
10 /Courier AF
(Done)SH
11 /Times-Roman AF
(" or ")64 W
10 /Courier AF
(Done All)64 W
11 /Times-Roman AF
(" buttons to make)64 W
6120 47333 MT
(the Inspector windows disappear.)SH
6120 49631 MT
(Significantly more detail about the Inspector is included in the Debugging Manual,)
181 W( including how to)180 W
6120 50827 MT
(explore the Prototype/Instance hierarchy of objects, and how to use)
155 W( the Inspector for debugging more)156 W
6120 52023 MT
(compilcated examples.)SH
14 /Times-Bold AF
6120 55841 MT
(2.5. Parameters)SH
11 /Times-Roman AF
6120 57037 MT
(Most objects in Garnet have a list of)3 W
/Times-Italic SF
22396 XM
(parameters)SH
/Times-Roman SF
(, which are stored in the)3 W
10 /Courier AF
38267 XM
(:parameters)SH
11 /Times-Roman AF
45145 XM
(slot. This)
280 W( is a list)2 W
6120 58233 MT
(of all customizable properties of the object.  For example,)SH
10 /Courier AF
31840 XM
(gv opal:rectangle :parameter)SH
11 /Times-Roman AF
48915 XM
(yields:)SH
8 /Courier AF
8040 60337 MT
(\050:LEFT :TOP :WIDTH :HEIGHT :LINE-STYLE :FILLING-STYLE :DRAW-FUNCTION :VISIBLE\051)SH
11 /Times-Roman AF
6120 62635 MT
(These can be considered)
62 W( the "public" slots of)63 W
10 /Courier AF
26701 XM
(opal:rectangle)SH
11 /Times-Roman AF
(, which can be given customized values)63 W
6120 63831 MT
(when instances are created.  If)
165 W( values are not supplied for these slots when instances are created, the)164 W
6120 65027 MT
(default values will be inherited from the prototype object.)SH
6120 67325 MT
(There are other slots that change when instances of)2 W
10 /Courier AF
28891 XM
(opal:rectangle)SH
11 /Times-Roman AF
37568 XM
(are added)
2 W( to a window, such as the)3 W
10 /Courier AF
6120 68521 MT
(:window)SH
11 /Times-Roman AF
10678 XM
(and)SH
10 /Courier AF
12623 XM
(:parent)SH
11 /Times-Roman AF
17180 XM
(slots, but these slots are not intended to be set manually.  Since they are "read-)82 W
6120 69717 MT
(only" slots, they are not included in the)SH
10 /Courier AF
23648 XM
(:parameters)SH
11 /Times-Roman AF
30523 XM
(list.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 2.7)
SH( Unnamed)
1800 W( Objects)SH
51886 XM
(Page 69)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(Several tools in Garnet rely heavily on the)28 W
10 /Courier AF
27383 XM
(:parameters)SH
11 /Times-Roman AF
34287 XM
(slot. As)
333 W( discussed in section 2.4, the Inspector)29 W
8280 9151 MT
(displays the parameter)
29 W( slots in red, so that they are easily identified.  The)28 W
10 /Courier AF
41054 XM
(gg:prop-sheet)SH
11 /Times-Roman AF
49157 XM
(gadget which)28 W
8280 10347 MT
(is used in)
22 W( Gilt and Lapidary looks at the)23 W
10 /Courier AF
26358 XM
(:parameters)SH
11 /Times-Roman AF
33256 XM
(slot to determine which slots should be displayed)23 W
8280 11543 MT
(for the user to customize.  These objects are discussed thoroughly in)
205 W( later sections of this reference)204 W
8280 12739 MT
(manual.)SH
8280 15037 MT
(The typical Garnet user will not have to worry much)
70 W( about the)71 W
10 /Courier AF
36859 XM
(:parameters)SH
11 /Times-Roman AF
43805 XM
(slot. All)
417 W( of the slots that)71 W
8280 16233 MT
(are in the list are documented in this)
274 W( manual, so it is really just another way to access the same)273 W
8280 17429 MT
(information about properties of objects.  For details on defining)259 W
10 /Courier AF
39130 XM
(:parameters)SH
11 /Times-Roman AF
46265 XM
(slots for your own)260 W
8280 18625 MT
(objects, see)
400 W( the KR Manual.  Unless you are defining your own list for a special object, the)399 W
10 /Courier AF
8280 19821 MT
(:parameters)SH
11 /Times-Roman AF
15155 XM
(slot should be considered read-only.)SH
14 /Times-Bold AF
8280 23639 MT
(2.6. Destroying Objects)SH
11 /Times-Roman AF
8280 24835 MT
(Before moving on to the next)
240 W( section, destroy the window so that it does not interfere with future)241 W
8280 26031 MT
(examples in this tutorial.  Type the following line.)SH
8 /Courier AF
10200 27196 MT
(\050opal:destroy WIN\051)SH
11 /Times-Roman AF
8280 29494 MT
(Destroying the window will also destroy all of the objects that were added to its aggregate.)
84 W( We)
441 W( can no)83 W
8280 30690 MT
(longer manipulate)
257 W( R1, R2, and R3, since they were destroyed by the previous call.  However, the)258 W
8280 31886 MT
(PROTO-RECT was never added to the top-level aggregate, and it was not destroyed.  You could destroy)46 W
8280 33082 MT
(this object now with a)45 W
10 /Courier AF
18496 XM
(destroy)SH
11 /Times-Roman AF
23016 XM
(call, but we will)
45 W( be using this object again in Section 2.6.  So, leave the)46 W
8280 34278 MT
(object residing in memory for now.)SH
8280 36576 MT
(When an)
266 W( object is destroyed, its variable name becomes unbound and the memory space that was)265 W
8280 37772 MT
(allocated to the object is freed.  You can)169 W
10 /Courier AF
27821 XM
(destroy)SH
11 /Times-Roman AF
32465 XM
(any object, including windows.  If you destroy)
169 W( a)170 W
8280 38968 MT
(window, all objects inside of it are automatically destroyed.  Similarly, if you destroy an)
107 W( aggregate, all)106 W
8280 40164 MT
(objects in it are destroyed.  When you destroy a graphical object \050like a line)
3 W( or a circle\051, it is automatically)4 W
8280 41360 MT
(removed from any aggregate it might be in and erased from the screen.)SH
8280 43658 MT
(If a prototype object is destroyed \050i.e., an object that)
115 W( has had instances created from it\051, then all of the)114 W
8280 44854 MT
(instances of that object will be recursively destroyed.)SH
8280 47152 MT
(Occasionally in the course of developing a program,)
37 W( you may \050either accidentally or intentionally\051 define)38 W
8280 48348 MT
(a new object which happens to have the same name as an old object.  When)
37 W( the new object is created, its)36 W
8280 49544 MT
(variable name is set to the)
34 W( new object, and the old object by the same name is destroyed.  Also, all of the)35 W
8280 50740 MT
(instances of the old object are recursively destroyed.)SH
8280 53038 MT
(For example, in Section 2.2)
15 W( above, we created the object PROTO-RECT, which still exists in memory.  If)14 W
8280 54234 MT
(we now enter the following new schema definition)
25 W( for an object by the same name, then the old PROTO-)26 W
8280 55430 MT
(RECT will be destroyed.)SH
8 /Courier AF
10200 56595 MT
(\050create-instance 'PROTO-RECT opal:rectangle\051)SH
11 /Times-Roman AF
8280 58893 MT
(When the new schema is entered, a)
144 W( warning is given that the old object is being destroyed.  You can)143 W
8280 60089 MT
(safely ignore this message, assuming that you intended to override the definition of the old schema.)SH
14 /Times-Bold AF
8280 63907 MT
(2.7. Unnamed Objects)SH
11 /Times-Roman AF
8280 65103 MT
(Sometimes you will want to create objects that do not have a particular name.)
122 W( For)
520 W( example, you may)123 W
8280 66299 MT
(want to write a function that)
101 W( returns a rectangle, but it will be called repeatedly and should not destroy)100 W
8280 67495 MT
(previous instances with new ones.  In this)
5 W( case, you should return an unnamed rectangle from the function)6 W
8280 68691 MT
(which can be used just like the named objects we have created earlier in this tutorial.)SH
8280 70989 MT
(As an example, the following code creates an unnamed object and internally)
62 W( generates a unique variable)61 W
ES
PStoPSsaved restore
%%Page: (8,9,10,11) 3
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 70)
SH( Garnet)
830 W( Tutorial)SH
34650 XM
(The Prototype-Instance System)
SH( Chapter)
1550 W( 2)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(name for it.  Instead of supplying a quoted name to)SH
10 /Courier AF
28848 XM
(create-instance)SH
11 /Times-Roman AF
(, we give it the value NIL.)SH
8 /Courier AF
8040 9120 MT
(\050create-instance NIL opal:rectangle)SH
9480 9985 MT
(\050:left 10\051 \050:top 10\051 \050:width 75\051 \050:height 50\051\051)SH
11 /Times-Roman AF
6120 12283 MT
(When you enter this schema definition,)
158 W( the)159 W
10 /Courier AF
26412 XM
(create-instance)SH
11 /Times-Roman AF
35846 XM
(call will return the generated internal)159 W
6120 13479 MT
(name of the rectangle -- something like)106 W
10 /Courier AF
24425 XM
(RECTANGLE-123)SH
11 /Times-Roman AF
(. This)
487 W( name has)
106 W( a unique number as a suffix)105 W
6120 14675 MT
(that prevents it from being confused with other)
140 W( rectangles in Garnet.  You can now use the generated)141 W
6120 15871 MT
(name to refer to the object.)SH
8 /Courier AF
8040 17084 MT
(\050gv RECTANGLE-123 :top\051)SH
/Times-Italic SF
20040 XM
(; Replace this name with the name of your rectangle.)SH
11 /Times-Roman AF
6120 19382 MT
(Usually it is convenient)
135 W( to assign an unnamed object to a local variable.  The following line creates a)134 W
6120 20578 MT
(circle and assigns it to the new variable MY-CIRCLE.)SH
8 /Courier AF
8040 21743 MT
(\050setf MY-CIRCLE \050create-instance NIL opal:circle\051\051)SH
11 /Times-Roman AF
6120 24041 MT
(Now MY-CIRCLE will have the generated circle as its value.)
8 W( If)
292 W( the same line were entered again, the old)9 W
6120 25237 MT
(circle would not be destroyed, but the)
44 W( variable MY-CIRCLE would still point to a new one.  This can be)43 W
6120 26433 MT
(useful inside a function that uses a)13 W
10 /Courier AF
21638 XM
(let)SH
11 /Times-Roman AF
23726 XM
(clause -- every)
13 W( time the)14 W
10 /Courier AF
34391 XM
(let)SH
11 /Times-Roman AF
36480 XM
(is executed, new objects are assigned)14 W
6120 27629 MT
(to the local variables, but the old objects still remain in memory and)
205 W( are not destroyed. Section 6.2)204 W
6120 28825 MT
(contains an example of how unnamed objects might be used in a function.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 3.2)
SH( Aggregates)1800 W
51886 XM
(Page 71)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(3. An Overview of the Objects)SH
14 SS 
8280 13146 MT
(3.1. Lines, Rectangles, and Circles)SH
11 /Times-Roman AF
8280 14342 MT
(The Opal package provides different graphical shapes including circles,)
195 W( rectangles, roundtangles, and)196 W
8280 15538 MT
(lines. There)
957 W( are also several different kinds of text, and some special objects like bitmaps and)340 W
8280 16734 MT
(arrowheads. Each)
329 W( graphical object has special slots that determine its appearance, which are documented)27 W
8280 17930 MT
(in the Opal)
151 W( manual.  \050For example, the line uses the slots)150 W
10 /Courier AF
35378 XM
(:x1)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
37878 XM
(:y1)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
40378 XM
(:x2)SH
11 /Times-Roman AF
(, and)150 W
10 /Courier AF
44891 XM
(:y2)SH
11 /Times-Roman AF
(.\051 See)
575 W( the section)150 W
8280 19126 MT
("Specific Graphical Objects" in the Opal manual for details of)
171 W( how each object works.  Examples of)172 W
8280 20322 MT
(creating instances of graphical objects appear throughout this tutorial.)SH
14 /Times-Bold AF
8280 24140 MT
(3.2. Aggregates)SH
11 /Times-Roman AF
8280 25336 MT
(In order to put)
68 W( a large number of objects into a window, we might create all of the objects and then add)67 W
8280 26532 MT
(them, one at a time, to the window.  However, this is usually not how)
312 W( we organize the objects)313 W
8280 27728 MT
(conceptually. For)
731 W( example, if we were to create a sophisticated interface with a scroll bar,)
228 W( several)227 W
8280 28924 MT
(buttons, and labels for the buttons, we would not want to add each rectangle in the)
143 W( scroll bar and the)144 W
8280 30120 MT
(buttons individually.  Instead, we)
135 W( would think of creating the scroll bar from its composite rectangles,)134 W
8280 31316 MT
(then creating)
78 W( the buttons along with their labels, and then adding the scroll bar assembly and the button)79 W
8280 32512 MT
(assembly to the window.)SH
8280 34810 MT
(Grouping objects together like this)
21 W( is the function of the)20 W
10 /Courier AF
33414 XM
(aggregate)SH
11 /Times-Roman AF
39109 XM
(object. Any)
315 W( graphical object can be)20 W
8280 36006 MT
(a component of an)
131 W( aggregate - lines, circles, rectangles, and even other aggregates.  Usually all of the)132 W
8280 37202 MT
(components of an aggregate are related in some way, like they are all parts of the same button.)SH
8280 39500 MT
(Two other objects, the)117 W
10 /Courier AF
18859 XM
(aggregadget)SH
11 /Times-Roman AF
25851 XM
(and the)117 W
10 /Courier AF
29567 XM
(aggrelist)SH
11 /Times-Roman AF
(, are)
117 W( also used to group objects, and usually)116 W
8280 40696 MT
(appear more often in Garnet programs.)57 W
10 /Courier AF
26331 XM
(Aggregadgets)SH
11 /Times-Roman AF
33863 XM
(and)SH
10 /Courier AF
35783 XM
(aggrelists)SH
11 /Times-Roman AF
42116 XM
(are instances of)58 W
10 /Courier AF
49405 XM
(aggregate)SH
11 /Times-Roman AF
(,)SH
8280 41892 MT
(and they have special features that)
170 W( make them very useful in creating objects.  These objects will be)169 W
8280 43088 MT
(discussed further in Section 3.3.)SH
8280 45386 MT
(The top-level object in a window is always)
6 W( an aggregate.  This aggregate contains all of the objects in that)7 W
8280 46582 MT
(window. Therefore,)
393 W( for an object to appear in)
59 W( a window it either has to be a component of the top-level)58 W
8280 47778 MT
(aggregate, or it has to)
19 W( be a component of another aggregate which, at the top of its aggregate hierarchy, is)20 W
8280 48974 MT
(a component of the top-level aggregate.)SH
8280 51272 MT
(When aggregates have other aggregates as components, an aggregate hierarchy is formed.)
23 W( This)
320 W( hierarchy)22 W
8280 52468 MT
(describes the way that objects are grouped together.  Figure 3-1 shows how)
97 W( the objects that comprise a)98 W
8280 53664 MT
(vertical scroll bar might be conceptually organized.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 72)
SH( Garnet)
830 W( Tutorial)SH
35929 XM
(An Overview of the Objects)
SH( Chapter)
1550 W( 3)SH
46800 50 6120 4486 UL
46800 50 6120 8155 UL
11 SS 
75 100 0 6570 48777 GB 
%%BeginDocument: tutorial/v-scroll-hierarchy.ps
%!PS-Adobe-2.0
%%Title: Aggregraph Demo
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 15, 1991, 2:49 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/RoundtanglePath
   {    % stack: left, top, width, height, radius
        /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
        /right l w add def  /bottom t h sub def
          l r add t moveto                         % origin
          right t right t r sub r arcto            % top side
          right bottom right r sub bottom r arcto  % right side
          l bottom l bottom r add r arcto          % bottom side
          l t l r add t r arcto                    % left side
          16 {pop} repeat  % each arcto accumulates 4 stack parameters
   } def

/RoundtangleDict 27 dict def
/DrawRoundtangle
   {    % stack: left, top, width, height, radius, line-halftone,
        %        line-red, line-green, line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        
        RoundtangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub  width thickness sub  height thickness sub
          radius thickness sub RoundtanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height radius thickness-by-2 sub RoundtanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
39 -189 translate
gsave
0 648 390 270 ClipToRectangle
0 0 translate
gsave
0 0 0 0 false 0 0 [] 1 122 587 86 523 DrawLine
0 0 0 0 false 0 0 [] 1 122 560 86 523 DrawLine
0 0 0 0 false 0 0 [] 1 122 533 86 523 DrawLine
0 0 0 0 false 0 0 [] 1 122 493 86 523 DrawLine
0 0 0 0 false 0 0 [] 1 122 439 86 523 DrawLine
0 0 0 0 false 0 0 [] 1 241 506 221 493 DrawLine
0 0 0 0 false 0 0 [] 1 241 479 221 493 DrawLine
0 0 0 0 false 0 0 [] 1 275 452 242 439 DrawLine
0 0 0 0 false 0 0 [] 1 275 425 242 439 DrawLine
10 534 76 22 5 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRoundtangle
14 519 68 0 0 0 0 false (Scroll Bar) 12 /Courier DrawText
122 598 112 22 5 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRoundtangle
126 583 104 0 0 0 0 false (Gray Background) 12 /Courier DrawText
122 571 69 22 5 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRoundtangle
126 556 61 0 0 0 0 false (Indicator) 12 /Courier DrawText
122 544 36 22 5 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRoundtangle
126 529 28 0 0 0 0 false (Text) 12 /Courier DrawText
122 504 99 22 5 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRoundtangle
126 489 91 0 0 0 0 false (Top Trill Box) 12 /Courier DrawText
122 450 120 22 5 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRoundtangle
126 435 112 0 0 0 0 false (Bottom Trill Box) 12 /Courier DrawText
241 517 42 22 5 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRoundtangle
245 502 34 0 0 0 0 false (Frame) 12 /Courier DrawText
241 490 43 22 5 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRoundtangle
245 475 35 0 0 0 0 false (Arrow) 12 /Courier DrawText
275 463 42 22 5 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRoundtangle
279 448 34 0 0 0 0 false (Frame) 12 /Courier DrawText
275 436 43 22 5 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRoundtangle
279 421 35 0 0 0 0 false (Arrow) 12 /Courier DrawText
350 618 20 210 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
350 638 20 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
360 635 353 628 357 628 357 621 363 621 363 628 367 628 360 635 16 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
350 408 20 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
360 391 353 398 357 398 357 405 363 405 363 398 367 398 360 391 16 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
351 570 18 18 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
355 557 10 0 0 0 0 false (25) 10 /Courier DrawText
grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 111 261 501 531

%%EndDocument
 GE /Times-Bold SF
6120 30954 MT
(Figure 3-1:)SH
/Times-Roman SF
11893 XM
(One possible hierarchy for the objects that make up a scroll bar.)SH
46800 50 6120 32906 UL
6120 34657 MT
(In the scroll)
32 W( bar hierarchy, all of the leaves correspond to shapes that appear in the scroll bar.  The leaves)31 W
6120 35853 MT
(are always Opal graphic primitives, like rectangles and text.  The nodes)413 W
10 /Courier AF
42843 XM
(top-trill-box)SH
11 /Times-Roman AF
51332 XM
(and)SH
10 /Courier AF
6120 37049 MT
(bottom-trill-box)SH
11 /Times-Roman AF
16200 XM
(are both aggregates,)
205 W( each with two components.  And, of course, the top-level)204 W
10 /Courier AF
6120 38245 MT
(scroll-bar)SH
11 /Times-Roman AF
12395 XM
(node is an aggregate.)SH
6120 40543 MT
(This aggregate)
15 W( hierarchy should not be confused with the inheritance hierarchy that was discussed earlier.)16 W
6120 41739 MT
(Components of an aggregate do not inherit values from their parents.)
236 W( Instead,)
745 W( relationships among)235 W
6120 42935 MT
(aggregates and components must be explicitly defined using constraints, a)
324 W( concept which will be)325 W
6120 44131 MT
(discussed shortly in this tutorial.)SH
6120 46429 MT
(When an)
37 W( object is added to an aggregate, its)36 W
10 /Courier AF
26115 XM
(:parent)SH
11 /Times-Roman AF
30626 XM
(slot is set to point to that aggregate.  Therefore, in)36 W
6120 47625 MT
(Figure 3-1, the)40 W
10 /Courier AF
13022 XM
(:parent)SH
11 /Times-Roman AF
17537 XM
(of the)40 W
10 /Courier AF
20427 XM
(bottom-trill-box)SH
11 /Times-Roman AF
30342 XM
(is the)40 W
10 /Courier AF
33050 XM
(scroll-bar)SH
11 /Times-Roman AF
39365 XM
(aggregate. This)355 W
10 /Courier AF
46815 XM
(:parent)SH
11 /Times-Roman AF
51330 XM
(slot)SH
6120 48821 MT
(is called a)97 W
/Times-Italic SF
11084 XM
(pointer)SH
/Times-Roman SF
14634 XM
(slot because its value is another Garnet object.  Pointer slots are)
97 W( discussed further in)96 W
6120 50017 MT
(section 3.3.)SH
6120 52315 MT
(The functions)164 W
10 /Courier AF
12802 XM
(add-component)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
21316 XM
(remove-component)SH
11 /Times-Roman AF
(, and)164 W
10 /Courier AF
33658 XM
(move-component)SH
11 /Times-Roman AF
42498 XM
(are used to manipulate)165 W
6120 53511 MT
(the components of an aggregate.  Descriptions of these and other functions for components may be)
29 W( found)28 W
6120 54707 MT
(in the "Aggregate Objects" section of the Opal manual.)SH
14 /Times-Bold AF
6120 58525 MT
(3.3. Aggregadgets, Aggrelists, and Aggregraphs)SH
11 /Times-Roman AF
6120 59721 MT
(Aggregadgets and aggrelists are types of aggregates.)
6 W( With)
289 W( these objects, an aggregate and its components)7 W
6120 60917 MT
(can basically be defined simultaneously.  In aggregadgets, all the components are defined with a list in)
2 W( the)1 W
10 /Courier AF
6120 62113 MT
(:parts)SH
11 /Times-Roman AF
10197 XM
(slot. In)
679 W( an aggrelist, a single)
202 W( object is defined to be an "item-prototype", and the aggrelist)203 W
6120 63309 MT
(automatically generates several instances of that object to make its components.)
14 W( The)
302 W( aggregraph is a type)13 W
6120 64505 MT
(of aggregadget, where all the)
56 W( components are nodes and arcs that make up a graph.  Figures 2-1 and 3-1)57 W
6120 65701 MT
(were created using Garnet aggregraphs.)
91 W( For)
456 W( several examples and a complete discussion of how to use)90 W
6120 66897 MT
(aggregraphs, see the Aggregadgets, Aggrelists, and Aggregraphs Reference Manual.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 3.3)
SH( Aggregadgets,)
1800 W( Aggrelists, and Aggregraphs)SH
51886 XM
(Page 73)SH
46800 50 8280 4486 UL
12 /Times-Bold AF
8280 8004 MT
(3.3.1. Aggregadgets)SH
11 /Times-Roman AF
8280 9200 MT
(When you create an)
164 W( aggregadget, you may list all of the objects that you want as components of the)165 W
8280 10396 MT
(aggregadget in the)35 W
10 /Courier AF
16784 XM
(:parts)SH
11 /Times-Roman AF
20694 XM
(slot. The)
345 W( list is specified)
35 W( using the standard Lisp backquote macro, and there)34 W
8280 11592 MT
(are usually many function calls and)
86 W( objects inside the list that must be evaluated with a comma.  As an)87 W
8280 12788 MT
(example of an aggregadget, we will analyze)
123 W( the following schema definition, but it is not necessary to)122 W
8280 13984 MT
(type it in.  This code contains a few references that have not)
131 W( been discussed in this tutorial yet, but it)132 W
8280 15180 MT
(serves the purpose of giving us a plain aggregadget to study.)SH
8 /Courier AF
10200 16345 MT
(\050create-instance 'AGG opal:aggregadget)SH
11640 17210 MT
(\050:left 10\051 \050:top 20\051)SH
11640 18075 MT
(\050:parts)SH
12120 18940 MT
(`\050\050:my-circle ,opal:circle)SH
18840 19805 MT
(\050:left 60\051 \050:top 70\051)SH
18840 20670 MT
(\050:width 100\051 \050:height 100\051)SH
18840 21535 MT
(\050:line-style ,opal:dashed-line\051\051)SH
13080 22400 MT
(\050:my-rect ,opal:rectangle)SH
17880 23265 MT
(\050:left ,\050o-formula \050gvl :parent :left\051\051\051)SH
17880 24130 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
17880 24995 MT
(\050:width 80\051 \050:height 40\051)SH
17880 25860 MT
(\050:filling-style ,opal:black-fill\051)SH
17880 26725 MT
(\050:line-style NIL\051\051\051\051\051)SH
11 /Times-Roman AF
8280 29023 MT
(The)SH
10 /Courier AF
10334 XM
(:parts)SH
11 /Times-Roman AF
14278 XM
(slot in the AGG object contains a list of lists, with each internal list)
69 W( being a definition of a)68 W
8280 30219 MT
(component. The)
675 W( components of AGG will)
200 W( be a circle and a rectangle, to which we have given the)201 W
8280 31415 MT
(arbitrary names)65 W
10 /Courier AF
15556 XM
(:my-circle)SH
11 /Times-Roman AF
21896 XM
(and)SH
10 /Courier AF
23824 XM
(:my-rect)SH
11 /Times-Roman AF
(. These)
405 W( names,)
65 W( which are preceded by a colon, will be the)64 W
8280 32611 MT
(names of new slots in the aggregadget.  That is,)
232 W( two)233 W
/Times-Italic SF
33959 XM
(pointer)SH
/Times-Roman SF
37645 XM
(slots will be created in AGG, named)233 W
10 /Courier AF
8280 33807 MT
(:my-circle)SH
11 /Times-Roman AF
14664 XM
(and)SH
10 /Courier AF
16636 XM
(:my-rect)SH
11 /Times-Roman AF
(, which will)
109 W( have the circle and rectangle objects as their values.  We say)108 W
8280 35003 MT
(these are pointer slots because they point to other objects.)SH
8280 37301 MT
(Other pointer slots which are automatically created are the)192 W
10 /Courier AF
35999 XM
(:parent)SH
11 /Times-Roman AF
40666 XM
(slots of both)
192 W( the circle and the)193 W
8280 38497 MT
(rectangle. Since)
301 W( these objects are being added as components to the aggregadget, their)13 W
10 /Courier AF
46946 XM
(:parent)SH
11 /Times-Roman AF
51433 XM
(slots are)12 W
8280 39693 MT
(set as with aggregates.  Thus,)
75 W( a two-way path of communication is established between the aggregadget)76 W
8280 40889 MT
(and each of its components -- the)SH
10 /Courier AF
23155 XM
(:parent)SH
11 /Times-Roman AF
27630 XM
(slot points up, and the)SH
10 /Courier AF
37592 XM
(:my-circle)SH
11 /Times-Roman AF
43867 XM
(slot points down.)SH
8280 43187 MT
(Notice that the)38 W
10 /Courier AF
15145 XM
(:parts)SH
11 /Times-Roman AF
19058 XM
(list is backquoted \050with a)38 W
10 /Courier AF
30583 XM
(`)SH
11 /Times-Roman AF
31496 XM
(instead of a)38 W
10 /Courier AF
36955 XM
(')SH
11 /Times-Roman AF
(\051. Using)
351 W( this backquote syntax, we can)38 W
8280 44383 MT
(then use commas to evaluate the)
64 W( names of objects inside the list.  The references to be evaluated are the)65 W
8280 45579 MT
(two graphical object prototypes \050the)334 W
10 /Courier AF
26109 XM
(opal:circle)SH
11 /Times-Roman AF
33318 XM
(and the)333 W
10 /Courier AF
37466 XM
(opal:rectangle)SH
11 /Times-Roman AF
(\051 and the graphical)333 W
8280 46775 MT
(qualities \050)358 W
10 /Courier AF
(opal:dashed-line)SH
11 /Times-Roman AF
23240 XM
(and)SH
10 /Courier AF
25461 XM
(opal:black-fill)SH
11 /Times-Roman AF
(\051. Commas)
993 W( are also used to evaluate the)359 W
10 /Courier AF
8280 47971 MT
(o-formula)SH
11 /Times-Roman AF
14019 XM
(calls, which establish constraints among objects \050constraints are discussed in Chapter 4\051.)
64 W( If)401 W
8280 49167 MT
(the commas were not)
69 W( present inside the)70 W
10 /Courier AF
26392 XM
(:parts)SH
11 /Times-Roman AF
30337 XM
(list, then the names of all the Garnet objects would not)70 W
8280 50363 MT
(be dereferenced, and they would be)
5 W( treated as mere atoms, not objects.  Similarly, the calls to)4 W
10 /Courier AF
49680 XM
(o-formula)SH
11 /Times-Roman AF
8280 51559 MT
(would appear as simple quoted lists instead of function calls.)SH
8280 53857 MT
(An important difference between aggregates and aggregadgets is that when you)
80 W( create an instance of an)81 W
8280 55053 MT
(aggregadget, the instance will automatically have components that match those in)
41 W( the prototype.  That is,)40 W
8280 56249 MT
(if we created an instance of AGG, called AGG-INSTANCE, then AGG-INSTANCE would automatically)21 W
8280 57445 MT
(have a circle and rectangle component just like AGG.  In contrast, when you create)
140 W( an instance of an)139 W
8280 58641 MT
(aggregate, the components are not automatically generated, and you would have to create and add)
8 W( them to)9 W
8280 59837 MT
(the instance manually.)SH
8280 62135 MT
(Other examples of aggregadget definitions can be found in sections 4.5 and 6.1 in this tutorial.)SH
12 /Times-Bold AF
8280 65819 MT
(3.3.2. Aggrelists)SH
11 /Times-Roman AF
8280 67015 MT
(An aggrelist allows)
109 W( you to create and easily arrange objects into a nicely formatted graphical list.  The)108 W
8280 68211 MT
(motivation for aggrelists)
69 W( comes from the arrangement of groups of objects like button panels, tic-marks,)70 W
8280 69407 MT
(and menu)
10 W( choices, where all the components of an aggregate are similar and should appear in a vertical or)9 W
8280 70603 MT
(horizontal list.)SH
ES
PStoPSsaved restore
%%Page: (12,13,14,15) 4
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 74)
SH( Garnet)
830 W( Tutorial)SH
35929 XM
(An Overview of the Objects)
SH( Chapter)
1550 W( 3)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(In an aggrelist, a single item-prototype is)
144 W( defined, and then this object is automatically copied several)145 W
6120 9151 MT
(times to make the components of the aggrelist.  The)45 W
10 /Courier AF
29634 XM
(:left)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
33228 XM
(:top)SH
11 /Times-Roman AF
(, and other slots of the components are)44 W
6120 10347 MT
(automatically given values that)
60 W( will neatly lay out the components in a list, so that the programmer does)61 W
6120 11543 MT
(not have to do any calculations for the positions of the objects.)SH
6120 13841 MT
(As with aggregadgets, aggrelists use the backquote)
62 W( syntax to define the item prototype.  There are many)61 W
6120 15037 MT
(customizable aspects of aggrelists, such as whether to orient the components vertically or)
SH( horizontally, the)1 W
6120 16233 MT
(distance between each object, etc.  Since there are so)
392 W( many customizable slots, please see the)391 W
6120 17429 MT
(Aggregadgets and Aggrelists Reference Manual for a)
53 W( discussion of how to use aggrelists.  Section 6.1 in)54 W
6120 18625 MT
(this tutorial includes an example of the definition of an aggrelist.)SH
14 /Times-Bold AF
6120 22443 MT
(3.4. Windows)SH
11 /Times-Roman AF
6120 23639 MT
(When we want to add an object to a window, what we)
14 W( really mean is that we want to add the object to the)13 W
6120 24835 MT
(window's top-level aggregate)
57 W( \050or to an aggregate at a lower level in that window's aggregate hierarchy\051.)58 W
6120 26031 MT
(Every window has one)
68 W( top-level aggregate, and all objects that appear in the window are components in)67 W
6120 27227 MT
(its aggregate hierarchy.)SH
6120 29525 MT
(Any object must be added to a)
24 W( window in order for it to be shown on the screen.  Additionally, a window)25 W
6120 30721 MT
(must be updated before any changes made to it \050or the objects in it\051 will appear.  Windows)
84 W( are updated)83 W
6120 31917 MT
(when you explicitly issue a call to)329 W
10 /Courier AF
23668 XM
(opal:update)SH
11 /Times-Roman AF
(, and they)
329 W( are also continuously updated when)330 W
6120 33113 MT
(interactors are running and changing objects in the)
32 W( window \050during the)31 W
10 /Courier AF
37961 XM
(main-event-loop)SH
11 /Times-Roman AF
(, discussed in)31 W
6120 34309 MT
(Section 5\051.)SH
14 /Times-Bold AF
6120 38127 MT
(3.5. Gadgets)SH
11 /Times-Roman AF
6120 39323 MT
(The Garnet gadgets are a set)
12 W( of ready-made widgets that can be treated as regular graphical objects.  They)13 W
6120 40519 MT
(have slots that can be customized with user-defined values, and are added to windows)
52 W( just like graphical)51 W
6120 41715 MT
(objects. Generally,)
297 W( they are)
11 W( objects that are commonly found in an interface including scroll bars, menus,)12 W
6120 42911 MT
(buttons and editable text fields.  In the Tour,)
167 W( you created instances of the radio button panel and the)166 W
6120 44107 MT
(vertical slider.  There are also more sophisticated gadgets like scrolling windows, property)
179 W( sheets \050to)180 W
6120 45303 MT
(allow quick editing of the slots of objects\051, and selection handles \050for moving and growing objects\051.)SH
6120 47601 MT
(Most of the gadgets come in two versions -- one called the Garnet Style, and one)
182 W( modeled after the)181 W
6120 48797 MT
(OSF/Motif style.  Examples of how to use the gadgets)
35 W( are found in demonstration programs at the end of)36 W
6120 49993 MT
(each of the gadget files, which can be executed by commands)
50 W( like)49 W
10 /Courier AF
36069 XM
(\050garnet-gadgets:menu-go\051)SH
11 /Times-Roman AF
(. For)373 W
6120 51189 MT
(detailed descriptions of all the available gadgets, see the Gadgets Reference Manual.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 4.1)
SH( Formulas)1800 W
51886 XM
(Page 75)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(4. Constraints)SH
11 /Times-Roman AF
8280 10524 MT
(In the course of putting objects in a window, it is often)
208 W( desirable to define relationships among the)209 W
8280 11720 MT
(objects. For)
351 W( example, you may want the tops of several objects to be aligned, or you might)
38 W( want a set of)37 W
8280 12916 MT
(circles to have the same center, or you may)
76 W( want an object to change color if it is selected.  Constraints)77 W
8280 14112 MT
(are used in Garnet to define these relationships among objects.)SH
8280 16410 MT
(Although all the examples in this section use constraints on)
12 W( the positions of objects, it should be clear that)11 W
8280 17606 MT
(constraints can be defined for filling styles, strings, or)
183 W( any other property of a Garnet object.  Many)184 W
8280 18802 MT
(examples of constraints can be found in)
146 W( other sections of this tutorial.  Additionally, much of the KR)145 W
8280 19998 MT
(Reference Manual is devoted to the discussion of constraints among objects.  The)
127 W( sections "Constraint)128 W
8280 21194 MT
(Maintenance" and "Slot and Value Manipulation Functions" should be of particular interest.)SH
14 /Times-Bold AF
8280 25012 MT
(4.1. Formulas)SH
11 /Times-Roman AF
8280 26208 MT
(A formula is an)
19 W( explicit definition of how to calculate the value for a slot.  If we want to constrain the top)18 W
8280 27404 MT
(of one object to be the same as another, then)
141 W( we define a formula for the)142 W
10 /Courier AF
42642 XM
(:top)SH
11 /Times-Roman AF
45459 XM
(slot of the dependent)142 W
8280 28600 MT
(object. With)
469 W( constraints, the value of one slot always)97 W
/Times-Italic SF
33078 XM
(depends)SH
/Times-Roman SF
37053 XM
(on the value of one or more other slots,)96 W
8280 29796 MT
(and we say the formula in that slot has)SH
/Times-Italic SF
25479 XM
(dependencies)SH
/Times-Roman SF
31678 XM
(on the other slots.)SH
8280 32094 MT
(An important point)
76 W( about constraints is that they are constantly maintained by the system.  That is, they)77 W
8280 33290 MT
(are evaluated once when they are first created, and then)
114 W( they are continually)113 W
/Times-Italic SF
43472 XM
(re-evaluated)SH
/Times-Roman SF
49418 XM
(when any of)113 W
8280 34486 MT
(their dependencies)
59 W( change.  Thus, if several objects depend on the top of a certain rectangle, then all the)60 W
8280 35682 MT
(objects will change position whenever the rectangle is moved.)SH
46800 50 8280 37833 UL
75 100 0 8730 72080 GB 
%%BeginDocument: tutorial/align-top.ps
%!PS-Adobe-2.0
%%Title: Opal 11
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 26, 1991, 3:34 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
104 -274 translate
gsave
0 648 260 100 ClipToRectangle
0 0 translate
gsave
20 618 60 40 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
110 618 60 40 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
220.0 598.0 20.0 20.0 0 360 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawEllipse
grestore

grestore

0 648 260 100 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 176 346 436 446

%%EndDocument
 GE /Times-Bold SF
8280 47882 MT
(Figure 4-1:)SH
/Times-Roman SF
14053 XM
(Three objects that are all aligned with the same top.  The top)
236 W( of the gray rectangle is)235 W
14053 49078 MT
(constrained to the white rectangle, and the top of the black)
34 W( circle is constrained to the top of)35 W
14053 50274 MT
(the gray rectangle.)SH
46800 50 8280 52226 UL
8280 54324 MT
(As our first example of defining constraints among objects, we will make the)
172 W( window in Figure 4-1.)171 W
8280 55520 MT
(Let's begin by creating the white rectangle at an absolute position, and then create)
193 W( the other objects)194 W
8280 56716 MT
(relative to it.  Create the window and the first box with the following code.)SH
8 /Courier AF
10200 57929 MT
(\050create-instance 'CONSTRAINTS-WIN inter:interactor-window)SH
/Times-Italic SF
40440 XM
(; Create the window)SH
/Courier SF
11640 58794 MT
(\050:left 750\051\050:top 80\051\050:width 260\051\050:height 100\051\051)SH
10200 59659 MT
(\050create-instance 'TOP-AGG opal:aggregate\051)SH
/Times-Italic SF
40440 XM
(; Create an aggregate)SH
/Courier SF
10200 60524 MT
(\050s-value CONSTRAINTS-WIN :aggregate TOP-AGG\051)SH
/Times-Italic SF
40440 XM
(; Assign the aggregate to the window)SH
/Courier SF
10200 61389 MT
(\050opal:update CONSTRAINTS-WIN\051)SH
/Times-Italic SF
40440 XM
(; Make the window appear)SH
/Courier SF
10200 63119 MT
(\050create-instance 'WHITE-RECT opal:rectangle)SH
/Times-Italic SF
40440 XM
(; Create a rectangle)SH
/Courier SF
11640 63984 MT
(\050:left 20\051 \050:top 30\051)SH
11640 64849 MT
(\050:width 60\051 \050:height 40\051)SH
11640 65714 MT
(\050:filling-style opal:white-fill\051\051)SH
10200 67444 MT
(\050opal:add-components TOP-AGG WHITE-RECT\051)SH
/Times-Italic SF
40440 XM
(; Add the rectangle to the window)SH
/Courier SF
10200 68309 MT
(\050opal:update CONSTRAINTS-WIN\051)SH
/Times-Italic SF
40440 XM
(; Make changes in the window appear)SH
11 /Times-Roman AF
8280 70607 MT
(We are now ready to create the other)
152 W( objects that are aligned with WHITE-RECT.  We could simply)151 W
8280 71803 MT
(create another rectangle and a circle that each have their top at 30, but this would lead to extra work if we)18 W
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 76)
SH( Garnet)
830 W( Tutorial)SH
42648 XM
(Constraints Chapter)
1550 W( 4)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(ever wanted to change the top of all the objects, since each object's)48 W
10 /Courier AF
36614 XM
(:top)SH
11 /Times-Roman AF
39336 XM
(slot would have to be changed)47 W
6120 9151 MT
(individually. If)
283 W( we instead define a relationship that depends on the top of WHITE-RECT, then whenever)4 W
6120 10347 MT
(the top of WHITE-RECT changes, the)
26 W( top of the other objects will automatically change, too.  Define the)25 W
6120 11543 MT
(schema for the gray rectangle as follows.)SH
8 /Courier AF
8040 12708 MT
(\050create-instance 'GRAY-RECT opal:rectangle)SH
9480 13573 MT
(\050:left 110\051)SH
9480 14438 MT
(\050:top \050o-formula \050gv WHITE-RECT :top\051\051\051)SH
/Times-Italic SF
29160 XM
(; Constrain the top of this rectangle to the top of WHITE-RECT)SH
/Courier SF
9480 15303 MT
(\050:width 60\051 \050:height 40\051)SH
9480 16168 MT
(\050:filling-style opal:gray-fill\051\051)SH
8040 17898 MT
(\050opal:add-components TOP-AGG GRAY-RECT\051)SH
8040 18763 MT
(\050opal:update CONSTRAINTS-WIN\051)SH
11 /Times-Roman AF
6120 21061 MT
(You can see that without specifying)
208 W( an absolute position for the top of the gray rectangle, we have)209 W
6120 22257 MT
(constrained it to always have the same top as the white rectangle.)
99 W( The)
471 W( formula in the)98 W
10 /Courier AF
45551 XM
(:top)SH
11 /Times-Roman AF
48324 XM
(slot of the)98 W
6120 23453 MT
(gray rectangle was defined using the functions)46 W
10 /Courier AF
27181 XM
(o-formula)SH
11 /Times-Roman AF
32902 XM
(and)SH
10 /Courier AF
34811 XM
(gv)SH
11 /Times-Roman AF
(. The)367 W
10 /Courier AF
38960 XM
(o-formula)SH
11 /Times-Roman AF
44682 XM
(function is used to)47 W
6120 24649 MT
(declare that an expression is a constraint.  When)17 W
10 /Courier AF
27775 XM
(gv)SH
11 /Times-Roman AF
29267 XM
(is used inside a formula,)
17 W( it causes a dependency to be)16 W
6120 25845 MT
(established on the referenced slot, so that the formula will be reevaluated when the)
4 W( value in the referenced)5 W
9 SS 
11802 26703 MT
(1)SH
11 SS 
6120 27066 MT
(slot changes.)SH
6120 29364 MT
(To see if our)
238 W( constraint is working, try changing the top of the white rectangle with the following)237 W
6120 30560 MT
(instructions and notice how the gray rectangle moves with it.  Try)
75 W( setting the top to other values, if you)76 W
6120 31756 MT
(wish.)SH
8 /Courier AF
8040 32921 MT
(\050s-value WHITE-RECT :top 50\051)SH
8040 33786 MT
(\050opal:update CONSTRAINTS-WIN\051)SH
11 /Times-Roman AF
6120 36084 MT
(The important thing to notice is that the value)
24 W( of the)23 W
10 /Courier AF
29570 XM
(:top)SH
11 /Times-Roman AF
32268 XM
(slot of GRAY-RECT changes as the top of the)23 W
6120 37280 MT
(WHITE-RECT changes.  This shows that the formula in GRAY-RECT is being re-evaluated whenever)
11 W( its)12 W
6120 38476 MT
(depended values change.)SH
6120 40774 MT
(Now we are ready to add the black)
74 W( circle to the window.  We have a choice of whether to constrain the)73 W
6120 41970 MT
(top of the circle to the white rectangle or the gray rectangle.  Since)
81 W( we are going to be examining these)82 W
6120 43166 MT
(objects closely in the next few paragraphs, let's constrain the circle to the gray rectangle, resulting)
67 W( in an)66 W
6120 44362 MT
(indirect relationship with the white one.  Define the black circle with the following code.)SH
8 /Courier AF
8040 45527 MT
(\050create-instance 'BLACK-CIRCLE opal:circle)SH
9480 46392 MT
(\050:left 200\051)SH
9480 47257 MT
(\050:top \050o-formula \050gv GRAY-RECT :top\051\051\051)SH
9480 48122 MT
(\050:width 40\051 \050:height 40\051)SH
9480 48987 MT
(\050:filling-style opal:black-fill\051\051)SH
8040 50717 MT
(\050opal:add-components TOP-AGG BLACK-CIRCLE\051)SH
8040 51582 MT
(\050opal:update CONSTRAINTS-WIN\051)SH
11 /Times-Roman AF
6120 53880 MT
(At this point, you may want to set the)118 W
10 /Courier AF
23988 XM
(:top)SH
11 /Times-Roman AF
26781 XM
(of the)
118 W( white rectangle again just to see if the black circle)119 W
6120 55076 MT
(follows along with the gray rectangle.)SH
14 /Times-Bold AF
6120 58894 MT
(4.2. Cached Values)SH
11 /Times-Roman AF
6120 60090 MT
(An interesting question might have occurred to you -- what happens if you)
176 W( set the)175 W
10 /Courier AF
44956 XM
(:top)SH
11 /Times-Roman AF
47806 XM
(of the gray)175 W
6120 61286 MT
(rectangle now?  Setting the value of)
36 W( a slot which already has a formula in it does not destroy the existing)37 W
1406 50 42512 61486 UL
6120 62482 MT
(constraint. However,)
441 W( it does override the current)83 W
/Times-Italic SF
28652 XM
(cached)SH
/Times-Roman SF
32124 XM
(value of the)
83 W( formula.  Try setting the)82 W
10 /Courier AF
49247 XM
(:top)SH
11 /Times-Roman AF
52004 XM
(of)SH
6120 63678 MT
(the gray rectangle now.)SH
10800 50 6120 68144 UL
7 SS 
7020 69645 MT
(1)SH
9 SS 
7370 69972 MT
(There is another function called)41 W
10 /Courier AF
19250 XM
(g-value)SH
9 /Times-Roman AF
23716 XM
(that is similar to)41 W
10 /Courier AF
29930 XM
(gv)SH
9 /Times-Roman AF
(, except that it never causes)
41 W( dependencies to be established.)40 W
6120 70986 MT
(Older versions of Garnet required that)13 W
10 /Courier AF
20148 XM
(gv)SH
9 /Times-Roman AF
21586 XM
(only be)
13 W( used inside formulas, and)14 W
10 /Courier AF
33994 XM
(g-value)SH
9 /Times-Roman AF
38433 XM
(to be used ouside.  The)14 W
10 /Courier AF
47042 XM
(gv)SH
9 /Times-Roman AF
48481 XM
(function has)14 W
6120 72000 MT
(since been enhanced so that it can be used everywhere.  It would be unusual to ever need to use)SH
10 /Courier AF
40695 XM
(g-value)SH
9 /Times-Roman AF
(.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 4.4)
SH( Using)
1800 W( the :obj-over Slot)SH
51886 XM
(Page 77)SH
46800 50 8280 4486 UL
8 /Courier AF
10200 7747 MT
(\050s-value WHITE-RECT :top 30\051)SH
/Times-Italic SF
24600 XM
(; Return everything to its original position)SH
/Courier SF
10200 8612 MT
(\050opal:update CONSTRAINTS-WIN\051)SH
10200 10342 MT
(\050s-value GRAY-RECT :top 40\051)SH
10200 11207 MT
(\050opal:update CONSTRAINTS-WIN\051)SH
11 /Times-Roman AF
8280 13505 MT
(The position of WHITE-RECT will remain unchanged, since it was defined with an)
135 W( absolute position.)136 W
8280 14701 MT
(However, the new value that we)
12 W( gave for the top of the gray rectangle has repositioned GRAY-RECT and)11 W
8280 15897 MT
(BLACK-CIRCLE. Previously,)
359 W( the formula in the)42 W
10 /Courier AF
30787 XM
(:top)SH
11 /Times-Roman AF
33504 XM
(slot of GRAY-RECT had correctly computed its)42 W
8280 17093 MT
(own top, getting the value from the)12 W
10 /Courier AF
24128 XM
(:top)SH
11 /Times-Roman AF
26815 XM
(slot of WHITE-RECT.  Now, however, we replaced that)
12 W( cached)11 W
8280 18289 MT
(value with our absolute value of 40.)SH
8280 20587 MT
(To show that the formula is still alive and well in the)5 W
10 /Courier AF
31867 XM
(:top)SH
11 /Times-Roman AF
34548 XM
(slot of GRAY-RECT, try setting the)6 W
10 /Courier AF
50809 XM
(:top)SH
11 /Times-Roman AF
53490 XM
(slot)SH
8280 21783 MT
(of WHITE-RECT again.)SH
8 /Courier AF
10200 22948 MT
(\050s-value WHITE-RECT :top 10\051)SH
10200 23813 MT
(\050opal:update CONSTRAINTS-WIN\051)SH
11 /Times-Roman AF
8280 26111 MT
(Since the top of GRAY-RECT depends on WHITE-RECT, its formula)
55 W( will be recomputed whenever the)54 W
8280 27307 MT
(top of WHITE-RECT changes.  There is now a new cached)
33 W( value for the)34 W
10 /Courier AF
41027 XM
(:top)SH
11 /Times-Roman AF
43736 XM
(of GRAY-RECT, a result)34 W
8280 28503 MT
(of re-evaluating the formula.)SH
14 /Times-Bold AF
8280 32321 MT
(4.3. Formulas and s-value)SH
11 /Times-Roman AF
8280 33517 MT
(It is important to distinguish the behavior of)152 W
10 /Courier AF
29174 XM
(s-value)SH
11 /Times-Roman AF
33801 XM
(when it is)
152 W( used on a slot with a formula in it,)151 W
8280 34713 MT
(versus using it on a slot)
68 W( with an absolute value in it \050like the number 5\051.  Setting the value of a slot that)69 W
/Times-Italic SF
8280 35909 MT
(already)SH
/Times-Roman SF
11928 XM
(has a formula in it will)
13 W( not destroy the old formula.  Instead, only the cached value of the formula)12 W
8280 37105 MT
(is changed, and the formula will be re-evaluated if any of its dependencies change.)SH
8280 39403 MT
(On the other hand,)150 W
10 /Courier AF
17341 XM
(s-value)SH
11 /Times-Roman AF
21966 XM
(will replace one absolute value with another absolute value, and)
150 W( the old)151 W
8280 40599 MT
(value will never appear again.  That is, if an object was created with some particular absolute value for)
44 W( a)43 W
8280 41795 MT
(slot, and we changed that slot with)180 W
10 /Courier AF
25060 XM
(s-value)SH
11 /Times-Roman AF
(, then)
180 W( the new value will be permanent until the slot is)181 W
8280 42991 MT
(explicitly set again with)SH
10 /Courier AF
19096 XM
(s-value)SH
11 /Times-Roman AF
(.)SH
8280 45289 MT
(The one)
60 W( exception to the above rules is when the new value is a formula itself.  Using)59 W
10 /Courier AF
47312 XM
(s-value)SH
11 /Times-Roman AF
51846 XM
(to set a)59 W
8280 46485 MT
(new formula will always obliterate what was previously in the slot, whether it was an absolute)
39 W( value or a)40 W
8280 47681 MT
(formula.)SH
14 /Times-Bold AF
8280 51499 MT
(4.4. Using the :obj-over Slot)SH
11 /Times-Roman AF
8280 52695 MT
(When designing an interface, you)
1 W( may want a box to be drawn around an object to show that it is selected.)SH
8280 53891 MT
(In the usual case, you will want)
33 W( to define only one box that will be drawn around different objects, and it)34 W
8280 55087 MT
(would be nice if the box changed size when it was over objects of different)
65 W( size.  The traditional Garnet)64 W
8280 56283 MT
(approach to this problem is to use constraints in the dimension slots of)
74 W( the selection box that depend on)75 W
8280 57479 MT
(the dimensions of the object it is over.)SH
46800 50 8280 59630 UL
75 100 0 8730 93877 GB 
%%BeginDocument: tutorial/obj-over.ps
%!PS-Adobe-2.0
%%Title: Opal 11
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 26, 1991, 3:31 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
104 -274 translate
gsave
0 648 260 100 ClipToRectangle
0 0 translate
gsave
20 618 60 40 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
110 618 60 40 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
220.0 598.0 20.0 20.0 0 360 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawEllipse
192 626 56 56 0 0 0 0 false 0 0 [] 4 -1 0 0 0 false DrawRectangle
grestore

grestore

0 648 260 100 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 176 346 436 446

%%EndDocument
 GE /Times-Bold SF
8280 69679 MT
(Figure 4-2:)SH
/Times-Roman SF
14053 XM
(A selection box drawn around an object.)SH
46800 50 8280 71631 UL
ES
PStoPSsaved restore
%%Page: (16,17,18,19) 5
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 78)
SH( Garnet)
830 W( Tutorial)SH
42648 XM
(Constraints Chapter)
1550 W( 4)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(In the traditional approach, we use the slot)85 W
10 /Courier AF
25769 XM
(:obj-over)SH
11 /Times-Roman AF
31529 XM
(in the selection box to specify which object)
85 W( the)84 W
6120 9151 MT
(selection box should be drawn around.)
59 W( The)394 W
10 /Courier AF
26113 XM
(:obj-over)SH
11 /Times-Roman AF
31848 XM
(slot is a pointer slot, since it contains an object)60 W
6120 10347 MT
(as its value \050pointer slots were discussed in section 3.3\051.  Then, we define)
36 W( formulas for the dimensions of)35 W
6120 11543 MT
(the selection box which depend on the)15 W
10 /Courier AF
23362 XM
(:obj-over)SH
11 /Times-Roman AF
29053 XM
(slot. The)
307 W( formulas in the following schema definition)16 W
6120 12739 MT
(should be clear.)SH
8 /Courier AF
8040 13904 MT
(\050create-instance 'SEL-BOX opal:rectangle)SH
9480 14769 MT
(\050:obj-over GRAY-RECT\051)SH
/Times-Italic SF
20520 XM
(; A pointer slot)SH
/Courier SF
9480 15634 MT
(\050:left \050o-formula \050- \050gvl :obj-over :left\051 10\051\051\051)SH
9480 16499 MT
(\050:top \050o-formula \050- \050gvl :obj-over :top\051 10\051\051\051)SH
9480 17364 MT
(\050:width \050o-formula \050+ 20 \050gvl :obj-over :width\051\051\051\051)SH
9480 18229 MT
(\050:height \050o-formula \050+ 20 \050gvl :obj-over :height\051\051\051\051)SH
9480 19094 MT
(\050:line-style opal:line-4\051\051)SH
/Times-Italic SF
22920 XM
(; A line with a thickness of 4 pixels)SH
/Courier SF
8040 20824 MT
(\050opal:add-components TOP-AGG SEL-BOX\051)SH
8040 21689 MT
(\050opal:update CONSTRAINTS-WIN\051)SH
11 /Times-Roman AF
6120 23987 MT
(Now if you set the)245 W
10 /Courier AF
15746 XM
(:obj-over)SH
11 /Times-Roman AF
21666 XM
(slot of the selection box to be a)
245 W( different object, the position and)244 W
6120 25183 MT
(dimensions of SEL-BOX will change according to the object.)SH
8 /Courier AF
8040 26348 MT
(\050s-value SEL-BOX :obj-over BLACK-CIRCLE\051)SH
8040 27213 MT
(\050opal:update CONSTRAINTS-WIN\051)SH
11 /Times-Roman AF
6120 29511 MT
(You may)
1 W( have noticed that we performed computations in the formulas above, instead of just using values)2 W
6120 30707 MT
(directly as in the GRAY-RECT and BLACK-CIRCLE objects.  In)
149 W( fact, formulas can contain any lisp)148 W
6120 31903 MT
(expression. Also,)
283 W( the formulas)
4 W( above use the function)5 W
10 /Courier AF
30324 XM
(gvl)SH
11 /Times-Roman AF
32404 XM
(instead of)5 W
10 /Courier AF
36996 XM
(gv)SH
11 /Times-Roman AF
(, which was used earlier.  We use)5 W
10 /Courier AF
6120 33099 MT
(gvl)SH
11 /Times-Roman AF
8227 XM
(here because we are referencing a slot,)32 W
10 /Courier AF
25731 XM
(:obj-over)SH
11 /Times-Roman AF
(, in the same schema)
32 W( as the formula.  Previously,)31 W
6120 34295 MT
(we used)SH
10 /Courier AF
9968 XM
(gv)SH
11 /Times-Roman AF
11443 XM
(to look at a slot in a different object.)SH
6120 36593 MT
(Another point of interest in these formulas is the)
30 W( use of indirect references.  In the)31 W
10 /Courier AF
42925 XM
(:left)SH
11 /Times-Roman AF
46231 XM
(formula above,)31 W
6120 37789 MT
(the pointer slot)15 W
10 /Courier AF
13040 XM
(:obj-over)SH
11 /Times-Roman AF
18730 XM
(is referenced, and then its)15 W
10 /Courier AF
30349 XM
(:left)SH
11 /Times-Roman AF
33639 XM
(slot is referenced, in turn.  It is important to)14 W
6120 38985 MT
(distinguish between this case and the case where a value is stored in the same object)
29 W( as the formula, as in)30 W
6120 40181 MT
(the following example.)SH
6120 42479 MT
(Suppose we)
293 W( want the selection box to become invisible if no object is currently selected.  Using)292 W
10 /Courier AF
6120 43675 MT
(s-value)SH
11 /Times-Roman AF
(, we can set the)136 W
10 /Courier AF
18024 XM
(:visible)SH
11 /Times-Roman AF
23235 XM
(slot of SEL-BOX to)
136 W( have a formula which will cause the box to)137 W
6120 44871 MT
(disappear when)
385 W( its current selection is NIL.  \050We could have also defined this formula in the)384 W
10 /Courier AF
6120 46067 MT
(create-instance)SH
11 /Times-Roman AF
15395 XM
(call.\051)SH
8 /Courier AF
8040 47232 MT
(\050s-value SEL-BOX :visible \050o-formula \050gvl :obj-over\051\051\051)SH
11 /Times-Roman AF
6120 49530 MT
(Clearly, if)48 W
10 /Courier AF
10951 XM
(:obj-over)SH
11 /Times-Roman AF
16674 XM
(is set to NIL, then the value in the)48 W
10 /Courier AF
32320 XM
(:visible)SH
11 /Times-Roman AF
37443 XM
(slot will also become NIL, and the)49 W
6120 50726 MT
(box will become invisible.  When)7 W
10 /Courier AF
21285 XM
(:obj-over)SH
11 /Times-Roman AF
26967 XM
(is again set to be some)
7 W( object, then the)6 W
10 /Courier AF
44256 XM
(:visible)SH
11 /Times-Roman AF
49337 XM
(slot will)6 W
6120 51922 MT
(have a non-NIL value, and the box will)
154 W( appear in the appropriate position.  Previously, if we had set)155 W
10 /Courier AF
6120 53118 MT
(:obj-over)SH
11 /Times-Roman AF
11915 XM
(to NIL, then updating the window would have caused an error when the formulas tried to)119 W
6120 54314 MT
(access the)SH
10 /Courier AF
10822 XM
(:left)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
14372 XM
(:top)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
17322 XM
(:width)SH
11 /Times-Roman AF
(, and)SH
10 /Courier AF
23335 XM
(:height)SH
11 /Times-Roman AF
27810 XM
(of the non-existent selected object.)SH
6120 56612 MT
(We are)
150 W( finished with the objects from this section, but the next section will continue to use the same)151 W
6120 57808 MT
(window. So,)
275 W( to remove the old objects from the window, use the function)SH
10 /Courier AF
39023 XM
(remove-components)SH
11 /Times-Roman AF
(.)SH
8 /Courier AF
8040 58973 MT
(\050opal:remove-components TOP-AGG WHITE-RECT GRAY-RECT BLACK-CIRCLE SEL-BOX\051)SH
8040 59838 MT
(\050opal:update CONSTRAINTS-WIN\051)SH
14 /Times-Bold AF
6120 63656 MT
(4.5. Constraints in Aggregadgets)SH
11 /Times-Roman AF
6120 64852 MT
(As mentioned in section 3.2, the)21 W
10 /Courier AF
20728 XM
(:parent)SH
11 /Times-Roman AF
25224 XM
(slot of a)
21 W( component is automatically set to its parent aggregate)20 W
6120 66048 MT
(when it is attached.  Since aggregadgets are instances of aggregates, all)
63 W( of the components defined in an)64 W
6120 67244 MT
(aggregadget have their)1 W
10 /Courier AF
16414 XM
(:parent)SH
11 /Times-Roman AF
20890 XM
(slot set in this way.  In this section, we will)
1 W( examine how this slot can be)SH
6120 68440 MT
(used to communicate between components of an aggregadget.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 4.5)
SH( Constraints)
1800 W( in Aggregadgets)SH
51886 XM
(Page 79)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(The aggregadget we will use in this example will make)
122 W( the picture of concentric circles in Figure 4-3.)123 W
8280 9151 MT
(Suppose that we want to be)
45 W( able to change the size and position of the circles easily, and that this should)44 W
8280 10347 MT
(be done by setting as few slots as possible.)SH
46800 50 8280 13437 UL
1 1 0 1080 60834 GB 
%%BeginDocument: tutorial/con-circles.ps
%!PS-Adobe-2.0
%%Title: Opal 3
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 28, 1991, 1:46 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
134 -254 translate
gsave
0 648 200 140 ClipToRectangle
0 0 translate
gsave
100.0 578.0 50.0 50.0 0 360 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawEllipse
100.0 578.0 33.0 33.0 0 360 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawEllipse
100.0 578.0 16.0 16.0 0 360 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawEllipse
grestore

grestore

0 648 200 140 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 206 326 406 466

%%EndDocument
 GE /Times-Bold SF
8280 29986 MT
(Figure 4-3:)SH
/Times-Roman SF
14053 XM
(An aggregadget with three circles as components.)SH
46800 50 8280 31938 UL
8280 33689 MT
(From the picture, we see that the dimensions of the black circle are the same as the)
119 W( dimensions of the)120 W
8280 34885 MT
(entire group of objects.  That is,)
165 W( if a bounding box were drawn around the black circle, all the other)164 W
8280 36081 MT
(objects would be inside the bounding box, too.  Therefore,)
68 W( it will be helpful to put slots for the size and)69 W
8280 37277 MT
(position of this circle in the)
7 W( top-level aggregadget, and have all the circles reference these top-level values)6 W
8280 38473 MT
(through formulas.)SH
8280 40771 MT
(To start, let's create an aggregadget with only one component -- the black circle -- and then redefine)
60 W( the)61 W
8280 41967 MT
(aggregadget with the other components later.  The following code creates this one-component aggregate.)SH
8 /Courier AF
10200 43132 MT
(\050create-instance 'CON-CIRCLES opal:aggregadget)SH
11640 43997 MT
(\050:left 20\051 \050:top 20\051)SH
11640 44862 MT
(\050:width 100\051)SH
11640 45727 MT
(\050:height \050o-formula \050gvl :width\051\051\051)SH
11640 46592 MT
(\050:parts)SH
12120 47457 MT
(`\050\050:black-circle ,opal:circle)SH
20280 48322 MT
(\050:left ,\050o-formula \050gvl :parent :left\051\051\051)SH
20280 49187 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
20280 50052 MT
(\050:width ,\050o-formula \050gvl :parent :width\051\051\051)SH
20280 50917 MT
(\050:height ,\050o-formula \050gvl :width\051\051\051)SH
20280 51782 MT
(\050:filling-style ,opal:black-fill\051\051\051\051\051)SH
10200 53512 MT
(\050opal:add-component TOP-AGG CON-CIRCLES\051)SH
10200 54377 MT
(\050opal:update CONSTRAINTS-WIN\051)SH
11 /Times-Roman AF
8280 56675 MT
(All those commas are needed because we want)
217 W( the Opal objects and the calls to)216 W
10 /Courier AF
46804 XM
(o-formula)SH
11 /Times-Roman AF
52695 XM
(to be)216 W
8280 57871 MT
(evaluated inside the backquoted list.)
114 W( If)
505 W( the commas were not present, then those forms would become)115 W
8280 59067 MT
(inert atoms and lists instead of objects and function calls.)SH
8280 61365 MT
(The black circle in the aggregadget gets its position and dimensions from the)
149 W( top-level slots in CON-)148 W
8280 62561 MT
(CIRCLES. The)
359 W( communication link used here is the)42 W
10 /Courier AF
32185 XM
(:parent)SH
11 /Times-Roman AF
36703 XM
(slot, which points from the component to)43 W
8280 63757 MT
(the aggregadget.)
43 W( The)
359 W( function)42 W
10 /Courier AF
22235 XM
(gvl)SH
11 /Times-Roman AF
24352 XM
(is used in the formulas for the black circle because the)42 W
10 /Courier AF
48973 XM
(:parent)SH
11 /Times-Roman AF
53490 XM
(slot)SH
8280 64953 MT
(is in the same object as)
72 W( the formulas.  Notice that the black circle does not "inherit" any values from its)73 W
1406 50 40588 65153 UL
8280 66149 MT
(parent. Creating)
687 W( components in an aggregadget sets up an)206 W
/Times-Italic SF
36273 XM
(aggregate)SH
/Times-Roman SF
41213 XM
(hierarchy, where values travel)205 W
8280 67345 MT
(back-and-forth over constraints, not inheritance links.  If you want a component to depend on values)
9 W( in its)10 W
8280 68541 MT
(parent, you have to define constraints.)SH
8280 70839 MT
(The other components of)
20 W( CON-CIRCLES will be defined analogously, but with a little more computation)19 W
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 80)
SH( Garnet)
830 W( Tutorial)SH
42648 XM
(Constraints Chapter)
1550 W( 4)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(in the formulas to get them to line up)
67 W( properly.  Before typing in the new definition of CON-CIRCLES,)68 W
6120 9151 MT
(remove the old aggregadget from the window with the following instruction.)SH
8 /Courier AF
8040 10316 MT
(\050opal:remove-components TOP-AGG CON-CIRCLES\051)SH
8040 11181 MT
(\050opal:update CONSTRAINTS-WIN\051)SH
11 /Times-Roman AF
6120 13479 MT
(And now we)
55 W( are ready to redefine CON-CIRCLES again, this time with an extra top-level slot to reduce)54 W
6120 14675 MT
(redundant calculations, and of course with the other two circles.)SH
8 /Courier AF
8040 15840 MT
(\050create-instance 'CON-CIRCLES opal:aggregadget)SH
9480 16705 MT
(\050:left 20\051 \050:top 20\051)SH
9480 17570 MT
(\050:width 100\051)SH
9480 18435 MT
(\050:height \050o-formula \050gvl :width\051\051\051)SH
9480 19300 MT
(\050:radius/3 \050o-formula \050round \050gvl :width\051 6\051\051\051)SH
9480 20165 MT
(\050:parts)SH
9960 21030 MT
(`\050\050:black-circle ,opal:circle)SH
18120 21895 MT
(\050:left ,\050o-formula \050gvl :parent :left\051\051\051)SH
18120 22760 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
18120 23625 MT
(\050:width ,\050o-formula \050gvl :parent :width\051\051\051)SH
18120 24490 MT
(\050:height ,\050o-formula \050gvl :width\051\051\051)SH
18120 25355 MT
(\050:filling-style ,opal:black-fill\051\051)SH
10920 26220 MT
(\050:gray-circle ,opal:circle)SH
17640 27085 MT
(\050:left ,\050o-formula \050+ \050gvl :parent :left\051)SH
28200 27950 MT
(\050gvl :parent :radius/3\051\051\051\051)SH
17640 28815 MT
(\050:top ,\050o-formula \050+ \050gvl :parent :top\051)SH
27720 29680 MT
(\050gvl :parent :radius/3\051\051\051\051)SH
17640 30545 MT
(\050:width ,\050o-formula \050- \050gvl :parent :width\051)SH
28680 31410 MT
(\050* 2 \050gvl :parent :radius/3\051\051\051\051\051)SH
17640 32275 MT
(\050:height ,\050o-formula \050gvl :width\051\051\051)SH
17640 33140 MT
(\050:filling-style ,opal:gray-fill\051\051)SH
10920 34005 MT
(\050:white-circle ,opal:circle)SH
18120 34870 MT
(\050:left ,\050o-formula \050+ \050gvl :parent :gray-circle :left\051)SH
28680 35735 MT
(\050gvl :parent :radius/3\051\051\051\051)SH
18120 36600 MT
(\050:top ,\050o-formula \050+ \050gvl :parent :gray-circle :top\051)SH
28200 37465 MT
(\050gvl :parent :radius/3\051\051\051\051)SH
18120 38330 MT
(\050:width ,\050o-formula \050- \050gvl :parent :gray-circle :width\051)SH
29160 39195 MT
(\050* 2 \050gvl :parent :radius/3\051\051\051\051\051)SH
18120 40060 MT
(\050:height ,\050o-formula \050gvl :width\051\051\051)SH
18120 40925 MT
(\050:filling-style ,opal:white-fill\051\051\051\051\051)SH
8040 42655 MT
(\050opal:add-components TOP-AGG CON-CIRCLES\051)SH
8040 43520 MT
(\050opal:update CONSTRAINTS-WIN\051)SH
11 /Times-Roman AF
6120 45818 MT
(The gray circle)
179 W( gets its size and position from the top-level slots just like the black circle, only it is)180 W
6120 47014 MT
(one-third the size.  The white circle is the most interesting case, where it gets)
34 W( its position and dimensions)33 W
6120 48210 MT
(from the gray circle.  Not only does the white circle communicate)
189 W( with the aggregadget through the)190 W
10 /Courier AF
6120 49406 MT
(:parent)SH
11 /Times-Roman AF
10975 XM
(slot, but it also uses the slot)379 W
10 /Courier AF
26036 XM
(:gray-circle)SH
11 /Times-Roman AF
33890 XM
(which was automatically created in the)379 W
6120 50602 MT
(aggregadget \050see)
68 W( section 3.3\051.  Thus, the formulas in the white circle trace up the aggregate hierarchy to)69 W
6120 51798 MT
(the parent aggregadget, and then back down into another component.)SH
6120 54096 MT
(To examine these pointer slots more closely, try executing the following line.)SH
8 /Courier AF
8040 55261 MT
(\050gv CON-CIRCLES :white-circle\051)SH
11 /Times-Roman AF
6120 57559 MT
(The value returned by)
102 W( this)101 W
10 /Courier AF
18449 XM
(gv)SH
11 /Times-Roman AF
20025 XM
(call is the internally generated name of the white circle.  This name was)101 W
6120 58755 MT
(generated with a unique suffix number so that it)
142 W( will not be confused with some other white circle in)143 W
6120 59951 MT
(Garnet \050see Section 2.7\051.  You can also)
52 W( look at slots of the components directly, by adding slot names to)51 W
6120 61147 MT
(the end of the)SH
10 /Courier AF
12412 XM
(gv)SH
11 /Times-Roman AF
13887 XM
(call, like)SH
8 /Courier AF
8040 62312 MT
(\050gv CON-CIRCLES :white-circle :top\051)SH
11 /Times-Roman AF
6120 64610 MT
(or even)SH
8 /Courier AF
8040 65775 MT
(\050gv CON-CIRCLES :white-circle :parent\051)SH
11 /Times-Roman AF
6120 68073 MT
(This is the end of the section)
83 W( regarding constraints.  Destroy the window we have been using to keep it)84 W
6120 69269 MT
(from interfering with future examples in the tutorial.)SH
8 /Courier AF
8040 70434 MT
(\050opal:destroy CONSTRAINTS-WIN\051)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 5.1)
SH( Kinds)
1800 W( of Interactors)SH
51886 XM
(Page 81)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(5. Interactors)SH
11 /Times-Roman AF
8280 10524 MT
(Interactors are used to communicate with the mouse and keyboard.  Sometimes you may)
174 W( just want a)173 W
8280 11720 MT
(function to be executed when the mouse is clicked, but)
188 W( often you will want changes to occur in the)189 W
8280 12916 MT
(graphics depending on the actions of the mouse.)
200 W( Examples)
673 W( include moving objects around with the)199 W
8280 14112 MT
(mouse, editing text with the mouse and keyboard, and selecting an object from a given set.)SH
8280 16410 MT
(The fundamental way that the interactors communicate with graphical objects is that they)
57 W( set slots in the)58 W
8280 17606 MT
(objects in response to mouse movements and keyboard key strokes.  That is, they generate side effects)
38 W( in)37 W
8280 18802 MT
(the objects that they operate on.  For example, some interactors set the)592 W
10 /Courier AF
47225 XM
(:selected)SH
11 /Times-Roman AF
53492 XM
(and)SH
10 /Courier AF
8280 19998 MT
(:interim-selected)SH
11 /Times-Roman AF
18872 XM
(slots to indicate which object is currently being operated on.  When objects are)116 W
8280 21194 MT
(defined with formulas that depend on these special slots,)
61 W( the appearance of the objects \050i.e., the graphics)62 W
8280 22390 MT
(of the interface\051 can change in response to the mouse.)SH
8280 24688 MT
(It is important to note that all of the gadgets come)
55 W( with their interactors already defined.  Therefore, you)54 W
8280 25884 MT
(do not need to create interactors that change the gadgets.)SH
8280 28182 MT
(In this section we will see)
154 W( some examples of how to change graphics in conjunction with interactors.)155 W
8280 29378 MT
(Section 8.5 describes how to use an important debugging)
92 W( function for interactors called)91 W
10 /Courier AF
48205 XM
(trace-inter)SH
11 /Times-Roman AF
(.)SH
8280 30574 MT
(Although this tutorial only gives examples of)
362 W( using the)363 W
10 /Courier AF
36016 XM
(button-interactor)SH
11 /Times-Roman AF
46854 XM
(and)SH
10 /Courier AF
49080 XM
(move-grow-)SH
8280 31770 MT
(interactor)SH
11 /Times-Roman AF
(, the Interactors Manual discusses and provides examples)
310 W( for all six types of Garnet)309 W
8280 32966 MT
(interactors.)SH
14 /Times-Bold AF
8280 36784 MT
(5.1. Kinds of Interactors)SH
11 /Times-Roman AF
8280 37980 MT
(The design of the interactors is based on the observation that)
40 W( there are only a few kinds of behaviors that)41 W
8280 39176 MT
(are typically used in graphical)
202 W( user interfaces.  Currently, Garnet supports seven types of interactive)201 W
8280 40372 MT
(behavior, which allows a wide variety of user actions in an interface.  Below is a list)
140 W( of the available)141 W
8280 41568 MT
(interactors, which are described in detail in the Interactors Manual.)SH
10 /Courier AF
8280 43519 MT
(Menu-Interactor)SH
11 /Times-Roman AF
17561 XM
(- For selecting one or more choices from a set of items.  Useful in menus, etc., where)6 W
11880 44715 MT
(the mouse may be held down and dragged while moving over the items to be selected.)SH
10 /Courier AF
8280 46410 MT
(Button-Interactor)SH
11 /Times-Roman AF
18812 XM
(- For selecting one or more)
57 W( choices from a set of items.  Useful in single buttons)58 W
11880 47606 MT
(and panels of buttons where the mouse can only select one item per mouse click.)SH
10 /Courier AF
8280 49301 MT
(Move-Grow-Interactor)SH
11 /Times-Roman AF
20674 XM
(- For moving and changing the size of an object.  Useful in)
119 W( scroll bars and)118 W
11880 50497 MT
(graphics editors.)SH
10 /Courier AF
8280 52192 MT
(Two-Point-Interactor)SH
11 /Times-Roman AF
20757 XM
(- For obtaining one or two points)
202 W( in a window from the user.  Useful in)203 W
11880 53388 MT
(specifying the size and position of a new object to be created.)SH
10 /Courier AF
8280 55083 MT
(Angle-Interactor)SH
11 /Times-Roman AF
18291 XM
(- For getting the angle that the mouse moves around a point.  Useful in circular)135 W
11880 56279 MT
(gauges or for "stirring motions".)SH
10 /Courier AF
8280 57974 MT
(Text-Interactor)SH
11 /Times-Roman AF
17669 XM
(- For editing strings.  Most useful for)
114 W( small strings, since Garnet does not support)115 W
11880 59170 MT
(complicated word-processing applications.)SH
10 /Courier AF
8280 60865 MT
(Gesture-Interactor)SH
11 /Times-Roman AF
19394 XM
(- For)
39 W( recognizing gestures drawn by the user \050e.g., the user draws a rough shape)38 W
11880 62061 MT
(that Garnet recognizes as a square\051.)SH
10 /Courier AF
8280 63756 MT
(Animator-Interactor)SH
11 /Times-Roman AF
20199 XM
(- For executing a function at regular intervals, allowing rapid updating)
244 W( of)245 W
11880 64952 MT
(graphics.)SH
8280 67250 MT
(There are also several interactors that work)
227 W( with the)226 W
10 /Courier AF
33439 XM
(multifont-text)SH
11 /Times-Roman AF
42340 XM
(object. This)
727 W( object and its)226 W
8280 68446 MT
(associated interactors are discussed in the Opal manual.)SH
ES
PStoPSsaved restore
%%Page: (20,21,22,23) 6
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 82)
SH( Garnet)
830 W( Tutorial)SH
42928 XM
(Interactors Chapter)
1550 W( 5)SH
46800 50 6120 4486 UL
14 /Times-Bold AF
6120 8138 MT
(5.2. The Button Interactor)SH
11 /Times-Roman AF
6120 9334 MT
(In this example, we will perform)
95 W( an elementary operation with an interactor.  We will create a window)96 W
6120 10530 MT
(with a white)
181 W( rectangle inside, and then create an interactor that will make it change colors when the)180 W
6120 11726 MT
(mouse is clicked inside of it.  First, create the window with the white rectangle.)SH
8 /Courier AF
8040 12891 MT
(\050create-instance 'INTER-WIN inter:interactor-window)SH
9480 13756 MT
(\050:left 750\051\050:top 80\051\050:width 250\051\050:height 250\051\051)SH
8040 14621 MT
(\050create-instance 'TOP-AGG opal:aggregate\051)SH
8040 15486 MT
(\050s-value INTER-WIN :aggregate TOP-AGG\051)SH
8040 16351 MT
(\050opal:update INTER-WIN\051)SH
8040 18081 MT
(\050create-instance 'CHANGING-RECT opal:rectangle)SH
9480 18946 MT
(\050:left 20\051 \050:top 30\051)SH
9480 19811 MT
(\050:width 60\051 \050:height 40\051)SH
9480 20676 MT
(\050:filling-style \050o-formula \050if \050gvl :selected\051)SH
24360 21541 MT
(opal:black-fill)SH
24360 22406 MT
(opal:white-fill\051\051\051)SH
9480 23271 MT
(\050:selected NIL\051\051)SH
/Times-Italic SF
18120 XM
(; Set by the interactor)SH
/Courier SF
8040 25001 MT
(\050opal:add-components TOP-AGG CHANGING-RECT\051)SH
8040 25866 MT
(\050opal:update INTER-WIN\051)SH
11 /Times-Roman AF
6120 28164 MT
(From the definition of the)277 W
10 /Courier AF
19146 XM
(:filling-style)SH
11 /Times-Roman AF
28098 XM
(formula, you can see that)
277 W( if the)278 W
10 /Courier AF
43968 XM
(:selected)SH
11 /Times-Roman AF
49921 XM
(slot in)278 W
6120 29360 MT
(CHANGING-RECT were)
167 W( to be set to be non-NIL, then its color would turn to black.  Conveniently,)166 W
6120 30556 MT
(setting the)88 W
10 /Courier AF
11124 XM
(:selected)SH
11 /Times-Roman AF
16887 XM
(slot is one of the side effects of the)88 W
10 /Courier AF
33289 XM
(button-interactor)SH
11 /Times-Roman AF
(. The following code)89 W
6120 31752 MT
(defines an interactor which will set the)117 W
10 /Courier AF
24258 XM
(:selected)SH
11 /Times-Roman AF
30050 XM
(slot of CHANGING-RECT, which will cause it to)116 W
6120 32948 MT
(change colors.)SH
8 /Courier AF
8040 34113 MT
(\050create-instance 'COLOR-INTER inter:button-interactor)SH
9480 34978 MT
(\050:window INTER-WIN\051)SH
9480 35843 MT
(\050:start-where \050list :in CHANGING-RECT\051\051)SH
9480 36708 MT
(\050:start-event :leftdown\051\051)SH
/Times-Italic SF
8040 38438 MT
(; Unless using CMU, Allegro, Lucid, LispWorks, or MCL)SH
/Courier SF
8040 39303 MT
(\050inter:main-event-loop\051)SH
/Times-Italic SF
8040 40168 MT
(; Hit F1 while the mouse is in the Garnet window to exit)SH
11 /Times-Roman AF
6120 42466 MT
(The)SH
10 /Courier AF
8322 XM
(main-event-loop)SH
11 /Times-Roman AF
17814 XM
(function causes Garnet to start paying attention to events \050like)
217 W( clicking the)218 W
6120 43662 MT
(mouse\051 that trigger the)
169 W( interactors.  \050A background process in CMU, Allegro, Lucid, LispWorks, and)168 W
6120 44858 MT
(MCL always pays attention to events.\051  Now you can click on the rectangle)
39 W( repeatedly and it will change)40 W
6120 46054 MT
(from white to black,)
335 W( and back again.  From this observation, and knowing how we defined the)334 W
10 /Courier AF
6120 47250 MT
(:filling-style)SH
11 /Times-Roman AF
14935 XM
(of CHANGING-RECT, you can conclude that the)141 W
10 /Courier AF
38220 XM
(button-interactor)SH
11 /Times-Roman AF
48836 XM
(is setting)141 W
6120 48446 MT
(\050and clearing\051 the)631 W
10 /Courier AF
16044 XM
(:selected)SH
11 /Times-Roman AF
22350 XM
(slot of the object.  This)
631 W( is one of the functions of the)630 W
10 /Courier AF
6120 49642 MT
(button-interactor)SH
11 /Times-Roman AF
(. When)
329 W( you are ready to resume typing in the Lisp process,)
27 W( you have to hit the F1)28 W
6120 50838 MT
(key while the mouse is in the Garnet window to get a new prompt.)
406 W( \050You)
1085 W( may execute the)405 W
10 /Courier AF
6120 52034 MT
(main-event-loop)SH
11 /Times-Roman AF
15395 XM
(call again at any Lisp prompt.\051)SH
46800 50 6120 54185 UL
1 1 0 -6355 99582 GB 
%%BeginDocument: tutorial/inter-white.ps
%!PS-Adobe-2.0
%%Title: Opal 3
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 27, 1991, 9:07 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
184 -274 translate
gsave
0 648 100 100 ClipToRectangle
0 0 translate
gsave
20 618 60 40 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
140.0 598.0 20.0 20.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
50.0 528.0 20.0 20.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
140.0 528.0 20.0 20.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
grestore

grestore

0 648 100 100 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 256 346 356 446

%%EndDocument
 GE 1 1 0 4195 99582 GB 
%%BeginDocument: tutorial/inter-black.ps
%!PS-Adobe-2.0
%%Title: Opal 3
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 27, 1991, 9:09 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/BitmapDict 9 dict def
/DrawBitmap
   {    % stack: left top width height pattern transparent-p
        %        red green blue color-p
        BitmapDict begin
        /picstr 256 string def
        /color-p exch def  /blue exch def  /green exch def /red exch def
        /transparent-p exch def
        /pattern exch def  /height exch def  /width exch def
        gsave
          translate
          width height scale
          color-p {red green blue setrgbcolor} if
          transparent-p
          % The case where the background is not drawn
          { width height false
            [ width 0 0 height 0 height ]
            {pattern} imagemask }
          % The case where the background is drawn
          { width height 1
            [ width 0 0 height 0 height ]
            {pattern} image } ifelse
        grestore
        end
   } def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def

/image-2
<ffff ff3f ff3f fe7f ee7f e4ff e0ff e01f e03f e07f e0ff e1ff e3ff e7ff efff
ffff>
def

/image-1
<ff3f fe1f fe1f cc3f c43f c07f c00f c00f c01f c03f c07f c0ff c1ff c3ff c7ff
cfff>
def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
184 -274 translate
gsave
0 648 100 100 ClipToRectangle
0 0 translate
gsave
20 618 60 40 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
140.0 598.0 20.0 20.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
50.0 528.0 20.0 20.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
140.0 528.0 20.0 20.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
68 586 16 16 image-1 true 1 1 1 true DrawBitmap
68 586 16 16 image-2 true 0 0 0 false DrawBitmap
grestore

grestore

0 648 100 100 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 256 346 356 446

%%EndDocument
 GE /Times-Bold SF
6120 66734 MT
(Figure 5-1:)SH
/Times-Roman SF
11893 XM
(The rectangle CHANGING-RECT when its)49 W
10 /Courier AF
31717 XM
(:selected)SH
11 /Times-Roman AF
37441 XM
(slot is NIL)
49 W( \050the default\051, and when)50 W
11893 67930 MT
(it is set to T by the interactor \050when the mouse is clicked over it\051.)SH
46800 50 6120 69882 UL
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 5.3)
SH( A)
1800 W( Feedback Object with the Button Interactor)SH
51886 XM
(Page 83)SH
46800 50 8280 4486 UL
14 /Times-Bold AF
8280 8138 MT
(5.3. A Feedback Object with the Button Interactor)SH
11 /Times-Roman AF
8280 9334 MT
(The method we used in the previous section with the)322 W
10 /Courier AF
34962 XM
(button-interactor)SH
11 /Times-Roman AF
45759 XM
(involved setting)
322 W( the)321 W
10 /Courier AF
8280 10530 MT
(:selected)SH
11 /Times-Roman AF
14004 XM
(slot of the selected object.  There is another way to use the button interactor which)
49 W( involves)50 W
8280 11726 MT
(using feedback)
21 W( objects.  A)20 W
/Times-Italic SF
20293 XM
(feedback object)20 W
/Times-Roman SF
27479 XM
(is some object that indicates the currently selected object.  For)20 W
8280 12922 MT
(example, it is often desirable that the actual selected)
105 W( object not move or change color, but rather that a)106 W
8280 14118 MT
(separate object follow the mouse or appear over the selection.)SH
8280 16416 MT
(In an earlier example in section 4.4, we defined a selection box which works just like)
60 W( a feedback object.)59 W
8280 17612 MT
(When the)85 W
10 /Courier AF
12970 XM
(:obj-over)SH
11 /Times-Roman AF
18730 XM
(slot of the selection)
85 W( box was set to the name of the selected object, then the box)86 W
8280 18808 MT
(appeared around the selected object.  In this example, we)
71 W( will redefine the objects from that section and)70 W
8280 20004 MT
(create an interactor to work on them.)SH
8280 22302 MT
(The following code is analogous to what was presented in section 4.4, but here the three selectable)
2 W( objects)3 W
8280 23498 MT
(are defined as components in an aggregadget.  Type in)
109 W( the following aggregadget and feedback object,)108 W
8280 24694 MT
(and add them to the current window.  Notice that because of the)141 W
10 /Courier AF
38519 XM
(:visible)SH
11 /Times-Roman AF
43736 XM
(formula in FEEDBACK-)142 W
8280 25890 MT
(RECT, that rectangle will be invisible when the window is first updated.)SH
8 /Courier AF
10200 27055 MT
(\050create-instance 'AGG opal:aggregadget)SH
11640 27920 MT
(\050:top 100\051)SH
11640 28785 MT
(\050:parts)SH
12120 29650 MT
(`\050\050:white-rect ,opal:rectangle)SH
19320 30515 MT
(\050:left 20\051)SH
19320 31380 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
19320 32245 MT
(\050:width 60\051)SH
19320 33110 MT
(\050:height 40\051)SH
19320 33975 MT
(\050:filling-style ,opal:white-fill\051\051)SH
13080 34840 MT
(\050:gray-rect ,opal:rectangle)SH
18840 35705 MT
(\050:left 110\051)SH
18840 36570 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
18840 37435 MT
(\050:width 60\051)SH
18840 38300 MT
(\050:height 40\051)SH
18840 39165 MT
(\050:filling-style ,opal:gray-fill\051\051)SH
13080 40030 MT
(\050:black-circle ,opal:circle)SH
20280 40895 MT
(\050:left 200\051)SH
20280 41760 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
20280 42625 MT
(\050:width 40\051)SH
20280 43490 MT
(\050:height 40\051)SH
20280 44355 MT
(\050:filling-style ,opal:black-fill\051\051\051\051\051)SH
10200 46085 MT
(\050create-instance 'FEEDBACK-RECT opal:rectangle)SH
11640 46950 MT
(\050:obj-over NIL\051)SH
/Times-Italic SF
19800 XM
(; A pointer slot to be set by the interactor)SH
/Courier SF
11640 47815 MT
(\050:visible \050o-formula \050gvl :obj-over\051\051\051)SH
11640 48680 MT
(\050:left \050o-formula \050- \050gvl :obj-over :left\051 10\051\051\051)SH
11640 49545 MT
(\050:top \050o-formula \050- \050gvl :obj-over :top\051 10\051\051\051)SH
11640 50410 MT
(\050:width \050o-formula \050+ 20 \050gvl :obj-over :width\051\051\051\051)SH
11640 51275 MT
(\050:height \050o-formula \050+ 20 \050gvl :obj-over :height\051\051\051\051)SH
11640 52140 MT
(\050:line-style opal:line-4\051\051)SH
10200 53870 MT
(\050opal:add-components TOP-AGG AGG FEEDBACK-RECT\051)SH
10200 54735 MT
(\050opal:update INTER-WIN\051)SH
11 /Times-Roman AF
8280 57033 MT
(Notice that the)70 W
10 /Courier AF
15241 XM
(:obj-over)SH
11 /Times-Roman AF
20986 XM
(slot of FEEDBACK-RECT is a pointer slot, as usual.  When)69 W
10 /Courier AF
48602 XM
(:obj-over)SH
11 /Times-Roman AF
54346 XM
(is)SH
8280 58229 MT
(set with the name of an object, the FEEDBACK-RECT will appear over the object because of)
12 W( the way we)13 W
8280 59425 MT
(defined its position and dimension formulas.  In this example,)
21 W( we will not set)20 W
10 /Courier AF
42789 XM
(:obj-over)SH
11 /Times-Roman AF
48484 XM
(by hand, as we)20 W
8280 60621 MT
(did previously.  Instead, we will create a)SH
10 /Courier AF
26362 XM
(button-interactor)SH
11 /Times-Roman AF
36837 XM
(to set the slot for us.)SH
8280 62919 MT
(The following code defines an interactor which)
78 W( uses the FEEDBACK-RECT to indicate which object is)79 W
8280 64115 MT
(selected. Since)
447 W( all of the selectable objects are in the same aggregate, we can)
86 W( tell the interactor to start)85 W
8280 65311 MT
(whenever the mouse is clicked over any component of AGG.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 84)
SH( Garnet)
830 W( Tutorial)SH
42928 XM
(Interactors Chapter)
1550 W( 5)SH
46800 50 6120 4486 UL
8 /Courier AF
8040 7699 MT
(\050create-instance 'SELECTOR inter:button-interactor)SH
9480 8564 MT
(\050:window INTER-WIN\051)SH
9480 9429 MT
(\050:start-where \050o-formula \050list :element-of AGG\051\051\051)SH
/Times-Italic SF
33960 XM
(; Work on the components of AGG)SH
/Courier SF
9480 10294 MT
(\050:final-feedback-obj FEEDBACK-RECT\051)SH
9480 11159 MT
(\050:how-set :toggle\051\051)SH
/Times-Italic SF
8040 12889 MT
(; Unless using CMU, Allegro, Lucid, LispWorks, or MCL)SH
/Courier SF
8040 13754 MT
(\050inter:main-event-loop\051)SH
/Times-Italic SF
8040 14619 MT
(; Hit F1 while the mouse is in the Garnet window to exit)SH
11 /Times-Roman AF
6120 16917 MT
(Now when you)
37 W( click on the objects, the feedback object will appear over the selected object.  The reason)38 W
6120 18113 MT
(is that)
36 W( the)35 W
10 /Courier AF
10779 XM
(button-interactor)SH
11 /Times-Roman AF
21289 XM
(sets the)35 W
10 /Courier AF
24903 XM
(:obj-over)SH
11 /Times-Roman AF
30613 XM
(slot of the feedback object.  Since the interactor is)35 W
6120 19309 MT
(a toggling interactor \050according to its)32 W
10 /Courier AF
22930 XM
(:how-set)SH
11 /Times-Roman AF
28037 XM
(slot\051, the)32 W
10 /Courier AF
32226 XM
(:obj-over)SH
11 /Times-Roman AF
37934 XM
(slot will be reset to NIL when the)33 W
6120 20505 MT
(selected object is clicked on again.)SH
6120 22803 MT
(If you entered the)SH
10 /Courier AF
14182 XM
(main-event-loop)SH
11 /Times-Roman AF
(, remember to hit the F1 key before typing in the next example.)SH
14 /Times-Bold AF
6120 26621 MT
(5.4. The Move-Grow Interactor)SH
11 /Times-Roman AF
6120 27817 MT
(From the previous)
107 W( example, you can see that it is easy to change the graphics in the window using the)106 W
6120 29013 MT
(mouse. We)
333 W( are now going to define several more objects in the)
29 W( window and create an interactor to move)30 W
6120 30209 MT
(them.)SH
6120 32507 MT
(The side effect of the)126 W
10 /Courier AF
16368 XM
(move-grow-interactor)SH
11 /Times-Roman AF
28768 XM
(is that it sets the)125 W
10 /Courier AF
36758 XM
(:box)SH
11 /Times-Roman AF
39558 XM
(slot of the selected object \050as)125 W
6120 33703 MT
(well as the feedback object, if any\051)
130 W( to be a list of four values -- the left, top, width, and height of the)131 W
6120 34899 MT
(object. When)
459 W( formulas are defined in the)92 W
10 /Courier AF
25395 XM
(:left)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
29037 XM
(:top)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
32079 XM
(:width)SH
11 /Times-Roman AF
(, and)91 W
10 /Courier AF
38274 XM
(:height)SH
11 /Times-Roman AF
42840 XM
(slots which depend on)91 W
6120 36095 MT
(the)SH
10 /Courier AF
7990 XM
(:box)SH
11 /Times-Roman AF
10916 XM
(slot, then the position and dimensions)
251 W( of the object will change whenever the)252 W
10 /Courier AF
48403 XM
(:box)SH
11 /Times-Roman AF
51330 XM
(slot)SH
6120 37291 MT
(changes.)SH
6120 39589 MT
(The idea goes like this:  Suppose the current value of the)58 W
10 /Courier AF
32048 XM
(:box)SH
11 /Times-Roman AF
34781 XM
(slot in a rectangle is)
58 W( '\0500 0 40 40\051.  Since)57 W
6120 40785 MT
(the)SH
10 /Courier AF
7740 XM
(:left)SH
11 /Times-Roman AF
11016 XM
(and)SH
10 /Courier AF
12880 XM
(:top)SH
11 /Times-Roman AF
15556 XM
(slots are constrainted to the)1 W
10 /Courier AF
27872 XM
(:box)SH
11 /Times-Roman AF
30548 XM
(slot, the rectangle appears at the position)
1 W( \0500,0\051.  To)2 W
6120 41981 MT
(move the object, the user clicks and drags on the rectangle until it is at position)
69 W( \05050,50\051.  When the user)68 W
6120 43177 MT
(lets go, then the interactor automatically sets the)105 W
10 /Courier AF
28497 XM
(:box)SH
11 /Times-Roman AF
31277 XM
(slot to '\05050 50 40 40\051.  Since the)105 W
10 /Courier AF
46704 XM
(:box)SH
11 /Times-Roman AF
49484 XM
(slot has)105 W
6120 44373 MT
(changed, the formulas in the)48 W
10 /Courier AF
19128 XM
(:left)SH
11 /Times-Roman AF
22451 XM
(and)SH
10 /Courier AF
24362 XM
(:top)SH
11 /Times-Roman AF
27085 XM
(slot are re-evaluated, and the rectangle appears)
48 W( at the new)47 W
6120 45569 MT
(position.)SH
6120 47867 MT
(The following code creates a prototype circle and several instances)
43 W( of it.  With a little study, it should be)44 W
6120 49063 MT
(clear how the position and dimension formulas work)
48 W( with respect to the)47 W
10 /Courier AF
38523 XM
(:box)SH
11 /Times-Roman AF
41245 XM
(slot. All)
369 W( of the circles are)47 W
6120 50259 MT
(then added to an aggregate, and this aggregate is added as a component to the top-level aggregate.)SH
8 /Courier AF
8040 51424 MT
(\050create-instance 'MOVING-CIRCLE opal:circle)SH
9480 52289 MT
(\050:box '\0500 0 40 40\051\051)SH
/Times-Italic SF
19560 XM
(; This slot will be set by the interactor)SH
/Courier SF
9480 53154 MT
(\050:left \050o-formula \050first \050gvl :box\051\051\051\051)SH
/Times-Italic SF
30120 XM
(; Get the first value in the list)SH
/Courier SF
9480 54019 MT
(\050:top \050o-formula \050second \050gvl :box\051\051\051\051)SH
9480 54884 MT
(\050:width \050o-formula \050third \050gvl :box\051\051\051\051)SH
9480 55749 MT
(\050:height \050o-formula \050fourth \050gvl :box\051\051\051\051\051)SH
8040 57479 MT
(\050create-instance 'M1 MOVING-CIRCLE)SH
9480 58344 MT
(\050:box '\050120 30 40 40\051\051\051)SH
8040 60074 MT
(\050create-instance 'M2 MOVING-CIRCLE)SH
9480 60939 MT
(\050:box '\05030 100 60 60\051\051\051)SH
8040 62669 MT
(\050create-instance 'M3 MOVING-CIRCLE)SH
9480 63534 MT
(\050:box '\050120 100 80 80\051\051\051)SH
8040 65264 MT
(\050create-instance 'CIRCLE-AGG opal:aggregate\051)SH
8040 66994 MT
(\050opal:add-components CIRCLE-AGG M1 M2 M3\051)SH
8040 68724 MT
(\050opal:add-components TOP-AGG CIRCLE-AGG\051)SH
8040 69589 MT
(\050opal:update INTER-WIN\051)SH
11 /Times-Roman AF
6120 71887 MT
(If you want to try setting the)211 W
10 /Courier AF
20398 XM
(:box)SH
11 /Times-Roman AF
23284 XM
(slot of any of these objects, you will)
211 W( see how the position and)212 W
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 5.5)
SH( A)
1800 W( Feedback Object with the Move-Grow Interactor)SH
51886 XM
(Page 85)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(dimension of each circle depend on it.  Be sure you set the)16 W
10 /Courier AF
34452 XM
(:box)SH
11 /Times-Roman AF
37143 XM
(slot to be a list)
16 W( of four positive numbers,)15 W
8280 9151 MT
(or an error will occur!)SH
8280 11449 MT
(Now let's create an instance of)
131 W( the)132 W
10 /Courier AF
24682 XM
(move-grow-interactor)SH
11 /Times-Roman AF
(, which will cause the moving circles to)132 W
8280 12645 MT
(change position.  The following interactor works on all the components of the)
57 W( aggregate CIRCLE-AGG.)56 W
8280 13841 MT
(Remember to execute the)SH
10 /Courier AF
19764 XM
(inter:main-event-loop)SH
11 /Times-Roman AF
32639 XM
(call to start the interactors working.)SH
8 /Courier AF
10200 15006 MT
(\050create-instance 'MG-INTER inter:move-grow-interactor)SH
11640 15871 MT
(\050:window INTER-WIN\051)SH
11640 16736 MT
(\050:start-where \050list :element-of CIRCLE-AGG\051\051\051)SH
/Times-Italic SF
35160 XM
(; Work on the components of CIRCLE-AGG)SH
10200 18466 MT
(; Unless using CMU, Allegro, Lucid, LispWorks, or MCL)SH
/Courier SF
10200 19331 MT
(\050inter:main-event-loop\051)SH
/Times-Italic SF
10200 20196 MT
(; Hit F1 while the mouse is in the Garnet window to exit)SH
11 /Times-Roman AF
8280 22494 MT
(Now if you press and drag in any of the circles, they will follow the)
10 W( mouse.  This is because the interactor)11 W
8280 23690 MT
(sets the)4 W
10 /Courier AF
11832 XM
(:box)SH
11 /Times-Roman AF
14511 XM
(slot of the object that it is pressed over, and the)4 W
10 /Courier AF
35573 XM
(:left)SH
11 /Times-Roman AF
38852 XM
(and)SH
10 /Courier AF
40719 XM
(:top)SH
11 /Times-Roman AF
43398 XM
(slots of the objects depend)3 W
8280 24886 MT
(on the)SH
10 /Courier AF
11274 XM
(:box)SH
11 /Times-Roman AF
13949 XM
(slot.)SH
8280 27184 MT
(It is worth noting once again)
40 W( that the)41 W
10 /Courier AF
25039 XM
(move-grow-interactor)SH
11 /Times-Roman AF
37355 XM
(does not set the)41 W
10 /Courier AF
44607 XM
(:left)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
48198 XM
(:top)SH
11 /Times-Roman AF
(, etc. slots)41 W
1406 50 39687 27384 UL
8280 28380 MT
(of the selected object.  It instead sets the)149 W
10 /Courier AF
27643 XM
(:box)SH
11 /Times-Roman AF
30467 XM
(slot of the selected object, and the user is required to)149 W
2400 50 27643 28580 UL
8280 29576 MT
(define formulas that depend on the)SH
10 /Courier AF
23858 XM
(:box)SH
11 /Times-Roman AF
26533 XM
(slot.)SH
14 /Times-Bold AF
8280 33394 MT
(5.5. A Feedback Object with the Move-Grow Interactor)SH
11 /Times-Roman AF
8280 34590 MT
(Now let's add a feedback object to the window that will work with the moving)
67 W( circles.  In this case, the)68 W
8280 35786 MT
(feedback object will appear whenever we click on and try to drag a circle.  The mouse)
49 W( will actually drag)48 W
8280 36982 MT
(the feedback object, and then the real circle will jump to the final position when the mouse is released.)SH
8280 39280 MT
(Our feedback object will be a circle with a dashed line.  The DASHED-CIRCLE object defined)
113 W( below)114 W
8280 40476 MT
(will have two slots set by the interactor.)
116 W( The)505 W
10 /Courier AF
29508 XM
(:box)SH
11 /Times-Roman AF
32298 XM
(slot will be set while the mouse is held down and)115 W
8280 41672 MT
(dragged, and the)59 W
10 /Courier AF
16032 XM
(:obj-over)SH
11 /Times-Roman AF
21767 XM
(slot will be set to point to the circle being dragged.  Given our MOVING-)60 W
8280 42868 MT
(CIRCLE prototype, the feedback object is easy to define.)SH
8 /Courier AF
10200 44033 MT
(\050create-instance 'DASHED-CIRCLE MOVING-CIRCLE)SH
/Times-Italic SF
11640 44898 MT
(; Inherit all the :left, :top, etc. formulas that depend on the :box slot.)SH
/Courier SF
11640 45763 MT
(\050:obj-over NIL\051)SH
/Times-Italic SF
19800 XM
(; Set by the interactor)SH
/Courier SF
11640 46628 MT
(\050:visible \050o-formula \050gvl :obj-over\051\051\051)SH
11640 47493 MT
(\050:line-style opal:dashed-line\051\051)SH
10200 49223 MT
(\050opal:add-components TOP-AGG DASHED-CIRCLE\051)SH
11 /Times-Roman AF
8280 51521 MT
(The)SH
10 /Courier AF
10314 XM
(:visible)SH
11 /Times-Roman AF
15438 XM
(slot is)
49 W( set with a formula because we only want the feedback object to be visible when it)48 W
8280 52717 MT
(is being used with the interactor.  Now, we)
164 W( will redefine the move-grow interactor to use DASHED-)165 W
8280 53913 MT
(CIRCLE as a)
43 W( feedback object.  \050Redefining the MG-INTER will destroy the old instance, so don't worry)42 W
8280 55109 MT
(if a warning appears.\051)SH
8 /Courier AF
10200 56274 MT
(\050create-instance 'MG-INTER inter:move-grow-interactor)SH
11640 57139 MT
(\050:window INTER-WIN\051)SH
11640 58004 MT
(\050:start-where \050list :element-of CIRCLE-AGG\051\051)SH
11640 58869 MT
(\050:feedback-obj DASHED-CIRCLE\051\051)SH
11 /Times-Roman AF
8280 61167 MT
(Now when you)
6 W( move the circles with the mouse, the feedback object will follow the mouse, instead of the)7 W
8280 62363 MT
(real circle following it directly.)SH
8280 64661 MT
(Since we have finished this section on interactors,)
94 W( destroy the window so that it does not interfere with)93 W
8280 65857 MT
(the next example.  Type the following line.)SH
8 /Courier AF
10200 67022 MT
(\050opal:destroy INTER-WIN\051)SH
ES
PStoPSsaved restore
%%Page: (24,25,26,27) 7
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 86)
SH( Garnet)
830 W( Tutorial)SH
41704 XM
(Programming Chapter)
1550 W( 6)SH
46800 50 6120 4486 UL
16 /Times-Bold AF
6120 8272 MT
(6. Programming)SH
14 SS 
6120 13146 MT
(6.1. Creating a Panel of Text Buttons)SH
11 /Times-Roman AF
6120 14342 MT
(In this section, we will go through a comprehensive example that pulls together all the)
25 W( concepts that have)26 W
6120 15538 MT
(been discussed in this)
5 W( tutorial.  The final objective will be the panel of text buttons in Figure 6-4.  We will)4 W
6120 16734 MT
(use an aggregadget to assemble a)
147 W( group of objects into a single button, then use an aggrelist to make)148 W
6120 17930 MT
(multiple copies of the text button and organize them into a list)
84 W( for the panel, and finally create a button)83 W
6120 19126 MT
(interactor to manage the panel.)SH
12 /Times-Bold AF
6120 22810 MT
(6.1.1. The Limitations of Aggregates)SH
11 /Times-Roman AF
6120 24006 MT
(Before starting)
91 W( the aggregadget for this example, let's take a look at the use of an aggregate.  This will)92 W
6120 25202 MT
(help to demonstrate the usefulness of aggregadgets.  First, create a window with a top-level)
12 W( aggregate and)11 W
6120 26398 MT
(update it:)SH
8 /Courier AF
8040 27563 MT
(\050create-instance 'BUTTON-WIN inter:interactor-window)SH
9480 28428 MT
(\050:left 800\051\050:top 10\051\050:width 200\051\050:height 400\051\051)SH
8040 29293 MT
(\050create-instance 'TOP-AGG opal:aggregate\051)SH
8040 30158 MT
(\050s-value BUTTON-WIN :aggregate TOP-AGG\051)SH
8040 31023 MT
(\050opal:update BUTTON-WIN\051)SH
11 /Times-Roman AF
6120 33321 MT
(The TOP-AGG aggregate is the top-level aggregate for the window.  If we want any object)
70 W( to appear in)71 W
6120 34517 MT
(the window, it will have to be)
174 W( added to TOP-AGG, or added to an aggregate further below in TOP-)173 W
6120 35713 MT
(AGG's aggregate hierarchy.  We will keep TOP-AGG as the top-level aggregate throughout this example,)5 W
6120 36909 MT
(but we will be changing its components continually.)SH
6120 39207 MT
(Now we can begin)
219 W( adding objects to TOP-AGG \050throughout this discussion you should periodically)218 W
6120 40403 MT
(check Figure 6-4 to see why we)
56 W( are creating particular objects\051.  Let's start by assembling a button.  We)57 W
6120 41599 MT
(will first create a couple of rectangles that)
39 W( have a fixed position so that we get the window in Figure 6-1.)38 W
6120 42795 MT
(Since we want the rectangles to have the same dimensions, we can make)
151 W( a prototype object and then)152 W
6120 43991 MT
(create two instances with appropriate position values.)SH
8 /Courier AF
8040 45156 MT
(\050create-instance 'PROTO-RECT opal:rectangle)SH
9480 46021 MT
(\050:width 100\051 \050:height 50\051\051)SH
8040 47751 MT
(\050create-instance 'R1 PROTO-RECT)SH
9480 48616 MT
(\050:left 40\051 \050:top 40\051)SH
9480 49481 MT
(\050:filling-style opal:black-fill\051\051)SH
8040 51211 MT
(\050create-instance 'R2 PROTO-RECT)SH
9960 52076 MT
(\050:left 20\051 \050:top 20\051)SH
9960 52941 MT
(\050:filling-style opal:gray-fill\051\051)SH
8040 54671 MT
(\050opal:add-components TOP-AGG R1 R2\051)SH
8040 55536 MT
(\050opal:update BUTTON-WIN\051)SH
46800 50 6120 57687 UL
11 SS 
75 100 0 6570 92309 GB 
%%BeginDocument: tutorial/two-rects.ps
%!PS-Adobe-2.0
%%Title: Opal 6
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 16, 1991, 4:09 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
134 -269 translate
gsave
0 648 200 110 ClipToRectangle
0 0 translate
gsave
60 608 100 50 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
40 628 100 50 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
grestore

grestore

0 648 200 110 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 206 341 406 451

%%EndDocument
 GE /Times-Bold SF
6120 68486 MT
(Figure 6-1:)SH
/Times-Roman SF
11893 XM
(The two rectangles R1 and R2, which are instances of PROTO-RECT.)SH
46800 50 6120 70438 UL
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 6.1)
SH( Creating)
1800 W( a Panel of Text Buttons)SH
51886 XM
(Page 87)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(Keeping in mind our goal of making a panel of text buttons, one problem should be immediately clear.)
8 W( In)290 W
8280 9151 MT
(order to make several buttons with this)
57 W( method, we will have to calculate the position of every rectangle)58 W
8280 10347 MT
(in the)
85 W( interface and explicitly create an object for it.  This will be time consuming, to say the least, and)84 W
8280 11543 MT
(motivates us)
101 W( to investigate how constraints will help avoid tedious calculations.  So, as the first step in)102 W
8280 12739 MT
(pursuing a more fruitful approach, let's remove the rectangles from the window and move)
310 W( on to)309 W
8280 13935 MT
(aggregadgets. To)
275 W( remove the rectangles, execute:)SH
8 /Courier AF
10200 15100 MT
(\050opal:remove-components TOP-AGG R1 R2\051)SH
10200 15965 MT
(\050opal:update BUTTON-WIN\051)SH
12 /Times-Bold AF
8280 19649 MT
(6.1.2. Using an Aggregadget for the Text Button)SH
11 /Times-Roman AF
8280 20845 MT
(When we create an aggregadget, we essentially create an aggregate and add the components)
66 W( \050along with)67 W
8280 22041 MT
(pointer slots\051 all at once.  Our task)
77 W( is to build an aggregadget with two rectangles as components which)76 W
8280 23237 MT
(will look like Figure 6-1.  Since we already know what we want the rectangles to look like in)
6 W( the window,)7 W
8280 24433 MT
(putting a simple)
506 W( aggregadget together using our previously defined R1 and R2 rectangles is)505 W
8280 25629 MT
(straightforward. However,)
313 W( the key to avoiding tedious calculations of the positions of our rectangles)
19 W( is to)20 W
8280 26825 MT
(generalize the code.  That is, we want the positions of our components to be)
14 W( formulas rather than absolute)13 W
8280 28021 MT
(numbers.)SH
8280 30319 MT
(For the present, let's assume that we will always be giving absolute numbers to our top-level)
21 W( aggregadget)22 W
8280 31515 MT
(\050but not)
230 W( its components\051.  The first problem we want to address is how to devise formulas for the)229 W
8280 32711 MT
(positions of the rectangles.  By referring back to Figure 6-1, we see that the)
180 W( entire aggregate has its)181 W
8280 33907 MT
(upper-left coordinate at one corner of the gray rectangle, and its lower-right)
113 W( coordinate on the shadow.)112 W
8280 35103 MT
(Therefore, it is a reasonable design decision to put the left and top of the gray rectangle at the)
101 W( left, top)102 W
8280 36299 MT
(corner of the aggregadget, and then put the shadow 20 pixels further below and to the right.)
238 W( The)749 W
8280 37495 MT
(following code shows the definition of our new BUTTON)
170 W( aggregadget with formulas defined for the)171 W
8280 38691 MT
(positions of the rectangle components.)SH
8 /Courier AF
10200 39856 MT
(\050create-instance 'BUTTON opal:aggregadget)SH
11640 40721 MT
(\050:left 20\051 \050:top 20\051)SH
11640 41586 MT
(\050:shadow-width 100\051 \050:shadow-height 50\051)SH
11640 42451 MT
(\050:parts)SH
12120 43316 MT
(`\050\050:shadow ,opal:rectangle)SH
17400 44181 MT
(\050:left ,\050o-formula \050+ 20 \050gvl :parent :left\051\051\051\051)SH
17400 45046 MT
(\050:top ,\050o-formula \050+ 20 \050gvl :parent :top\051\051\051\051)SH
17400 45911 MT
(\050:width ,\050o-formula \050gvl :parent :shadow-width\051\051\051)SH
17400 46776 MT
(\050:height ,\050o-formula \050gvl :parent :shadow-height\051\051\051)SH
17400 47641 MT
(\050:filling-style ,opal:black-fill\051\051)SH
13080 48506 MT
(\050:gray-rect ,opal:rectangle)SH
18840 49371 MT
(\050:left ,\050o-formula \050gvl :parent :left\051\051\051)SH
18840 50236 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
18840 51101 MT
(\050:width ,\050o-formula \050gvl :parent :shadow-width\051\051\051)SH
18840 51966 MT
(\050:height ,\050o-formula \050gvl :parent :shadow-height\051\051\051)SH
18840 52831 MT
(\050:filling-style ,opal:gray-fill\051\051\051\051\051)SH
10200 54561 MT
(\050opal:add-components TOP-AGG BUTTON\051)SH
10200 55426 MT
(\050opal:update BUTTON-WIN\051)SH
11 /Times-Roman AF
8280 57724 MT
(After studying the BUTTON schema for a moment, several)
69 W( features stand out.  First, there are two slots)68 W
8280 58920 MT
(called)SH
10 /Courier AF
11284 XM
(:shadow-width)SH
11 /Times-Roman AF
19462 XM
(and)SH
10 /Courier AF
21428 XM
(:shadow-height)SH
11 /Times-Roman AF
30206 XM
(defined in the top-level schema, which are used by)
103 W( the)104 W
8280 60116 MT
(width and height formulas of the component rectangles.  The presence of)
58 W( these slots at the top-level will)57 W
8280 61312 MT
(make it easier to change the appearance of)
15 W( the button in the future -- if we want to make it wider, we only)16 W
8280 62508 MT
(need to change one slot,)SH
10 /Courier AF
19154 XM
(:shadow-width)SH
11 /Times-Roman AF
(, instead of all the components')SH
10 /Courier AF
41037 XM
(:width)SH
11 /Times-Roman AF
44912 XM
(slots.)SH
8280 64806 MT
(Next, it should be clear that the formulas in the)73 W
10 /Courier AF
29997 XM
(:left)SH
11 /Times-Roman AF
33345 XM
(and)SH
10 /Courier AF
35281 XM
(:top)SH
11 /Times-Roman AF
38028 XM
(slots of the components will place the)72 W
8280 66002 MT
(rectangles at the appropriate positions relative)
139 W( to each other, with the shadow further down and to the)140 W
8280 67198 MT
(right. Finally,)
721 W( it is important that the shadow)
223 W( comes first in the order of defining the components.)222 W
8280 68394 MT
(Objects are drawn on the screen in the order that they are added to an aggregate,)
8 W( so we definitely want the)9 W
8280 69590 MT
(gray rectangle to come after the shadow.)SH
8280 71888 MT
(Notice that there is no "inheritance" going on in the BUTTON aggregadget.  When we want a)
23 W( component)22 W
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 88)
SH( Garnet)
830 W( Tutorial)SH
41704 XM
(Programming Chapter)
1550 W( 6)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(to get a value from its parent, we have to explicitly define a constraint that gets that value.)SH
6120 10253 MT
(We have just finished the first step in creating)
247 W( a text button.  Although there is more code in the)248 W
6120 11449 MT
(aggregadget example than in the)
107 W( previous example with rectangles R1 and R2, the aggregadget code is)106 W
6120 12645 MT
(simple and)
39 W( flexible.  Also, almost all of the formulas that you will write in the future will resemble those)40 W
6120 13841 MT
(in this example.  The only difference will be the names of the slots and)
55 W( the arithmetic that is appropriate)54 W
6120 15037 MT
(for the situation.)SH
6120 17335 MT
(Now we are ready to add more objects to the button.  To do this,)
100 W( we will not add objects to BUTTON)101 W
6120 18531 MT
(while it is)
62 W( in the window.  Instead, we will remove the old BUTTON aggregadget from the window and)61 W
6120 19727 MT
(write a new one from scratch.  Most of the code that we have already written will be)
5 W( reused, however, and)6 W
6120 20923 MT
(if you still have a copy of the previous example on your screen, you)
63 W( will be able to cut-and-paste it.  So)62 W
6120 22119 MT
(execute the command that will remove the button from the top-level aggregate:)SH
8 /Courier AF
8040 23284 MT
(\050opal:remove-components TOP-AGG BUTTON\051)SH
8040 24149 MT
(\050opal:update BUTTON-WIN\051)SH
12 /Times-Bold AF
6120 27833 MT
(6.1.3. Defining Parts Using Prototypes)SH
11 /Times-Roman AF
6120 29029 MT
(Before constructing an aggregadget with additional components, let's look at another)
235 W( way to define)236 W
6120 30225 MT
(components in aggregadgets.  This method will make it)
367 W( easier for us to develop the BUTTON)366 W
6120 31421 MT
(aggregadget by condensing some of the code and eliminating a lot of typing.)SH
6120 33719 MT
(In the previous example, the components were)
384 W( instances of rectangles.  Another way to define)385 W
6120 34915 MT
(components is to define them)
99 W( as prototypes separate from the aggregadget, and then create instances of)98 W
6120 36111 MT
(those prototypes in the aggregadget)65 W
10 /Courier AF
22360 XM
(:parts)SH
11 /Times-Roman AF
26300 XM
(slot. The)
405 W( following code comes from this alternate method)66 W
6120 37307 MT
(for defining aggregadgets.)SH
8 /Courier AF
8040 38472 MT
(\050create-instance 'SHADOW-PROTO opal:rectangle)SH
9480 39337 MT
(\050:left \050o-formula \050+ 20 \050gvl :parent :left\051\051\051\051)SH
9480 40202 MT
(\050:top \050o-formula \050+ 20 \050gvl :parent :top\051\051\051\051)SH
9480 41067 MT
(\050:width \050o-formula \050gvl :parent :shadow-width\051\051\051)SH
9480 41932 MT
(\050:height \050o-formula \050gvl :parent :shadow-height\051\051\051)SH
9480 42797 MT
(\050:filling-style opal:black-fill\051\051)SH
8040 44527 MT
(\050create-instance 'GRAY-PROTO opal:rectangle)SH
9480 45392 MT
(\050:left \050o-formula \050gvl :parent :left\051\051\051)SH
9480 46257 MT
(\050:top \050o-formula \050gvl :parent :top\051\051\051)SH
9480 47122 MT
(\050:width \050o-formula \050gvl :parent :shadow-width\051\051\051)SH
9480 47987 MT
(\050:height \050o-formula \050gvl :parent :shadow-height\051\051\051)SH
9480 48852 MT
(\050:filling-style opal:gray-fill\051\051)SH
8040 50582 MT
(\050create-instance 'BUTTON opal:aggregadget)SH
9480 51447 MT
(\050:left 20\051 \050:top 20\051)SH
9480 52312 MT
(\050:shadow-width 100\051 \050:shadow-height 50\051)SH
9480 53177 MT
(\050:string "Button"\051)SH
9480 54042 MT
(\050:parts)SH
9960 54907 MT
(`\050\050:shadow ,SHADOW-PROTO\051)SH
10920 55772 MT
(\050:gray-rect ,GRAY-PROTO\051\051\051\051)SH
8040 57502 MT
(\050opal:add-components TOP-AGG BUTTON\051)SH
8040 58367 MT
(\050opal:update BUTTON-WIN\051)SH
11 /Times-Roman AF
6120 60665 MT
(Notice that this way of looking at aggregadgets is)
223 W( entirely consistent with the previous aggregadget)222 W
6120 61861 MT
(definition. In)
339 W( the)32 W
10 /Courier AF
14161 XM
(:parts)SH
11 /Times-Roman AF
18068 XM
(slot of our)
32 W( new button, we have created instances just like before, but we have)33 W
6120 63057 MT
(not explicitly defined any slots in the components.  It does not matter whether we set)
246 W( slots in the)245 W
6120 64253 MT
(prototype objects or)
95 W( in the parts definitions.  Using this abbreviation method for defining aggregadgets,)96 W
6120 65449 MT
(we can now avoid retyping the slot definitions for the old)
41 W( components and move on to talking about new)40 W
6120 66645 MT
(ones.)SH
6120 68943 MT
(It should be noted that the SHADOW-PROTO and GRAY-PROTO rectangles)
181 W( can not be added to a)182 W
6120 70139 MT
(window by themselves.  If you were to try this, you would get an error when Garnet)
31 W( tried to evaluate any)30 W
6120 71335 MT
(of the formulas)
65 W( that we defined.  This is because there is no)66 W
10 /Courier AF
33428 XM
(:parent)SH
11 /Times-Roman AF
37969 XM
(for either the SHADOW-PROTO)66 W
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 6.1)
SH( Creating)
1800 W( a Panel of Text Buttons)SH
51886 XM
(Page 89)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(or the GRAY-PROTO, which is clearly needed)
62 W( by the formulas.  But when instances of these rectangles)61 W
8280 9151 MT
(are added to the BUTTON aggregadget, their)SH
10 /Courier AF
28498 XM
(:parent)SH
11 /Times-Roman AF
32973 XM
(slots are set to be the parent aggregadget.)SH
8280 11449 MT
(As usual, remember to remove the current BUTTON from the window using)SH
10 /Courier AF
42339 XM
(remove-components)SH
11 /Times-Roman AF
(.)SH
12 /Times-Bold AF
8280 15133 MT
(6.1.4. The Label of the Button)SH
11 /Times-Roman AF
8280 16329 MT
(Referring to Figure)
51 W( 6-4 again, we see that the text button needs a white rectangle to be centered over the)52 W
8280 17525 MT
(gray one, and text should)
1 W( be centered inside the white rectangle.  We will want the string of the text object)SH
8280 18721 MT
(to be a top level slot in the aggregadget so that we can change it easily.  Thus, we need to)
189 W( place a)190 W
8280 19917 MT
(constraint in the text object to retrieve it \050remember the text object does not "inherit" the string from its)79 W
8280 21113 MT
(parent just because it is a component\051.  Other than that,)
210 W( the addition of the new components to the)211 W
8280 22309 MT
(BUTTON aggregadget is straightforward.  Using the abbreviation method)
67 W( for defining aggregadgets, we)66 W
8280 23505 MT
(get the following code \050the components SHADOW-PROTO and GRAY-PROTO were defined above\051.)SH
8 /Courier AF
10200 24670 MT
(\050create-instance 'WHITE-PROTO opal:rectangle)SH
11640 25535 MT
(\050:left \050o-formula \050+ 7 \050gvl :parent :gray-rect :left\051\051\051\051)SH
11640 26400 MT
(\050:top \050o-formula \050+ 7 \050gvl :parent :gray-rect :top\051\051\051\051)SH
11640 27265 MT
(\050:width \050o-formula \050- \050gvl :parent :gray-rect :width\051 14\051\051\051)SH
11640 28130 MT
(\050:height \050o-formula \050- \050gvl :parent :gray-rect :height\051 14\051\051\051)SH
11640 28995 MT
(\050:filling-style opal:white-fill\051\051)SH
10200 30725 MT
(\050create-instance 'TEXT-PROTO opal:text)SH
11640 31590 MT
(\050:left \050o-formula \050+ \050gvl :parent :white-rect :left\051)SH
21720 32455 MT
(\050round \050- \050gvl :parent :white-rect :width\051)SH
26520 33320 MT
(\050gvl :width\051\051)SH
25080 34185 MT
(2\051\051\051\051)SH
11640 35050 MT
(\050:top \050o-formula \050+ \050gvl :parent :white-rect :top\051)SH
21240 35915 MT
(\050round \050- \050gvl :parent :white-rect :height\051)SH
26040 36780 MT
(\050gvl :height\051\051)SH
24600 37645 MT
(2\051\051\051\051)SH
11640 38510 MT
(\050:string \050o-formula \050gvl :parent :string\051\051\051\051)SH
10200 40240 MT
(\050create-instance 'BUTTON opal:aggregadget)SH
11640 41105 MT
(\050:left 20\051 \050:top 20\051)SH
11640 41970 MT
(\050:shadow-width 100\051 \050:shadow-height 50\051)SH
11640 42835 MT
(\050:string "Button"\051)SH
11640 43700 MT
(\050:parts)SH
12120 44565 MT
(`\050\050:shadow ,SHADOW-PROTO\051)SH
13080 45430 MT
(\050:gray-rect ,GRAY-PROTO\051)SH
13080 46295 MT
(\050:white-rect ,WHITE-PROTO\051)SH
13080 47160 MT
(\050:text ,TEXT-PROTO\051\051\051\051)SH
10200 48890 MT
(\050opal:add-components TOP-AGG BUTTON\051)SH
10200 49755 MT
(\050opal:update BUTTON-WIN\051)SH
11 /Times-Roman AF
8280 52053 MT
(Although the centering formulas for the)252 W
10 /Courier AF
27570 XM
(:left)SH
11 /Times-Roman AF
31097 XM
(and)SH
10 /Courier AF
33212 XM
(:top)SH
11 /Times-Roman AF
36139 XM
(slots of the text object are a little)
252 W( more)253 W
8280 53249 MT
(complicated, they are basic)
60 W( calculations that find the proper position of the text based on the dimensions)59 W
8280 54445 MT
(of the white rectangle.  Another aspect of the formulas is that they reference not only slots in the)
71 W( parent)72 W
8280 55641 MT
(object, but also)
91 W( slots in their sibling objects.  Specifically, in the)90 W
10 /Courier AF
37809 XM
(white-rect)SH
11 /Times-Roman AF
44174 XM
(part, the)90 W
10 /Courier AF
48233 XM
(:left)SH
11 /Times-Roman AF
51598 XM
(formula)SH
8280 56837 MT
(looks up the aggregate tree to the)57 W
10 /Courier AF
23554 XM
(:parent)SH
11 /Times-Roman AF
(, and then looks down again)
57 W( into the)58 W
10 /Courier AF
44436 XM
(gray-rect)SH
11 /Times-Roman AF
(. The)
391 W( same)58 W
8280 58033 MT
(tracing of the aggregate tree is involved in the)SH
10 /Courier AF
28775 XM
(text)SH
11 /Times-Roman AF
31450 XM
(formulas for)SH
10 /Courier AF
37192 XM
(:left)SH
11 /Times-Roman AF
40467 XM
(and)SH
10 /Courier AF
42330 XM
(:top)SH
11 /Times-Roman AF
(.)SH
12 /Times-Bold AF
8280 61717 MT
(6.1.5. Instances of the Button Aggregadget)SH
11 /Times-Roman AF
8280 62913 MT
(It should be clear by now that aggregadgets are)
385 W( particularly useful for organizing and defining)384 W
8280 64109 MT
(components. After)
425 W( creating)
75 W( the four prototype objects by themselves, we were able to define BUTTON)76 W
8280 65305 MT
(with the compact aggregadget above.  And with our current definition of BUTTON, we will now see)153 W
8280 66501 MT
(another significant)
111 W( use of aggregadgets.  The following code creates several instances of the BUTTON)112 W
8280 67697 MT
(aggregadget, which we can use as a prototype.  When you add these instances to the window, you see that)10 W
8280 68893 MT
(component rectangles and text are generated automatically for the instances.)SH
ES
PStoPSsaved restore
%%Page: (28,29,30,31) 8
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 90)
SH( Garnet)
830 W( Tutorial)SH
41704 XM
(Programming Chapter)
1550 W( 6)SH
46800 50 6120 4486 UL
8 /Courier AF
8040 7699 MT
(\050create-instance 'BUTTON-1 BUTTON)SH
9480 8564 MT
(\050:left 130\051 \050:top 80\051)SH
9480 9429 MT
(\050:shadow-width 60\051)SH
9480 10294 MT
(\050:string "abcd"\051\051)SH
8040 12024 MT
(\050create-instance 'BUTTON-2 BUTTON)SH
9480 12889 MT
(\050:left 10\051 \050:top 120\051)SH
9480 13754 MT
(\050:string "Button-2"\051\051)SH
8040 15484 MT
(\050opal:add-components TOP-AGG BUTTON-1 BUTTON-2\051)SH
8040 16349 MT
(\050opal:update BUTTON-WIN\051)SH
46800 50 6120 18500 UL
11 SS 
75 100 0 6532 56347 GB 
%%BeginDocument: tutorial/several-buttons.ps
%!PS-Adobe-2.0
%%Title: Opal 3
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 21, 1991, 2:13 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
126 -226 translate
gsave
0 648 217 195 ClipToRectangle
0 0 translate
gsave
40 608 100 50 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
20 628 100 50 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
27 621 86 36 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
49 599 42 0 0 0 0 false (Button) 12 /Courier DrawText
150 548 60 50 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
130 568 60 50 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
137 561 46 36 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
147 539 27 0 0 0 0 false (abcd) 12 /Courier DrawText
30 508 100 50 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
10 528 100 50 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
17 521 86 36 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
33 499 55 0 0 0 0 false (Button-2) 12 /Courier DrawText
grestore

grestore

0 648 217 195 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 198 299 415 494

%%EndDocument
 GE /Times-Bold SF
6120 35674 MT
(Figure 6-2:)SH
/Times-Roman SF
11893 XM
(The BUTTON object and two instances of it.)SH
46800 50 6120 37626 UL
6120 39724 MT
(This feature of)
49 W( aggregadgets means that you do not need to manually create objects individually and add)50 W
6120 40920 MT
(them to the window.  Instead, you can create a group of objects, and then create instances of the group.)SH
6120 43218 MT
(Before moving to the next section, remember to remove your)
52 W( three button objects from the window with)51 W
10 /Courier AF
6120 44414 MT
(remove-components)SH
11 /Times-Roman AF
(.)SH
12 /Times-Bold AF
6120 48098 MT
(6.1.6. Making an Aggrelist of Text Buttons)SH
11 /Times-Roman AF
6120 49294 MT
(Even though instances of the aggregadget will automatically generate components,)
400 W( the instances)401 W
6120 50490 MT
(BUTTON-1 and BUTTON-2 show that we still need to)
79 W( manually supply coordinates to the aggregadget)78 W
6120 51686 MT
(in order to position it.  When we create the finished text button panel in Figure 6-4,)
125 W( we don't want to)126 W
6120 52882 MT
(calculate the position of each text button in the window.)
100 W( \050Notice)
473 W( that this is similar to the problem we)99 W
6120 54078 MT
(faced several sections ago -- that we didn't want to compute the position of each rectangle within a text)75 W
6120 55274 MT
(button.\051 The)
437 W( solution to this problem \050as before\051 is to)
81 W( use a special type of aggregate that will generate)80 W
6120 56470 MT
(components for us.  This time, we will use an aggrelist.)SH
6120 58768 MT
(Just for a)
4 W( start, let's create a simple itemized aggrelist.  We will supply an item-prototype and a number to)5 W
6120 59964 MT
(the aggrelist,)
87 W( and it will generate that number of instances of the item-prototype.  Specifically, we want)86 W
6120 61160 MT
(the aggrelist to make five copies of the BUTTON aggregadget.  So, let's try the following code.)SH
8 /Courier AF
8040 62325 MT
(\050create-instance 'PANEL opal:aggrelist)SH
9480 63190 MT
(\050:left 30\051 \050:top 10\051)SH
9480 64055 MT
(\050:items 5\051)SH
9480 64920 MT
(\050:item-prototype BUTTON\051\051)SH
8040 66650 MT
(\050opal:add-components TOP-AGG PANEL\051)SH
8040 67515 MT
(\050opal:update BUTTON-WIN\051)SH
11 /Times-Roman AF
6120 69813 MT
(By supplying the number)
168 W( 5 in the)167 W
10 /Courier AF
22295 XM
(:items)SH
11 /Times-Roman AF
26337 XM
(slot, we tell the aggrelist to make five copies of its item-)167 W
6120 71009 MT
(prototype. And,)
370 W( because this is an aggrelist, all the copies of the prototype are automatically appropriate)48 W
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 6.1)
SH( Creating)
1800 W( a Panel of Text Buttons)SH
51886 XM
(Page 91)SH
46800 50 8280 4486 UL
11 SS 
75 100 0 8692 51675 GB 
%%BeginDocument: tutorial/five-buttons.ps
%!PS-Adobe-2.0
%%Title: Opal 1
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 22, 1991, 1:56 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
142 -127 translate
gsave
0 648 185 394 ClipToRectangle
0 0 translate
gsave
50 618 100 50 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
30 638 100 50 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
37 631 86 36 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
59 609 42 0 0 0 0 false (Button) 12 /Courier DrawText
50 543 100 50 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
30 563 100 50 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
37 556 86 36 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
59 534 42 0 0 0 0 false (Button) 12 /Courier DrawText
50 468 100 50 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
30 488 100 50 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
37 481 86 36 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
59 459 42 0 0 0 0 false (Button) 12 /Courier DrawText
50 393 100 50 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
30 413 100 50 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
37 406 86 36 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
59 384 42 0 0 0 0 false (Button) 12 /Courier DrawText
50 318 100 50 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
30 338 100 50 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
37 331 86 36 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
59 309 42 0 0 0 0 false (Button) 12 /Courier DrawText
grestore

grestore

0 648 185 394 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 214 199 399 593

%%EndDocument
 GE /Times-Bold SF
8280 38502 MT
(Figure 6-3:)SH
/Times-Roman SF
14053 XM
(An aggrelist with an)550 W
10 /Courier AF
25479 XM
(:items)SH
11 /Times-Roman AF
29904 XM
(value of 5)
550 W( and the BUTTON aggregadget as its)551 W
10 /Courier AF
14053 39698 MT
(:item-prototype)SH
11 /Times-Roman AF
(.)SH
46800 50 8280 41650 UL
10 /Courier AF
8280 43401 MT
(:left)SH
11 /Times-Roman AF
11603 XM
(and)SH
10 /Courier AF
13514 XM
(:top)SH
11 /Times-Roman AF
16237 XM
(coordinates. It)
371 W( turns out that we)
48 W( only had to give the position of the left and top of the)47 W
8280 44597 MT
(aggrelist; all the calculations for the buttons were handled internally.  There are many customizable)
49 W( slots)50 W
8280 45793 MT
(for aggrelists that change the appearance)
75 W( of the aggrelist -- like whether to make the panel horizontal or)74 W
8280 46989 MT
(vertical, how much space)
176 W( to put between the items, etc.  A list of these slots is in the Aggregadgets)177 W
8280 48185 MT
(manual, which you can try out later.)SH
8280 50483 MT
(The next step in the development of our panel is)
37 W( to give each button an appropriate label.  To do this, we)36 W
8280 51679 MT
(need to supply a list of labels to the aggrelist.)
58 W( The)
392 W( proper place to do this is in the)59 W
10 /Courier AF
45775 XM
(:items)SH
11 /Times-Roman AF
49709 XM
(slot. As)
393 W( we)59 W
8280 52875 MT
(just saw, if you give)
75 W( the)74 W
10 /Courier AF
19513 XM
(:items)SH
11 /Times-Roman AF
23462 XM
(slot a number, the aggrelist generates that number of items.  If instead)74 W
8280 54071 MT
(you give it a list, then it)
52 W( will generate the same number of components as there are items in the list.  We)53 W
8280 55267 MT
(will also have to change the BUTTON prototype so that its)140 W
10 /Courier AF
36063 XM
(:string)SH
11 /Times-Roman AF
40678 XM
(slot pays attention to the list of)139 W
8280 56463 MT
(items we supply.  The following code makes this change)
82 W( to the BUTTON prototype in the definition of)83 W
8280 57659 MT
(the aggrelist, so we don't have to redefine the BUTTON aggregadget.)SH
8 /Courier AF
10200 58824 MT
(\050create-instance 'PANEL opal:aggrelist)SH
11640 59689 MT
(\050:left 30\051 \050:top 10\051)SH
11640 60554 MT
(\050:items '\050"Mozart" "Chopin" "Strauss" "Beethoven" "Vivaldi"\051\051)SH
11640 61419 MT
(\050:item-prototype)SH
12120 62284 MT
(`\050,BUTTON)SH
13080 63149 MT
(\050:string ,\050o-formula \050nth \050gvl :rank\051 \050gvl :parent :items\051\051\051\051\051\051\051)SH
10200 64879 MT
(\050opal:add-components TOP-AGG PANEL\051)SH
10200 65744 MT
(\050opal:update BUTTON-WIN\051)SH
11 /Times-Roman AF
8280 68042 MT
(The)SH
10 /Courier AF
10394 XM
(:rank)SH
11 /Times-Roman AF
13798 XM
(slot in the)129 W
10 /Courier AF
18800 XM
(:string)SH
11 /Times-Roman AF
23404 XM
(formula above is put)
129 W( into each component generated by the aggrelist.)128 W
8280 69238 MT
(Even though there is no)358 W
10 /Courier AF
20793 XM
(:rank)SH
11 /Times-Roman AF
24426 XM
(in our definition of BUTTON, when the aggrelist generates its)358 W
8280 70434 MT
(components, it ranks the)
20 W( objects in the order that they are created and stores these ranks in the)19 W
10 /Courier AF
50196 XM
(:rank)SH
11 /Times-Roman AF
53490 XM
(slot)SH
8280 71630 MT
(\050ranks start at 0\051.  This makes it)
221 W( easy to find the item in the)222 W
10 /Courier AF
37815 XM
(:items)SH
11 /Times-Roman AF
41912 XM
(list that corresponds to each)222 W
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 92)
SH( Garnet)
830 W( Tutorial)SH
41704 XM
(Programming Chapter)
1550 W( 6)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(component.)SH
6120 10253 MT
(Since we are going to be redefining objects again, remember)
186 W( to remove the PANEL object from the)185 W
6120 11449 MT
(window before going on.)SH
12 /Times-Bold AF
6120 15133 MT
(6.1.7. Adding an Interactor)SH
11 /Times-Roman AF
6120 16329 MT
(We are almost finished with the text button panel.  At this point, the panel)
62 W( that we have written is still a)63 W
6120 17525 MT
(passive graphical object -- if you press on it with the mouse, it acts just like a)
41 W( pile of rectangles and does)40 W
6120 18721 MT
(nothing at all.  Therefore, the next step is to add an interactor)
6 W( that will cause the appearance of the buttons)7 W
6120 19917 MT
(to change whenever we click the mouse on it.  Suppose we choose to use a)9 W
10 /Courier AF
39405 XM
(button-interactor)SH
11 /Times-Roman AF
49889 XM
(for our)8 W
6120 21113 MT
(interface between the mouse and the)
32 W( panel.  By applying the principles discussed in the interactor section)33 W
6120 22309 MT
(of this tutorial, we can write the following code for our interactor.)SH
8 /Courier AF
8040 23474 MT
(\050create-instance 'PRESS-PROTO inter:button-interactor)SH
9480 24339 MT
(\050:window \050o-formula \050gvl :operates-on :window\051\051\051)SH
9480 25204 MT
(\050:start-where \050o-formula \050list :element-of \050gvl :operates-on\051\051\051\051)SH
9480 26069 MT
(\050:start-event :leftdown\051\051)SH
11 /Times-Roman AF
6120 28367 MT
(The code for this interactor)
129 W( is short and simple.  It is a prototype object just like the rectangles, but it)128 W
6120 29563 MT
(happens to be an interactor.  The)42 W
10 /Courier AF
21074 XM
(:operates-on)SH
11 /Times-Roman AF
28591 XM
(reference in the formulas is analogous to the)42 W
10 /Courier AF
48720 XM
(:parent)SH
11 /Times-Roman AF
6120 30759 MT
(slot in objects, and the slot)
80 W( is automatically created when the interactor is attached to an aggregadget or)79 W
6120 31955 MT
(aggrelist. In)
369 W( interactors, the)47 W
10 /Courier AF
18970 XM
(:operates-on)SH
11 /Times-Roman AF
26492 XM
(slot points to the aggregadget that it is attached to, just)
47 W( like)48 W
6120 33151 MT
(the)SH
10 /Courier AF
7740 XM
(:parent)SH
11 /Times-Roman AF
12216 XM
(slot of a graphical object points to its aggregate.  Notice that we have supplied values for)
1 W( the)SH
6120 34347 MT
(two required slots in an interactor.  The)87 W
10 /Courier AF
24441 XM
(:window)SH
11 /Times-Roman AF
29003 XM
(slot points to)
87 W( the window of the aggregadget that the)88 W
6120 35543 MT
(interactor will be attached to, which is reasonable since we want the)
202 W( interactor to work in the same)201 W
6120 36739 MT
(window that the graphics appear in.  The value)
151 W( in the)152 W
10 /Courier AF
31426 XM
(:start-where)SH
11 /Times-Roman AF
39053 XM
(slot tells the interactor to start)152 W
6120 37935 MT
(whenever the mouse is clicked over any component of the aggrelist \050that is, over any button\051.)SH
6120 40233 MT
(Before we attach this interactor to)
56 W( the PANEL aggregadget, we are going to have to change a few of the)55 W
6120 41429 MT
(formulas in the button and its components.  The question to ask is --)
137 W( how should the graphics change)138 W
6120 42625 MT
(when we)
78 W( press the mouse over the button?  By looking at the full text-buttons picture in Figure 6-4, we)77 W
6120 43821 MT
(see that the gray rectangle should move down and to the right, settling over the shadow.  Therefore,)
80 W( we)81 W
6120 45017 MT
(will have to change the formulas for the)160 W
10 /Courier AF
25238 XM
(:left)SH
11 /Times-Roman AF
28673 XM
(and)SH
10 /Courier AF
30696 XM
(:top)SH
11 /Times-Roman AF
33531 XM
(of the gray rectangle.  We do not have to)159 W
6120 46213 MT
(change the)87 W
10 /Courier AF
11302 XM
(:left)SH
11 /Times-Roman AF
14664 XM
(and)SH
10 /Courier AF
16614 XM
(:top)SH
11 /Times-Roman AF
19376 XM
(slots of the white rectangle or text because they)
87 W( are already constrained to)88 W
6120 47409 MT
(the gray rectangle's position.)SH
6120 49707 MT
(As you recall from)
402 W( the "Interactors" section of this tutorial, the)401 W
10 /Courier AF
38374 XM
(button-interactor)SH
11 /Times-Roman AF
49250 XM
(sets the)401 W
10 /Courier AF
6120 50903 MT
(:selected)SH
11 /Times-Roman AF
11956 XM
(slot of the object it operates on when it is clicked on)
161 W( with the mouse.  Additionally, the)162 W
6120 52099 MT
(interactor will also set the)77 W
10 /Courier AF
18144 XM
(:interim-selected)SH
11 /Times-Roman AF
28696 XM
(slot of the object while the mouse is being held down)76 W
6120 53295 MT
(over it.  With)
229 W( this in mind, it would be useful to make the gray rectangle formulas depend on the)230 W
10 /Courier AF
6120 54491 MT
(:interim-selected)SH
11 /Times-Roman AF
16826 XM
(slot of the aggregadget, since the gray rectangle should settle over the)
231 W( black)230 W
6120 55687 MT
(rectangle when the mouse is held)
46 W( down over the button.  A new GRAY-PROTO object that will respond)47 W
6120 56883 MT
(to the interactor follows.)SH
8 /Courier AF
8040 58048 MT
(\050create-instance 'GRAY-PROTO opal:rectangle)SH
9480 58913 MT
(\050:left \050o-formula \050if \050gvl :parent :interim-selected\051)SH
20040 59778 MT
(\050gvl :parent :shadow :left\051)SH
20040 60643 MT
(\050gvl :parent :left\051\051\051\051)SH
9480 61508 MT
(\050:top \050o-formula \050if \050gvl :parent :interim-selected\051)SH
19560 62373 MT
(\050gvl :parent :shadow :top\051)SH
19560 63238 MT
(\050gvl :parent :top\051\051\051\051)SH
9480 64103 MT
(\050:width \050o-formula \050gvl :parent :shadow-width\051\051\051)SH
9480 64968 MT
(\050:height \050o-formula \050gvl :parent :shadow-height\051\051\051)SH
9480 65833 MT
(\050:filling-style opal:gray-fill\051\051)SH
11 /Times-Roman AF
6120 68131 MT
(The new formulas)
592 W( in the)591 W
10 /Courier AF
20104 XM
(:left)SH
11 /Times-Roman AF
23970 XM
(and)SH
10 /Courier AF
26424 XM
(:top)SH
11 /Times-Roman AF
29690 XM
(of the new GRAY-PROTO now look at the)591 W
10 /Courier AF
6120 69327 MT
(:interim-selected)SH
11 /Times-Roman AF
16882 XM
(slot of the button.  When the mouse is clicked over a button,)
287 W( the button's)288 W
10 /Courier AF
6120 70523 MT
(:interim-selected)SH
11 /Times-Roman AF
16602 XM
(slot will be set to T, causing the gray rectangle to be moved down and to)
7 W( the right.)6 W
6120 71719 MT
(When the mouse is released,)
244 W( the)245 W
10 /Courier AF
22033 XM
(:interim-selected)SH
11 /Times-Roman AF
32753 XM
(slot will be set back to NIL, and the gray)245 W
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 6.2)
SH( Referencing)
1800 W( Objects in Functions)SH
51886 XM
(Page 93)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(rectangle will return to its normal position.)SH
8280 10253 MT
(If you refer back)
104 W( to the definitions of the other components, you will see why the gray rectangle is the)103 W
8280 11449 MT
(only component that we had to change.  The white rectangle depended on the)
230 W( position of the gray)231 W
8280 12645 MT
(rectangle, and the text was centered inside the white one.  Thus,)
205 W( when the gray rectangle's position)204 W
8280 13841 MT
(changed, the change was propagated to all of the dependent)
63 W( formulas, resulting in uniform movement of)64 W
8280 15037 MT
(the components.)SH
8280 17335 MT
(There is one final note to make before we can complete the panel.  When the gray rectangle)
110 W( is pushed)109 W
8280 18531 MT
(down onto the shadow,)
235 W( the dimensions of the button are going to change.  That is, when the gray)236 W
8280 19727 MT
(rectangle covers the shadow completely, then the button's aggregate has smaller dimensions)
103 W( than if the)102 W
8280 20923 MT
(two rectangles are spread out a bit.  If left unchecked, this will)
110 W( cause unexpected behavior because the)111 W
8280 22119 MT
(aggrelist keeps the)
127 W( components arranged according to their width and height.  For this reason, we will)126 W
8280 23315 MT
(have to supply our own)44 W
10 /Courier AF
19101 XM
(:width)SH
11 /Times-Roman AF
23020 XM
(and)SH
10 /Courier AF
24927 XM
(:height)SH
11 /Times-Roman AF
29446 XM
(values to the BUTTON aggregadget within our)
44 W( definition)45 W
8280 24511 MT
(of the PANEL.  To see the problem for yourself, you may want)
90 W( to leave out the)89 W
10 /Courier AF
44964 XM
(:width)SH
11 /Times-Roman AF
48928 XM
(and)SH
10 /Courier AF
50880 XM
(:height)SH
11 /Times-Roman AF
8280 25707 MT
(values in the following code just to see what happens.  Then you will certainly want to try the code)
29 W( again)30 W
8280 26903 MT
(with the values in place.)SH
8 /Courier AF
10200 28068 MT
(\050create-instance 'BUTTON opal:aggregadget)SH
11640 28933 MT
(\050:left 20\051 \050:top 20\051)SH
11640 29798 MT
(\050:width 120\051 \050:height 70\051)SH
/Times-Italic SF
24600 XM
(; The dimensions of the two rectangles plus their offset)SH
/Courier SF
11640 30663 MT
(\050:shadow-width 100\051 \050:shadow-height 50\051)SH
11640 31528 MT
(\050:string "Button"\051)SH
11640 32393 MT
(\050:parts)SH
12120 33258 MT
(`\050\050:shadow ,SHADOW-PROTO\051)SH
13080 34123 MT
(\050:gray-rect ,GRAY-PROTO\051)SH
13080 34988 MT
(\050:white-rect ,WHITE-PROTO\051)SH
13080 35853 MT
(\050:text ,TEXT-PROTO\051\051\051\051)SH
10200 37583 MT
(\050create-instance 'PANEL opal:aggrelist)SH
11640 38448 MT
(\050:left 30\051 \050:top 10\051)SH
11640 39313 MT
(\050:items '\050"Mozart" "Chopin" "Strauss" "Beethoven" "Vivaldi"\051\051)SH
11640 40178 MT
(\050:item-prototype)SH
12120 41043 MT
(`\050,BUTTON)SH
13080 41908 MT
(\050:string ,\050o-formula \050nth \050gvl :rank\051 \050gvl :parent :items\051\051\051\051\051\051)SH
11640 42773 MT
(\050:interactors)SH
12120 43638 MT
(`\050\050:press ,PRESS-PROTO\051\051\051\051)SH
10200 45368 MT
(\050opal:add-components TOP-AGG PANEL\051)SH
10200 46233 MT
(\050opal:update BUTTON-WIN\051)SH
/Times-Italic SF
10200 47963 MT
(; Required if you are not using CMU, Allegro, Lucid, LispWorks, or MCL)SH
/Courier SF
10200 48828 MT
(\050inter:main-event-loop\051)SH
/Times-Italic SF
22200 XM
(; To start the interactors.)SH
22200 49693 MT
(; Hit F1 in the Garnet window to exit.)SH
11 /Times-Roman AF
8280 51991 MT
(Once you have entered the)96 W
10 /Courier AF
20761 XM
(main-event-loop)SH
11 /Times-Roman AF
30132 XM
(\050not necessary in CMUCL, Allegro, Lucid, LispWorks,)95 W
8280 53187 MT
(or MCL\051, you can click on any of the buttons and they)
133 W( will respond.  The movement comes from the)134 W
8280 54383 MT
(interactor setting the)33 W
10 /Courier AF
17696 XM
(:interim-selected)SH
11 /Times-Roman AF
28204 XM
(slot of the button that you press on, which causes the)32 W
10 /Courier AF
52080 XM
(:left)SH
11 /Times-Roman AF
8280 55579 MT
(and)SH
10 /Courier AF
10161 XM
(:top)SH
11 /Times-Roman AF
12854 XM
(slots of the components to be re-evaluated.  When you let go, the)19 W
10 /Courier AF
41968 XM
(:interim-selected)SH
11 /Times-Roman AF
52462 XM
(slot is)19 W
8280 56775 MT
(cleared, and the components return to their original position.)SH
8280 59073 MT
(Remember to destroy the window when you are finished with this example.)SH
8 /Courier AF
10200 60238 MT
(\050opal:destroy BUTTON-WIN\051)SH
14 /Times-Bold AF
8280 64056 MT
(6.2. Referencing Objects in Functions)SH
11 /Times-Roman AF
8280 65252 MT
(If a function that returns an object is only going to be called once, then it)
206 W( is usually appropriate to)205 W
8280 66448 MT
(explicitly name the objects in each)426 W
10 /Courier AF
26354 XM
(create-instance)SH
11 /Times-Roman AF
36055 XM
(call. This)
1127 W( is the)
426 W( method used in the)427 W
8280 67644 MT
(demonstration functions that accompany the gadgets.  However, if a function is called)
162 W( repeatedly and)161 W
8280 68840 MT
(returns objects which will be used at the same time, then unnamed objects should probably be used.)SH
8280 71138 MT
(For example, the function below will create and return windows with messages in them.)
10 W( If)
296 W( the window in)11 W
ES
PStoPSsaved restore
%%Page: (32,33,34,35) 9
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 94)
SH( Garnet)
830 W( Tutorial)SH
41704 XM
(Programming Chapter)
1550 W( 6)SH
46800 50 6120 4486 UL
11 SS 
75 100 0 6570 51900 GB 
%%BeginDocument: tutorial/text-buttons.ps
%!PS-Adobe-2.0
%%Title: Opal 5
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 22, 1991, 3:28 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/BitmapDict 4 dict def
/DrawBitmap
   {    % stack: left top width height pattern
        BitmapDict begin
        /picstr 256 string def
        /pattern exch def  /height exch def  /width exch def
        gsave
          translate
          width height scale
          width height 1
          [ width 0 0 height 0 height ]
          {pattern} image
        grestore
        end
   } def

/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def

/image-2
<ffff ff3f ff3f fe7f ee7f e4ff e0ff e01f e03f e07f e0ff e1ff e3ff e7ff efff
ffff>
def

/image-1
<ff3f fe1f fe1f cc3f c43f c07f c00f c00f c01f c03f c07f c0ff c1ff c3ff c7ff
cfff>
def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
134 -124 translate
gsave
0 648 200 400 ClipToRectangle
0 0 translate
gsave
50 618 100 50 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
30 638 100 50 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
37 631 86 36 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
59 609 42 0 0 0 0 false (Mozart) 12 /Courier DrawText
50 543 100 50 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
50 543 100 50 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
57 536 86 36 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
79 514 41 0 0 0 0 false (Chopin) 12 /Courier DrawText
50 468 100 50 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
30 488 100 50 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
37 481 86 36 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
57 459 47 0 0 0 0 false (Strauss) 12 /Courier DrawText
50 393 100 50 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
30 413 100 50 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
37 406 86 36 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
49 384 63 0 0 0 0 false (Beethoven) 12 /Courier DrawText
50 318 100 50 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
30 338 100 50 0 0 0 0 false 0 0 [] 1 0.5 0 0 0 false DrawRectangle
37 331 86 36 0 0 0 0 false 0 0 [] 1 1.0 0 0 0 false DrawRectangle
56 309 48 0 0 0 0 false (Vivaldi) 12 /Courier DrawText
125 521 16 16 image-1 DrawBitmap
125 521 16 16 image-2 DrawBitmap
grestore

grestore

0 648 200 400 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 206 196 406 596

%%EndDocument
 GE /Times-Bold SF
6120 38952 MT
(Figure 6-4:)SH
/Times-Roman SF
11893 XM
(The finished text button panel.)SH
46800 50 6120 40904 UL
6120 42655 MT
(the function)
45 W( was explicitly named \050say 'WIN or something\051, then each call to the function would destroy)44 W
6120 43851 MT
(the previous window instance while creating the new one.)SH
8 /Courier AF
8040 45016 MT
(\050defun Make-Win \050left top string\051)SH
/Times-Italic SF
9000 45881 MT
(; Create unnamed objects and assign them to local variables)SH
/Courier SF
9000 46746 MT
(\050let \050\050win \050create-instance NIL inter:interactor-window)SH
15720 47611 MT
(\050:left left\051 \050:top top\051)SH
15720 48476 MT
(\050:width 100\051 \050:height 100\051\051\051)SH
11880 49341 MT
(\050agg \050create-instance NIL opal:aggregate\051\051)SH
11880 50206 MT
(\050message \050create-instance NIL opal:text)SH
17640 51071 MT
(\050:left 20\051 \050:top 40\051)SH
17640 51936 MT
(\050:string string\051\051\051\051)SH
/Times-Italic SF
9960 52801 MT
(; Manipulate the objects according to their local names)SH
/Courier SF
9960 53666 MT
(\050s-value win :aggregate agg\051)SH
9960 54531 MT
(\050opal:add-component agg message\051)SH
9960 55396 MT
(\050opal:update win\051)SH
9960 56261 MT
(win\051\051)SH
/Times-Italic SF
13320 XM
(; Return the internal name of the new window)SH
/Courier SF
8040 57991 MT
(\050setf Win-List \050list \050Make-Win 100 100 "Hello"\051)SH
18120 58856 MT
(\050Make-Win 190 120 "Window 2"\051)SH
18120 59721 MT
(\050Make-Win 70 190 "Third Win"\051\051\051)SH
11 /Times-Roman AF
6120 62019 MT
(Each time)8 W
10 /Courier AF
10840 XM
(Make-Win)SH
11 /Times-Roman AF
15923 XM
(is called, a window is created, an aggregate is attached, and a text)
8 W( object is added to)9 W
6120 63215 MT
(the aggregate.  We kept a list of)
19 W( the internal names of the windows in)18 W
10 /Courier AF
37187 XM
(Win-List)SH
11 /Times-Roman AF
42280 XM
(because we will want to)18 W
6120 64411 MT
(destroy them later.  Each of the windows in the list can be)
23 W( manipulated as usual \050using)24 W
10 /Courier AF
44824 XM
(s-value)SH
11 /Times-Roman AF
(, etc.\051 by)24 W
6120 65607 MT
(referring to their generated names.)SH
6120 67905 MT
(To clean up the windows generated from)51 W
10 /Courier AF
24772 XM
(Make-Win)SH
11 /Times-Roman AF
(, you could use)50 W
10 /Courier AF
36707 XM
(dolist)SH
11 /Times-Roman AF
40632 XM
(to destroy the whole list, or)50 W
6120 69101 MT
(manually destroy the windows individually while referring to their generated names.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 6.2)
SH( Referencing)
1800 W( Objects in Functions)SH
51886 XM
(Page 95)SH
46800 50 8280 4486 UL
11 SS 
75 100 0 8730 44475 GB 
%%BeginDocument: tutorial/unnamed-windows.ps
%!PS-Adobe-2.0
%%Title: Opal 31
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 28, 1991, 4:36 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%BeginSetup
%%EndSetup
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
118 -223 translate
gsave
0 648 232 202 ClipToRectangle
0 0 translate
gsave
0 648 232 202 0 0 0 0 false 0 0 [] -1 0.0 0 0 0 false DrawRectangle
grestore

gsave

%
% Begin new window
%
35 -5 translate
gsave
0 648 100 100 ClipToRectangle
0 0 translate
gsave
30 597 34 0 0 0 0 false (Hello) 12 /Courier DrawText
grestore

grestore

0 648 100 100 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

gsave

%
% Begin new window
%
125 -25 translate
gsave
0 648 100 100 ClipToRectangle
0 0 translate
gsave
20 597 55 0 0 0 0 false (Window 2) 12 /Courier DrawText
grestore

grestore

0 648 100 100 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

gsave

%
% Begin new window
%
5 -95 translate
gsave
0 648 100 100 ClipToRectangle
0 0 translate
gsave
20 597 63 0 0 0 0 false (Third Win) 12 /Courier DrawText
grestore

grestore

0 648 100 100 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

0 648 232 202 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 190 295 422 497

%%EndDocument
 GE /Times-Bold SF
8280 24102 MT
(Figure 6-5:)SH
/Times-Roman SF
14053 XM
(Three windows created with the function)SH
10 /Courier AF
32379 XM
(Make-Win)SH
11 /Times-Roman AF
(.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 96)
SH( Garnet)
830 W( Tutorial)SH
39927 XM
(Hints and Caveats)
SH( Chapter)
1550 W( 7)SH
46800 50 6120 4486 UL
16 /Times-Bold AF
6120 8272 MT
(7. Hints and Caveats)SH
11 /Times-Roman AF
6120 10524 MT
(There is a small manual devoted to optimizations that can be added to your Garnet)
88 W( programs that make)89 W
6120 11720 MT
(them smaller and faster.  This section lists a few suggestions that are sometimes required by)
193 W( Garnet)192 W
3664 50 44229 11920 UL
6120 12916 MT
(programs, in addition to helping your programs be more efficient.)SH
14 /Times-Bold AF
6120 16734 MT
(7.1. Dimensions of Aggregates)SH
12 SS 
6120 20418 MT
(7.1.1. Supply Your Own Formulas to Improve Performance)SH
11 /Times-Roman AF
6120 21614 MT
(Although it is usually not necessary to specify the)380 W
10 /Courier AF
31751 XM
(:width)SH
11 /Times-Roman AF
36006 XM
(and)SH
10 /Courier AF
38249 XM
(:height)SH
11 /Times-Roman AF
43105 XM
(of an aggregate, the)381 W
6120 22810 MT
(programmer can almost always define formulas that will be more efficient than the default formulas)
84 W( for)83 W
6120 24006 MT
(computing the bounding box.  The default formulas look at all the components of)
185 W( the aggregate and)186 W
6120 25202 MT
(compute the)
73 W( appropriate bounding box, but they are completely generic and make no assumptions about)72 W
6120 26398 MT
(the arrangement of the components.  Since you will know where the components will)
189 W( appear on the)190 W
6120 27594 MT
(screen, you can usually supply simple formulas that depend on only a few of the components.)SH
6120 29892 MT
(For example, if)
40 W( you created an aggregadget out of nested rectangles, where there was one outer rectangle)39 W
6120 31088 MT
(and several others inside of it, then you would want to define dimension formulas for the aggregate that)72 W
6120 32284 MT
(depend only on the outer)
150 W( rectangle and ignore the inner ones.  Otherwise, the default formulas would)149 W
6120 33480 MT
(check every rectangle before deciding on the correct width and height of the aggregate.)SH
12 /Times-Bold AF
6120 37164 MT
(7.1.2. Ignore Feedback Objects in Dimension Formulas)SH
11 /Times-Roman AF
6120 38360 MT
(A good reason to define)
48 W( your own formulas for the)49 W
10 /Courier AF
29270 XM
(:width)SH
11 /Times-Roman AF
33194 XM
(and)SH
10 /Courier AF
35106 XM
(:height)SH
11 /Times-Roman AF
39630 XM
(slots of aggregates is that you)49 W
6120 39556 MT
(usually don't want the feedback object to be considered in the bounding box calculation.)SH
12 /Times-Bold AF
6120 43240 MT
(7.1.3. Include All Components in the Aggregate's Bounding Box)SH
11 /Times-Roman AF
6120 44436 MT
(Components of aggregates should always)
100 W( be inside the bounding boxes of the aggregates.  That is, you)99 W
6120 45632 MT
(should not make the)22 W
10 /Courier AF
15374 XM
(:left)SH
11 /Times-Roman AF
18671 XM
(of an aggregate be 40, and then the left of a component be \050-)
22 W( 40 offset\051.  This)23 W
6120 46828 MT
(will put)
46 W( the component outside of the bounding box of the aggregate \050too far to the left\051, and Garnet will)45 W
6120 48024 MT
(not be able to update the aggregate properly.)SH
6120 50322 MT
(The solution here is to make the left of the aggregate be the same as the leftmost component, and)
103 W( then)104 W
6120 51518 MT
(make the component inherit that left.)
28 W( Of)
330 W( course, if you have several components which all have different)27 W
6120 52714 MT
(lefts, then you will have to add offsets to the lefts of the other components.)SH
14 /Times-Bold AF
6120 56532 MT
(7.2. Dimensions of Windows)SH
11 /Times-Roman AF
6120 57728 MT
(Don't make the size)
160 W( of windows depend on the size of the objects inside.  This will lead to frequent)161 W
6120 58924 MT
(refreshing of the entire window, causing very poor performance.)SH
14 /Times-Bold AF
6120 62742 MT
(7.3. Formulas)SH
12 SS 
6120 66426 MT
(7.3.1. The Difference Between formula and o-formula)SH
11 /Times-Roman AF
6120 67622 MT
(The difference between)292 W
10 /Courier AF
17651 XM
(formula)SH
11 /Times-Roman AF
22418 XM
(and)SH
10 /Courier AF
24573 XM
(o-formula)SH
11 /Times-Roman AF
30540 XM
(is somewhat)
292 W( confusing.  The preferred form is)291 W
10 /Courier AF
6120 68818 MT
(\050o-formula \050expression\051\051)83 W
11 /Times-Roman AF
20961 XM
(because the)
83 W( expression will be compiled when the the file is compiled.)84 W
6120 70014 MT
(Then, at run-time, the expression for the constraint executes as compiled code when)
35 W( the formula needs to)34 W
6120 71210 MT
(be re-evaluated.  \050This works by expanding)
52 W( the code in-line to create a lambda expression, for which the)53 W
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 7.3)
SH( Formulas)1800 W
51886 XM
(Page 97)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(compiler generates code.\051)
232 W( When)
738 W( the)231 W
10 /Courier AF
26068 XM
(\050formula '\050expression\051\051)231 W
11 /Times-Roman AF
40605 XM
(form is used, the expression is)231 W
8280 9151 MT
(interpreted at run-time, so the constraint executes much slower.)SH
8280 11449 MT
(The disadvantage of)24 W
10 /Courier AF
17545 XM
(o-formula)SH
11 /Times-Roman AF
(, however, is that because it is a macro, variable references)
24 W( do not create)25 W
8280 12645 MT
(lexical closures.  This means that variables referenced inside an)113 W
10 /Courier AF
37661 XM
(o-formula)SH
11 /Times-Roman AF
43449 XM
(will not)
113 W( be expanded into)112 W
8280 13841 MT
(their actual value inside the expression.  The variable name will instead remain inside the)
23 W( expression, and)24 W
8280 15037 MT
(if its value ever changes, the new value will be reflected when the expression is reevaluated.)SH
8280 17335 MT
(On the other hand, using the form)250 W
10 /Courier AF
25182 XM
(\050formula `\050 ... ,*variable* ...\051\051)250 W
11 /Times-Roman AF
47032 XM
(puts the value of)249 W
10 /Courier AF
8280 18531 MT
(*variable*)SH
11 /Times-Roman AF
14555 XM
(permanently in the formula,)
SH( and eliminates the reference to)1 W
10 /Courier AF
40889 XM
(*variable*)SH
11 /Times-Roman AF
(. If)
277 W( all your object)1 W
8280 19727 MT
(references use)75 W
10 /Courier AF
14962 XM
(\050gvl ...\051)75 W
11 /Times-Roman AF
20787 XM
(to get values out of slots of)
75 W( the object \050"paths" in aggregadgets\051, then this is)74 W
8280 20923 MT
(not relevant, and you should use)SH
10 /Courier AF
22791 XM
(o-formula)SH
11 /Times-Roman AF
(.)SH
8280 23221 MT
(As an example, let's)
17 W( start with a global variable and two formulas that use the variable.  One formula will)18 W
8280 24417 MT
(be an)132 W
10 /Courier AF
11170 XM
(o-formula)SH
11 /Times-Roman AF
(, and one will be a plain)132 W
10 /Courier AF
28308 XM
(formula)SH
11 /Times-Roman AF
(. Note:)539 W
10 /Courier AF
36448 XM
(lisp>)SH
11 /Times-Roman AF
39854 XM
(represents the prompt for the lisp)131 W
8280 25613 MT
(listener.)SH
8 /Times-Bold AF
10200 26815 MT
(lisp>)SH
/Courier SF
12336 XM
(\050setf *width* 100\051)SH
10200 27680 MT
(100)SH
/Times-Bold SF
10200 28545 MT
(lisp>)SH
/Courier SF
12336 XM
(\050create-schema 'A)SH
14520 29410 MT
(\050:left 10\051)SH
14520 30275 MT
(\050:right1 \050o-formula \050+ \050gvl :left\051 *width*\051\051\051)SH
14520 31140 MT
(\050:right2 \050formula `\050+ \050gvl :left\051 ,*width*\051\051\051\051)SH
10200 32005 MT
(Object A)SH
10200 33735 MT
(#k<A>)SH
/Times-Bold SF
10200 34600 MT
(lisp>)SH
/Courier SF
12336 XM
(\050gv A :right1\051)SH
10200 35465 MT
(110)SH
/Times-Bold SF
10200 36330 MT
(lisp>)SH
/Courier SF
12336 XM
(\050gv A :right2\051)SH
10200 37195 MT
(110)SH
/Times-Bold SF
10200 38060 MT
(lisp>)SH
11 /Times-Roman AF
8280 40358 MT
(So in both cases the formula computed the sum of the left and)
28 W( the current value of)29 W
10 /Courier AF
45142 XM
(*width*)SH
11 /Times-Roman AF
(. Now,)
333 W( what)29 W
8280 41554 MT
(happens if we change)61 W
10 /Courier AF
18296 XM
(*width*)SH
11 /Times-Roman AF
(? At)
397 W( first,)
61 W( it seems that nothing happens.  Just changing the value of the)60 W
8280 42750 MT
(variable will not cause)
106 W( the formulas to recompute -- only things that are)107 W
10 /Courier AF
41467 XM
(gv)SH
11 /Times-Roman AF
('ed have dependencies, and)107 W
8280 43946 MT
(Garnet doesn't know that the variable's value has changed yet.)SH
8 /Times-Bold AF
10200 45148 MT
(lisp>)SH
/Courier SF
12336 XM
(\050setf *width* 22\051)SH
10200 46013 MT
(22)SH
/Times-Bold SF
10200 46878 MT
(lisp>)SH
/Courier SF
12336 XM
(\050gv A :right1\051)SH
10200 47743 MT
(110)SH
/Times-Bold SF
10200 48608 MT
(lisp>)SH
/Courier SF
12336 XM
(\050gv A :right2\051)SH
10200 49473 MT
(110)SH
/Times-Bold SF
10200 50338 MT
(lisp>)SH
11 /Times-Roman AF
8280 52636 MT
(But now let's change the value)
144 W( of the)143 W
10 /Courier AF
26107 XM
(:left)SH
11 /Times-Roman AF
29525 XM
(slot, which will invalidate both formulas and will cause)143 W
8280 53832 MT
(them to recompute.)SH
8 /Times-Bold AF
10200 55034 MT
(lisp>)SH
/Courier SF
12336 XM
(\050s-value A :left 33\051)SH
10200 55899 MT
(33)SH
/Times-Bold SF
10200 56764 MT
(lisp>)SH
/Courier SF
12336 XM
(\050gv A :right1\051)SH
10200 57629 MT
(55)SH
/Times-Bold SF
10200 58494 MT
(lisp>)SH
/Courier SF
12336 XM
(\050gv A :right2\051)SH
10200 59359 MT
(133)SH
/Times-Bold SF
10200 60224 MT
(lisp>)SH
11 /Times-Roman AF
8280 62522 MT
(Now they recomputed, and the difference is obvious.  In)
12 W( the)13 W
10 /Courier AF
35079 XM
(o-formula)SH
11 /Times-Roman AF
(, the)13 W
10 /Courier AF
42674 XM
(*width*)SH
11 /Times-Roman AF
47162 XM
(variable reference)13 W
8280 63718 MT
(was still hanging around, and that expression used)
321 W( the current value of)320 W
10 /Courier AF
43376 XM
(*width*)SH
11 /Times-Roman AF
(. A)915 W
10 /Courier AF
50430 XM
(ps)SH
11 /Times-Roman AF
52225 XM
(of the)320 W
10 /Courier AF
8280 64914 MT
(o-formula)SH
11 /Times-Roman AF
13955 XM
(shows it's still there:)SH
ES
PStoPSsaved restore
%%Page: (36,37,38,39) 10
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 98)
SH( Garnet)
830 W( Tutorial)SH
39927 XM
(Hints and Caveats)
SH( Chapter)
1550 W( 7)SH
46800 50 6120 4486 UL
8 /Times-Bold AF
8040 7736 MT
(lisp>)SH
/Courier SF
10176 XM
(\050ps \050get-value A :right1\051\051)SH
8040 8601 MT
({#k<F74>)SH
9000 9466 MT
(lambda: \050+)
3360 W( \050gvl :left\051 *width*\051)SH
9000 10331 MT
(cached value:  \05055 . T\051)SH
9000 11196 MT
(on schema #k<A>, slot :RIGHT1)SH
9000 12061 MT
(})SH
8040 13791 MT
(NIL)SH
/Times-Bold SF
8040 14656 MT
(lisp>)SH
11 /Times-Roman AF
6120 16954 MT
(On the other hand, the plain formula got rid of the)SH
10 /Courier AF
28420 XM
(*width*)SH
11 /Times-Roman AF
32895 XM
(variable when the "," dereferenced it.)SH
8 /Times-Bold AF
8040 18156 MT
(lisp>)SH
/Courier SF
10176 XM
(\050ps \050get-value A :right2\051\051)SH
8040 19021 MT
({#k<F73>)SH
9000 19886 MT
(lambda: \050+)
3360 W( \050gvl :left\051 100\051)SH
9000 20751 MT
(cached value:  \050133 . T\051)SH
9000 21616 MT
(on schema #k<A>, slot :RIGHT2)SH
9000 22481 MT
(})SH
8040 24211 MT
(NIL)SH
/Times-Bold SF
8040 25076 MT
(lisp>)SH
11 /Times-Roman AF
6120 27374 MT
(Notice the 100 replaced)SH
10 /Courier AF
16870 XM
(*width*)SH
11 /Times-Roman AF
21345 XM
(in the definition of the formula.)SH
6120 29672 MT
(One occasion where)
217 W( this distinction between)218 W
10 /Courier AF
27342 XM
(formula)SH
11 /Times-Roman AF
32035 XM
(and)SH
10 /Courier AF
34116 XM
(o-formula)SH
11 /Times-Roman AF
40009 XM
(comes up is the creation of)218 W
6120 30868 MT
(objects while iterating)
187 W( over a list.  The following code correctly dereferences the variable)186 W
10 /Courier AF
48277 XM
(obj)SH
11 /Times-Roman AF
50538 XM
(when)SH
6120 32064 MT
(constructing formulas.)SH
8 /Courier AF
8040 33229 MT
(\050dolist \050obj objlist\051)SH
9000 34094 MT
(\050create-instance NIL opal:rectangle)SH
10440 34959 MT
(\050:left \050formula `\050gv ,obj :left\051\051\051)SH
9000 35824 MT
(\051\051)SH
12 /Times-Bold AF
6120 39508 MT
(7.3.2. Avoid Real Number Divide)SH
11 /Times-Roman AF
6120 40704 MT
(In all graphical objects, the position and dimension slots)103 W
10 /Courier AF
32101 XM
(:left)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
35755 XM
(:top)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
38809 XM
(:width)SH
11 /Times-Roman AF
(, and)104 W
10 /Courier AF
45030 XM
(:height)SH
11 /Times-Roman AF
49609 XM
(all take)104 W
6120 41900 MT
(integer values.)
36 W( Therefore,)
346 W( the integer divide functions)35 W
10 /Courier AF
30592 XM
(round)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
34177 XM
(floor)SH
11 /Times-Roman AF
(, and)35 W
10 /Courier AF
39660 XM
(ceiling)SH
11 /Times-Roman AF
(, etc. should be used)35 W
6120 43096 MT
(more frequently than)SH
10 /Courier AF
15619 XM
(/)SH
11 /Times-Roman AF
16494 XM
(for division.)SH
14 /Times-Bold AF
6120 46914 MT
(7.4. Feedback Objects)SH
11 /Times-Roman AF
6120 48110 MT
(If all)
188 W( of the components of an aggregate are selectable, then any feedback object should be put in a)189 W
6120 49306 MT
(separate aggregate so that the feedback object itself is not selectable.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 8.4)
SH( Ident)1800 W
51886 XM
(Page 99)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(8. Debugging)SH
11 /Times-Roman AF
8280 10524 MT
(The Debugging Tools Reference Manual)
14 W( documents many functions that are useful in answering the most)13 W
8280 11720 MT
(common questions that)
215 W( users have when developing Garnet code.  The functions will help you find)216 W
8280 12916 MT
(objects, explain the values of particular slots, describe inheritance and aggregate hierarchies,)
62 W( and inspect)61 W
8280 14112 MT
(constraints and interactors.  This section describes the most commonly used)
197 W( functions for examining)198 W
8280 15308 MT
(Garnet objects.)SH
14 /Times-Bold AF
8280 19126 MT
(8.1. The Inspector)SH
11 /Times-Roman AF
8280 20322 MT
(There is a)
53 W( powerful debugging tool called the)52 W
10 /Courier AF
28980 XM
(Inspector)SH
11 /Times-Roman AF
34707 XM
(which allows you to examine and change slot)52 W
8280 21518 MT
(values of your objects without typing into the lisp listener.  This)
28 W( tool can be invoked by hitting the HELP)29 W
8280 22714 MT
(key while the mouse is positioned above the object to be examined.)SH
8280 25012 MT
(You can easily try)
106 W( this tool if you have any Garnet window with objects in it.  Sections 2.2-2.4 of this)105 W
8280 26208 MT
(tutorial provide a simple example window with step-by-step interaction with the Inspector.)SH
14 /Times-Bold AF
8280 30026 MT
(8.2. PS)SH
8 /Courier AF
10200 31239 MT
(kr:PS)SH
/Times-Italic SF
13080 XM
(object)SH
11 /Times-Roman AF
8280 33537 MT
(The function)86 W
10 /Courier AF
14378 XM
(ps)SH
11 /Times-Roman AF
15939 XM
(\050which stands for "print schema"\051 is used to examine)
86 W( individual schemas.  When)87 W
10 /Courier AF
52784 XM
(ps)SH
11 /Times-Roman AF
54346 XM
(is)SH
8280 34733 MT
(called with a Garnet object, a list of all the object's)
47 W( slots and values will be printed.  By default, any slot)46 W
8280 35929 MT
(whose value is inherited from a prototype is not printed unless)SH
10 /Courier AF
35989 XM
(gv)SH
11 /Times-Roman AF
37464 XM
(has already been called on that slot.)SH
8280 38227 MT
(The)SH
10 /Courier AF
10280 XM
(ps)SH
11 /Times-Roman AF
11771 XM
(function resides in the KR package, and is fully documented in the KR manual.  There are several)16 W
8280 39423 MT
(switches and global variables that control the amount of information that)SH
10 /Courier AF
40571 XM
(ps)SH
11 /Times-Roman AF
42046 XM
(prints.)SH
14 /Times-Bold AF
8280 43241 MT
(8.3. Flash)SH
8 /Courier AF
10200 44454 MT
(garnet-debug:Flash)SH
/Times-Italic SF
19320 XM
(object)SH
/Courier SF
21754 XM
(&optional)SH
/Times-Italic SF
26554 XM
(n)SH
11 /Times-Roman AF
8280 46752 MT
(The function)149 W
10 /Courier AF
14504 XM
(flash)SH
11 /Times-Roman AF
17928 XM
(helps you to visually locate)149 W
/Times-Italic SF
30986 XM
(object)SH
/Times-Roman SF
34098 XM
(in a window by flashing the bounding box of)148 W
/Times-Italic SF
8280 47948 MT
(object)SH
/Times-Roman SF
11329 XM
(from black to white)86 W
/Times-Italic SF
20593 XM
(n)SH
/Times-Roman SF
21504 XM
(times. The)447 W
/Times-Italic SF
26956 XM
(object)SH
/Times-Roman SF
30005 XM
(must already be in a)
86 W( window in order for it to flash.  If)87 W
10 /Courier AF
8280 49144 MT
(flash)SH
11 /Times-Roman AF
11648 XM
(is unable to flash the object, then the function will try to give you)
93 W( some explanation of why the)92 W
8280 50340 MT
(object will not flash.)SH
14 /Times-Bold AF
8280 54158 MT
(8.4. Ident)SH
8 /Courier AF
10200 55323 MT
(garnet-debug:Ident)SH
11 /Times-Roman AF
8280 57621 MT
(The function)47 W
10 /Courier AF
14300 XM
(ident)SH
11 /Times-Roman AF
17622 XM
(takes no parameters.  After you call)47 W
10 /Courier AF
33893 XM
(ident)SH
11 /Times-Roman AF
(, Garnet waits for the next input)
47 W( event in)48 W
8280 58817 MT
(any Garnet)
24 W( window, like clicking the mouse.  If you click over an object, then the name of the object will)23 W
8280 60013 MT
(be printed along with some other information about the object and the window.)SH
8280 62311 MT
(Clearly, this)
74 W( function is useful if there are many objects in a window and you forget the names of all of)75 W
8280 63507 MT
(them. A)
297 W( more interesting application is)
11 W( when there are unnamed objects in the window \050that is, they were)10 W
8280 64703 MT
(given NIL for a name in their schema definition)
149 W( and now have only internal names\051 and you want to)150 W
8280 65899 MT
(analyze or manipulate)
207 W( an unnamed object.  Then,)206 W
10 /Courier AF
31860 XM
(ident)SH
11 /Times-Roman AF
35341 XM
(will return the internal name of the object)206 W
8280 67095 MT
(clicked on, and that name can be used in)SH
10 /Courier AF
26362 XM
(gv)SH
11 /Times-Roman AF
27837 XM
(or)SH
10 /Courier AF
29028 XM
(s-value)SH
11 /Times-Roman AF
33503 XM
(calls as usual.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 100)
SH( Garnet)
830 W( Tutorial)SH
42760 XM
(Debugging Chapter)
1550 W( 8)SH
46800 50 6120 4486 UL
14 /Times-Bold AF
6120 8138 MT
(8.5. Trace-Inter)SH
8 /Courier AF
8040 9351 MT
(inter:Trace-Inter &optional)SH
/Times-Italic SF
21480 XM
(interactor)SH
/Courier SF
47152 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
8040 10216 MT
(inter:Untrace-Inter)SH
47152 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
11 /Times-Roman AF
6120 12514 MT
(The function)82 W
10 /Courier AF
12210 XM
(trace-inter)SH
11 /Times-Roman AF
19167 XM
(is often used to find)
82 W( out why an interactor is not working as you expected.)83 W
6120 13710 MT
(Interactor problems most often arise from improper definitions of either)
19 W( the interactors or the objects they)18 W
6120 14906 MT
(work on.  Using)SH
10 /Courier AF
13483 XM
(trace-inter)SH
11 /Times-Roman AF
20358 XM
(can help to narrow the reasons for the unexpected behavior.)SH
6120 17204 MT
(Executing)SH
10 /Courier AF
10855 XM
(untrace-inter)SH
11 /Times-Roman AF
18930 XM
(will turn off the tracing for interactors.)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Garnet Tutorial)SH
47914 XM
(Table of Contents)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
25591 8272 MT
(Table of Contents)SH
12 SS 
8280 9796 MT
(1. Setting Up)SH
53880 XM
(63)SH
10 SS 
9780 11186 MT
(1.1. Take the Tour)SH
54080 XM
(63)SH
9780 12266 MT
(1.2. Load Garnet)SH
54080 XM
(63)SH
12 SS 
8280 13790 MT
(2. The Prototype-Instance System)SH
53880 XM
(64)SH
10 SS 
9780 15180 MT
(2.1. Inheritance)SH
54080 XM
(64)SH
9780 16260 MT
(2.2. Prototypes)SH
54080 XM
(65)SH
9780 17340 MT
(2.3. Default Values)SH
54080 XM
(67)SH
9780 18420 MT
(2.4. The Inspector)SH
54080 XM
(67)SH
9780 19500 MT
(2.5. Parameters)SH
54080 XM
(68)SH
9780 20580 MT
(2.6. Destroying Objects)SH
54080 XM
(69)SH
9780 21660 MT
(2.7. Unnamed Objects)SH
54080 XM
(69)SH
12 SS 
8280 23184 MT
(3. An Overview of the Objects)SH
53880 XM
(71)SH
10 SS 
9780 24574 MT
(3.1. Lines, Rectangles, and Circles)SH
54080 XM
(71)SH
9780 25654 MT
(3.2. Aggregates)SH
54080 XM
(71)SH
9780 26734 MT
(3.3. Aggregadgets, Aggrelists, and Aggregraphs)SH
54080 XM
(72)SH
11780 27814 MT
(3.3.1. Aggregadgets)SH
54080 XM
(73)SH
11780 28894 MT
(3.3.2. Aggrelists)SH
54080 XM
(73)SH
9780 29974 MT
(3.4. Windows)SH
54080 XM
(74)SH
9780 31054 MT
(3.5. Gadgets)SH
54080 XM
(74)SH
12 SS 
8280 32578 MT
(4. Constraints)SH
53880 XM
(75)SH
10 SS 
9780 33968 MT
(4.1. Formulas)SH
54080 XM
(75)SH
9780 35048 MT
(4.2. Cached Values)SH
54080 XM
(76)SH
9780 36128 MT
(4.3. Formulas and s-value)SH
54080 XM
(77)SH
9780 37208 MT
(4.4. Using the :obj-over Slot)SH
54080 XM
(77)SH
9780 38288 MT
(4.5. Constraints in Aggregadgets)SH
54080 XM
(78)SH
12 SS 
8280 39812 MT
(5. Interactors)SH
53880 XM
(81)SH
10 SS 
9780 41202 MT
(5.1. Kinds of Interactors)SH
54080 XM
(81)SH
9780 42282 MT
(5.2. The Button Interactor)SH
54080 XM
(82)SH
9780 43362 MT
(5.3. A Feedback Object with the Button Interactor)SH
54080 XM
(83)SH
9780 44442 MT
(5.4. The Move-Grow Interactor)SH
54080 XM
(84)SH
9780 45522 MT
(5.5. A Feedback Object with the Move-Grow Interactor)SH
54080 XM
(85)SH
12 SS 
8280 47046 MT
(6. Programming)SH
53880 XM
(86)SH
10 SS 
9780 48436 MT
(6.1. Creating a Panel of Text Buttons)SH
54080 XM
(86)SH
11780 49516 MT
(6.1.1. The Limitations of Aggregates)SH
54080 XM
(86)SH
11780 50596 MT
(6.1.2. Using an Aggregadget for the Text Button)SH
54080 XM
(87)SH
11780 51676 MT
(6.1.3. Defining Parts Using Prototypes)SH
54080 XM
(88)SH
11780 52756 MT
(6.1.4. The Label of the Button)SH
54080 XM
(89)SH
11780 53836 MT
(6.1.5. Instances of the Button Aggregadget)SH
54080 XM
(89)SH
11780 54916 MT
(6.1.6. Making an Aggrelist of Text Buttons)SH
54080 XM
(90)SH
11780 55996 MT
(6.1.7. Adding an Interactor)SH
54080 XM
(92)SH
9780 57076 MT
(6.2. Referencing Objects in Functions)SH
54080 XM
(93)SH
12 SS 
8280 58600 MT
(7. Hints and Caveats)SH
53880 XM
(96)SH
10 SS 
9780 59990 MT
(7.1. Dimensions of Aggregates)SH
54080 XM
(96)SH
11780 61070 MT
(7.1.1. Supply Your Own Formulas to Improve Performance)SH
54080 XM
(96)SH
11780 62150 MT
(7.1.2. Ignore Feedback Objects in Dimension Formulas)SH
54080 XM
(96)SH
11780 63230 MT
(7.1.3. Include All Components in the Aggregate's Bounding Box)SH
54080 XM
(96)SH
9780 64310 MT
(7.2. Dimensions of Windows)SH
54080 XM
(96)SH
9780 65390 MT
(7.3. Formulas)SH
54080 XM
(96)SH
11780 66470 MT
(7.3.1. The Difference Between formula and o-formula)SH
54080 XM
(96)SH
11780 67550 MT
(7.3.2. Avoid Real Number Divide)SH
54080 XM
(98)SH
ES
PStoPSsaved restore
%%Page: (40,41,42,43) 11
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
BS
0 SI
10 /Times-Bold AF
7620 7870 MT
(7.4. Feedback Objects)SH
51920 XM
(98)SH
12 SS 
6120 9394 MT
(8. Debugging)SH
51720 XM
(99)SH
10 SS 
7620 10784 MT
(8.1. The Inspector)SH
51920 XM
(99)SH
7620 11864 MT
(8.2. PS)SH
51920 XM
(99)SH
7620 12944 MT
(8.3. Flash)SH
51920 XM
(99)SH
7620 14024 MT
(8.4. Ident)SH
51920 XM
(99)SH
7620 15104 MT
(8.5. Trace-Inter)SH
51420 XM
(100)SH
ES
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 396.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
showpage
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
0.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
/showpage{}def/copypage{}def/erasepage{}def
PStoPSxform concat
showpage
PStoPSsaved restore
userdict/PStoPSsaved save put
PStoPSmatrix setmatrix
306.000000 0.000000 translate
0.500000 dup scale
userdict/PStoPSmatrix matrix currentmatrix put
userdict/PStoPSclip{0 0 moveto
 612.000000 0 rlineto 0 792.000000 rlineto -612.000000 0 rlineto
 closepath}put initclip
gsave clippath 0 setgray 1.000000 setlinewidth stroke grestore
PStoPSxform concat
showpage
PStoPSsaved restore
%%Trailer
%%Pages: 41
%%DocumentFonts: Times-Roman Times-Bold Symbol Courier Times-Italic
