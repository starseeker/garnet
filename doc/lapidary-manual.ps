%!PS-Adobe-2.0
%%Title: lapidary/lapidary-manual.mss
%%DocumentFonts: (atend)
%%Creator: Andrew Mickish and Scribe 7(1700)
%%CreationDate: 12 December 1994 15:23
%%Pages: (atend)
%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq 
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath translate
    100.0 -100.0 scale pop /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
    div dup scale 100.0 -100.0 scale
    /showpage {} def
    /letter {} def
    /lettersmall {} def
    /note {} def
    } bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
   {dup FontMapDict exch known{FontMapDict exch get} if
   original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
/RC {100.0 -100.0 scale
612.0 0.0 translate
-90.0 rotate
.01 -.01 scale} bind def
/URC {100.0 -100.0 scale
90.0 rotate
-612.0 0.0 translate
.01 -.01 scale} bind def
/RCC {100.0 -100.0 scale
0.0 -792.0 translate 90.0 rotate
.01 -.01 scale} bind def
/URCC {100.0 -100.0 scale
-90.0 rotate 0.0 792.0 translate
.01 -.01 scale} bind def
%%EndProlog
%%Page: 0 1
BS
0 SI
11 SS 
1 1 0 8280 7200 GB 
%%BeginDocument: single-sided.ps
%!PS-Adobe-2.0
%
%  This PostScript code turns off double-sided printing,
%  which is desirable since we want to be able to move the
%  Tables of Contents by hand after the manuals are printed.
%
statusdict begin
   false setduplexmode
end

%%EndDocument
 GE 16 /Times-Bold AF
21992 18976 MT
(Lapidary Reference Manual)SH
11 SS 
25995 21368 MT
(Brad T. Vander Zanden)SH
29158 22564 MT
(David Bolt)SH
/Times-Roman SF
28183 24490 MT
(December 1994)SH
/Times-Bold SF
29634 44214 MT
(Abstract)SH
/Times-Roman SF
8280 45966 MT
(This document describes the features and operations provided by)
81 W( Lapidary, a graphical interface builder)80 W
8280 47262 MT
(that allows a user to pictorially specify all graphical aspects of an)
157 W( application and interactively create)158 W
8280 48558 MT
(much of the behavior. Lapidary allows a)
268 W( user to draw most of Opal's objects, combine them into)267 W
8280 49854 MT
(aggregadgets, align them using iconic constraint menus or custom constraints, and create behaviors)
134 W( by)135 W
8280 51150 MT
(entering appropriate parameters in dialog boxes representing each)
401 W( of Garnet's interactors, or by)400 W
8280 52446 MT
(demonstrating the appropriate behavior for feedback objects.)SH
21010 56724 MT
(Copyright)SH
/Symbol SF
25747 XM
(\323)SH
/Times-Roman SF
26891 XM
(1994 - Carnegie Mellon University)SH
8280 63507 MT
(This research was sponsored by NCCOSC under Contract No.  N66001-94-C-6037, Arpa Order)
207 W( No.)208 W
8280 64803 MT
(B326. The)
381 W( views and conclusions contained in this document)
53 W( are those of the authors and should not be)52 W
8280 66099 MT
(interpreted as representing the official policies, either expressed or implied, of NCCOSC or)
192 W( the U.S.)193 W
8280 67395 MT
(Government.)SH
ES
%%Page: 539 2
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.1)
SH( Object)
1800 W( Creation)SH
51386 XM
(Page 539)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(1. Getting Started)SH
11 /Times-Roman AF
8280 10524 MT
(To load Lapidary, type)93 W
/Courier SF
19007 XM
(\050load garnet-lapidary-loader)93 W
/Times-Roman SF
(\051 after Garnet has been loaded, or type)92 W
/Courier SF
8280 11720 MT
(\050defvar load-lapidary-p t)322 W
/Times-Roman SF
(\051 before Garnet is loaded, and Garnet will)
322 W( automatically load)323 W
8280 12916 MT
(Lapidary when the Garnet loader file is invoked.  To start Lapidary, type)98 W
/Courier SF
41839 XM
(\050lapidary:do-go)SH
/Times-Roman SF
(\051. This)469 W
8280 14112 MT
(will cause Lapidary to come up in its initial state with the following windows:)SH
/Symbol SF
10249 15690 MT
(\267)SH
/Times-Roman SF
11030 XM
(editor-menu: This menu contains a set of functions that)
81 W( deal with aggregadgets, constraints,)82 W
11030 16886 MT
(saving and restoring objects, deleting objects, and setting properties of objects.)SH
/Symbol SF
10249 18780 MT
(\267)SH
/Times-Roman SF
11030 XM
(shapes menu: This menu allows the designer to create opal graphical objects and windows.)SH
/Symbol SF
10249 20674 MT
(\267)SH
/Times-Roman SF
11030 XM
(box-constraint menu: This menu allows the)
139 W( designer to attach constraints to an object that)138 W
11030 21870 MT
(control its left, top, width, and height.)SH
/Symbol SF
10249 23764 MT
(\267)SH
/Times-Roman SF
11030 XM
(drawing window: This window allows the designer to create)
4 W( new objects or load objects from)5 W
11030 24960 MT
(existing files.)SH
14 /Times-Bold AF
8280 28778 MT
(1.1. Object Creation)SH
11 /Times-Roman AF
8280 29974 MT
(Lapidary allows new objects to be created from scratch,)
36 W( loaded from pre-defined gadgets files, or created)35 W
8280 31170 MT
(directly in Garnet and)
234 W( then linked to a Lapidary window.  The shapes menu displays the primitive)235 W
8280 32366 MT
(graphical objects that can be created in Lapidary.)SH
5 10 0 16380 67262 GB 
%%BeginDocument: lapidary/shapes.PS
%!PS-Adobe-2.0
%%Title: shapes
%%Creator: Make-PS-File -- Garnet Version 2.0
%%CreationDate: May 14, 1992, 12:04 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 236 119 376 674
%%%Pages: 1
%%EndComments


/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RoundtanglePath
   {    % stack: left, top, width, height, radius
        /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
        /right l w add def  /bottom t h sub def
          l r add t moveto                         % origin
          right t right t r sub r arcto            % top side
          right bottom right r sub bottom r arcto  % right side
          l bottom l bottom r add r arcto          % bottom side
          l t l r add t r arcto                    % left side
          16 {pop} repeat  % each arcto accumulates 4 stack parameters
   } def

/RoundtangleDict 27 dict def
/DrawRoundtangle
   {    % stack: left, top, width, height, radius, line-halftone,
        %        line-red, line-green, line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        
        RoundtangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub  width thickness sub  height thickness sub
          radius thickness sub RoundtanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height radius thickness-by-2 sub RoundtanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
164 -46 translate
gsave
0 648 140 555 ClipToRectangle
0 0 translate
gsave
13 635 117 37 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
10 638 117 37 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
13 635 111 31 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
0 0 0 0 false 0 0 [] 1 93 620 43 620 DrawLine
13 590 117 37 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
10 593 117 37 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
13 590 111 31 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
0 0 0 0 false 0 0 [] 1 82 575 43 575 DrawLine
83 580 93 575 83 570 6 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawPolyline
13 545 117 37 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
10 548 117 37 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
13 545 111 31 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
0 0 0 0 false 0 0 [] 1 82 530 53 530 DrawLine
53 525 43 530 53 535 6 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawPolyline
83 535 93 530 83 525 6 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawPolyline
13 500 117 37 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
10 503 117 37 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
13 500 111 31 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
43 495 50 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
13 455 117 37 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
10 458 117 37 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
13 455 111 31 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
43 450 50 20 4 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRoundtangle
13 410 117 37 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
10 413 117 37 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
13 410 111 31 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
68.0 395.0 10.0 10.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
13 365 117 37 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
10 368 117 37 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
13 365 111 31 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
55 357 346 27 14 1 false 0 0 0 false 0 0 0 false (text) 12 /Courier DrawText
13 320 117 37 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
10 323 117 37 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
13 320 111 31 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
33 312 301 70 14 0 false 0 0 0 false 0 0 0 false (multi-text) 12 /Courier DrawText
13 275 117 37 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
10 278 117 37 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
13 275 111 31 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
47 267 256 42 14 0 false 0 0 0 false 0 0 0 false (window) 12 /Courier DrawText
13 230 117 37 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
10 233 117 37 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
13 230 111 31 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
48 222 211 41 14 0 false 0 0 0 false 0 0 0 false (bitmap) 12 /Courier DrawText
13 185 117 37 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
10 188 117 37 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
13 185 111 31 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
16 177 166 105 14 0 false 0 0 0 false 0 0 0 false (horizontal list) 12 /Courier DrawText
13 140 117 37 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
10 143 117 37 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
13 140 111 31 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
23 132 121 91 14 0 false 0 0 0 false 0 0 0 false (vertical list) 12 /Courier DrawText
grestore

grestore

0 648 140 555 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 236 119 376 674

%%EndDocument
 GE /Times-Bold SF
8280 63064 MT
(Figure 1-1:)SH
/Times-Roman SF
14053 XM
(Shapes menu)SH
8280 65362 MT
(The first six geometric shapes can)
105 W( be created by selecting the appropriate menu-item and sweeping out)104 W
8280 66558 MT
(the item in)
17 W( a drawing window with the right mouse button down.  Feedback corresponding to the selected)18 W
8280 67754 MT
(shape will be shown as the object is swept out.  Properties)
162 W( such as line-style, filling-style, and draw-)161 W
8280 68950 MT
(function can be set from the corresponding property menus \050see section 2.3\051.)SH
8280 71248 MT
(To create a single line of text,)
80 W( select text and then click where you want the text to start.  A cursor will)81 W
ES
%%Page: 540 3
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 540)
SH( Lapidary)830 W
41121 XM
(Getting Started)
SH( Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(appear and one line of text can be entered from the keyboard.  For more than one line)
219 W( of text use)218 W
6120 9151 MT
(multi-text. Single-line)
663 W( text can be terminated with either a mouse)
194 W( click or by hitting RETURN but,)195 W
6120 10347 MT
(multi-line text can only be terminated by a mouse click.)SH
6120 12645 MT
(To create a window, select the)48 W
/Courier SF
20059 XM
(window)SH
/Times-Roman SF
24342 XM
(menu-item and Lapidary will create a new window.)
48 W( Since,)
370 W( new)47 W
6120 13841 MT
(windows initially have the same size and location as the)
86 W( draw window, they must be moved in order to)87 W
6120 15037 MT
(expose the original draw window.)SH
6120 17335 MT
(Bitmaps can be loaded by selecting the)41 W
/Courier SF
23850 XM
(bitmap)SH
/Times-Roman SF
28126 XM
(menu-item. Lapidary brings up)
41 W( a dialog box that allows)40 W
6120 18531 MT
(the user to enter the name of an image file and the window that the bitmap should be placed in.)
131 W( The)538 W
6120 19727 MT
(window name is obtained from the title border that surrounds a)
82 W( window or the name that appears in the)81 W
6120 20923 MT
(icon for the window.)SH
6120 23221 MT
(To create a horizontal or vertical list, first select a prototype)
27 W( object.  Then select horizontal or vertical list)28 W
6120 24417 MT
(and sweep out the list.  A property sheet will)
97 W( appear that can be used to set parameters that control the)96 W
6120 25613 MT
(list's appearance.  A description of the parameters can be found in the chapter)
201 W( on aggregadgets and)202 W
6120 26809 MT
(aggrelists.)SH
14 /Times-Bold AF
6120 30627 MT
(1.2. Selecting Objects)SH
11 /Times-Roman AF
6120 31823 MT
(Lapidary permits two types of selections: primary selections and secondary selections.)
5 W( Primary)
283 W( selections)4 W
6120 33019 MT
(are denoted by black grow boxes that sprout around the perimeter of an object; secondary)
73 W( selections are)74 W
6120 34215 MT
(denoted by white grow boxes.  Most operations do not distinguish between these two types of)
59 W( selections)58 W
6120 35411 MT
(and will operate)
179 W( in the same way on both types of selections.  However, two operations, attaching a)180 W
6120 36607 MT
(constraint to an object and defining parameters for an object, do make this distinction.)SH
6120 38905 MT
(Lapidary provides two types of selection modes \050Figure 1-2\051: a ``leaves'' mode which causes)
23 W( Lapidary to)22 W
6120 40101 MT
(select leaf elements of an aggregate, and a ``top-level)
147 W( objects'' mode which causes Lapidary to select)148 W
6120 41297 MT
(top-level aggregates)
64 W( \050objects that do not belong to an aggregate will be selected in either mode\051.  To aid)63 W
6120 42493 MT
(the user in determining whether they)
102 W( have selected a leaf or aggregate element, Lapidary uses different)103 W
6120 43689 MT
(types of selection handles\320rectangular handles for leaf elements and)
205 W( circular handles for aggregates)204 W
6120 44885 MT
(\050Figure 1-5\051.  If the object is too small to accomodate 8 selection handles, either a thin or thick-lined)146 W
6120 46081 MT
(arrow is used to highlight the selection, depending on whether the object is a leaf or aggregate object)144 W
6120 47277 MT
(\050Figure 1-5\051.)SH
6120 49575 MT
(In either mode, additional clicks over the selected object will cause Lapidary to cycle through)
265 W( the)266 W
6120 50771 MT
(aggregate hierarchy.  For example, when the user clicks on the label shown in Figure 1-3.a, and Lapidary)31 W
6120 51967 MT
(is in ``top-level objects'' mode, the entire list)
59 W( element is selected \050Figure 1-4.a\051. If the user clicks on the)60 W
6120 53163 MT
(label again, the label is selected)
26 W( \050Figure 1-4.b\051. Clicking once more with the mouse causes the key-box to)25 W
6120 54359 MT
(become selected \050Figure 1-4.c\051. Finally, one more click causes the list element to)
107 W( be selected, at which)108 W
6120 55555 MT
(point the cycle repeats itself. In ``leaves'' mode, the label would be the first object selected,)
43 W( then the key)42 W
6120 56751 MT
(box, and finally the list element.)SH
6120 59049 MT
(Lapidary provides the usual range of selection)
277 W( operations found in drawing editors\320select, add to)278 W
6120 60245 MT
(selection, deselect, remove from selection, select/deselect in region. These operations are)
118 W( supported for)117 W
6120 61441 MT
(both primary and secondary selections.  In addition, Lapidary allows the user to select covered objects by)27 W
6120 62637 MT
(pointing at an already selected)
5 W( object and requesting that the object directly covered by the selected object)4 W
6120 63833 MT
(be selected.)SH
6120 66131 MT
(Section 1.3 provides specific details on each of the selection operations.)SH
ES
%%Page: 541 4
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.2)
SH( Selecting)
1800 W( Objects)SH
51386 XM
(Page 541)SH
46800 50 8280 4486 UL
46800 50 8280 8155 UL
11 SS 
7 10 0 10260 43328 GB 
%%BeginDocument: lapidary/editor-win.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: editor menu
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Aug 14, 1993, 8:00 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 134 319 478 474
%%%Pages: 1
%%EndComments


/DefImage { % image-name font-name w h string => -
  20 dict begin
    /ImageString exch def /ImageHeight exch def /ImageWidth exch def
    /FontName exch def
    /ImageName exch def
    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def
    /Encoding [
      /image 255 { /.notdef } repeat
    ] def
    /BuildChar { % font char => -
      pop begin
        1 0
        0 0 1 1 setcachedevice
        gsave
          ImageWidth ImageHeight false
          [ ImageWidth 0 0 ImageHeight 0 0 ]
          {ImageString} imagemask
        grestore
      end
    } def
    ImageName currentdict definefont
    FontName exch
    ImageName ImageString
  end
  def def
} def


/FillPattern { % fgR fgG fgB [bgR bgG bgB] opaque? top font => -
  50 dict begin gsave
    /font exch def
    /top exch def
    /opaque? exch def
    /w font /ImageWidth get def
    /h font /ImageHeight get def
    font [w 0 0 h 0 0] makefont setfont
    pathbbox
    /y1 exch def /x1 exch def
    /y0 exch def /x0 exch def
    clip
    opaque? {
      gsave
        setrgbcolor
        fill
      grestore
    } if
    newpath
    setrgbcolor
    /y0 y0 top sub h div floor h mul top add cvi def
    /x0 x0 w div floor w mul cvi def
    x0 y0 translate
    /W x1 x0 sub w div ceiling cvi 1 add def
    /H y1 y0 sub h div ceiling cvi def
    /s W string def
    H {
      0 0 moveto
      s show
      0 h translate
    } repeat
  grestore end
  newpath
} def


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
               % cap join dash thickness fill-color => -
    EllipseDict begin
        /fill-color exch def /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /endangle exch def /startangle exch def
        /yrad exch def  /xrad exch def /y exch def /x exch def
        /savematrix mtrx currentmatrix def
        % Draw the filling
        gsave
            newpath
            x y translate
            xrad thickness sub yrad thickness sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-color FillShape
            newpath
            x y translate
            xrad thickness 2 div sub yrad thickness 2 div sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-color
            0 % line-cap
            line-join dash-pattern thickness
            StrokeShape
        grestore
    end
} def

/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawGenericWindowFrame { % label left top w h
                          % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def

/image-1 /image-1-font 4 4 <
00 00 00 00>
DefImage


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale
62 402 translate

%
% Begin new window
%
gsave
0 0 344 155 ClipToRectangle
gsave
0 0 344 155 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
2 -23 translate
(editor menu) 0 0 340 130 2 23 2 2 DrawGenericWindowFrame
0 0 340 130 ClipToRectangle
gsave
0 0 37 14 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
5 0 -11 27 14 false [1 1 1] [1 1 1] (File) 12 /Courier DrawText
37 0 38 14 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
42 0 -11 28 14 false [1 1 1] [1 1 1] (Edit) 12 /Courier DrawText
75 0 79 14 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
80 0 -11 69 14 false [1 1 1] [1 1 1] (Properties) 12 /Courier DrawText
154 0 58 14 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
159 0 -11 48 14 false [1 1 1] [1 1 1] (Arrange) 12 /Courier DrawText
212 0 85 14 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
217 0 -11 75 14 false [1 1 1] [1 1 1] (Constraints) 12 /Courier DrawText
297 0 43 14 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
302 0 -11 33 14 false [1 1 1] [1 1 1] (Other) 12 /Courier DrawText
180 -30 -41 109 14 false [0 0 0] [1 1 1] (Test/Build Mode:) 12 /Courier DrawText
201.5 -69.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
196.5 -64.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
196.5 -64.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
218 -60 -71 27 14 false [0 0 0] [1 1 1] (test) 12 /Courier DrawText
201.5 -102.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
196.5 -97.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
196.5 -97.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
218 -93 -104 35 14 false [0 0 0] [1 1 1] (build) 12 /Courier DrawText
196.5 -97.5 5.5 5.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
[0 0 0] 0 0 [] 1 170 -130 170 0 DrawLine
10 -30 -41 101 14 false [0 0 0] [1 1 1] (Selection Mode:) 12 /Courier DrawText
31.5 -69.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
26.5 -64.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
26.5 -64.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
48 -60 -71 40 14 false [0 0 0] [1 1 1] (leaves) 12 /Courier DrawText
31.5 -102.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
26.5 -97.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
26.5 -97.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
48 -93 -104 117 14 false [0 0 0] [1 1 1] (top-level objects) 12 /Courier DrawText
26.5 -97.5 5.5 5.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier Helvetica-Bold 
%%BoundingBox: 134 319 478 474

%%EndDocument
 GE /Times-Bold SF
8280 22750 MT
(Figure 1-2:)SH
/Times-Roman SF
14566 XM
(The user can)
238 W( cause Lapidary to select leaves of aggregates or top-level aggregates by)239 W
14053 23946 MT
(choosing the appropriate selection mode in the editor menu window.)SH
46800 50 8280 25898 UL
7 10 0 -6085 72540 GB 
%%BeginDocument: lapidary/agg-hierarchy-a.PS
%!PS-Adobe-2.0
%%Title: Drawing Window 1
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Feb 22, 1993, 10:26 AM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 212 351 399 442
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def
        /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RoundtanglePath
   {    % stack: left, top, width, height, radius
        /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
        /right l w add def  /bottom t h sub def
          l r add t moveto                         % origin
          right t right t r sub r arcto            % top side
          right bottom right r sub bottom r arcto  % right side
          l bottom l bottom r add r arcto          % bottom side
          l t l r add t r arcto                    % left side
          16 {pop} repeat  % each arcto accumulates 4 stack parameters
   } def

/RoundtangleDict 27 dict def
/DrawRoundtangle
   {    % stack: left, top, width, height, radius, line-halftone,
        %        line-red, line-green, line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        
        RoundtangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub
          width thickness sub  height thickness sub
          radius thickness sub RoundtanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height radius thickness-by-2 sub RoundtanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub
          width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
140 -278 translate
gsave
0 648 187 91 ClipToRectangle
0 0 translate
gsave
14 635 91 47 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
104 635 23 47 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
0 0 0 0 false 0 0 [] 1 160 584 115 612 DrawLine
155 593 160 584 149 585 6 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
50 622 607 19 20 0 false 0 0 0 false 0 0 0 false (24) 18 /Courier-Bold DrawText
grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier-Bold 
%%BoundingBox: 212 351 399 442

%%EndDocument
 GE 7 10 0 16805 65750 GB 
%%BeginDocument: lapidary/agg-hierarchy-b.PS
%!PS-Adobe-2.0
%%Title: Drawing Window 2
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Feb 22, 1993, 10:50 AM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 254 540 538
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def
        /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RoundtanglePath
   {    % stack: left, top, width, height, radius
        /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
        /right l w add def  /bottom t h sub def
          l r add t moveto                         % origin
          right t right t r sub r arcto            % top side
          right bottom right r sub bottom r arcto  % right side
          l bottom l bottom r add r arcto          % bottom side
          l t l r add t r arcto                    % left side
          16 {pop} repeat  % each arcto accumulates 4 stack parameters
   } def

/RoundtangleDict 27 dict def
/DrawRoundtangle
   {    % stack: left, top, width, height, radius, line-halftone,
        %        line-red, line-green, line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        
        RoundtangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub
          width thickness sub  height thickness sub
          radius thickness sub RoundtanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height radius thickness-by-2 sub RoundtanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub
          width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.9397590361445783 0.9397590361445783 scale

%
% Begin new window
%
0 -194 translate
gsave
0 690 498 302 ClipToRectangle
0 0 translate
gsave
138 670 655 130 20 0 false 0 0 0 false 0 0 0 false (list element) 18 /Courier-Bold DrawText
76 601 586 77 20 0 false 0 0 0 false 0 0 0 false (key-box

) 18 /Courier-Bold DrawText
244 601 586 121 20 0 false 0 0 0 false 0 0 0 false (pointer-box) 18 /Courier-Bold DrawText
211 532 517 53 20 0 false 0 0 0 false 0 0 0 false (frame) 18 /Courier-Bold DrawText
330 532 517 76 20 0 false 0 0 0 false 0 0 0 false (pointer) 18 /Courier-Bold DrawText
41 532 517 53 20 0 false 0 0 0 false 0 0 0 false (frame) 18 /Courier-Bold DrawText
125 532 517 52 20 0 false 0 0 0 false 0 0 0 false (label) 18 /Courier-Bold DrawText
0 0 0 0 false 0 0 [] 1 114 601 203 651 DrawLine
125 602 114 601 121 610 6 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
0 0 0 0 false 0 0 [] 1 304 601 203 651 DrawLine
297 609 304 601 293 601 6 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
0 0 0 0 false 0 0 [] 1 67 532 114 582 DrawLine
78 536 67 532 70 542 6 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
0 0 0 0 false 0 0 [] 1 151 532 114 582 DrawLine
149 543 151 532 141 537 6 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
0 0 0 0 false 0 0 [] 1 237 532 304 582 DrawLine
248 534 237 532 242 542 6 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
0 0 0 0 false 0 0 [] 1 368 532 304 582 DrawLine
363 542 368 532 357 534 6 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
223 499 23 47 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
16 499 91 47 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
142 486 471 19 20 0 false 0 0 0 false 0 0 0 false (24) 18 /Courier-Bold DrawText
427 427 430 416 419 419 6 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
0 0 0 0 false 0 0 [] 1 323 463 368 513 DrawLine
334 467 323 463 326 473 6 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
0 0 0 0 false 0 0 [] 1 429 463 368 513 DrawLine
424 473 429 463 418 465 6 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
302 463 448 42 20 0 false 0 0 0 false 0 0 0 false (line) 18 /Courier-Bold DrawText
380 463 448 98 20 0 false 0 0 0 false 0 0 0 false (arrowhead) 18 /Courier-Bold DrawText
0 0 0 0 false 0 0 [] 1 342 408 304 434 DrawLine
grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier-Bold 
%%BoundingBox: 72 254 540 538

%%EndDocument
 GE 12960 49722 MT
(\050a\051)SH
33480 XM
(\050b\051)SH
/Times-Bold SF
8280 51474 MT
(Figure 1-3:)SH
/Times-Roman SF
14328 XM
(A list element \050a\051 and the objects used to build this list element \050b\051.)SH
46800 50 8280 53426 UL
46800 50 8280 55377 UL
6 10 0 13320 83174 GB 
%%BeginDocument: lapidary/selection.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: Drawing Window 7
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Aug 15, 1993, 3:12 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 343 540 450
%%%Pages: 1
%%EndComments


/DefImage { % image-name font-name w h string => -
  20 dict begin
    /ImageString exch def /ImageHeight exch def /ImageWidth exch def
    /FontName exch def
    /ImageName exch def
    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def
    /Encoding [
      /image 255 { /.notdef } repeat
    ] def
    /BuildChar { % font char => -
      pop begin
        1 0
        0 0 1 1 setcachedevice
        gsave
          ImageWidth ImageHeight false
          [ ImageWidth 0 0 ImageHeight 0 0 ]
          {ImageString} imagemask
        grestore
      end
    } def
    ImageName currentdict definefont
    FontName exch
    ImageName ImageString
  end
  def def
} def


/FillPattern { % fgR fgG fgB [bgR bgG bgB] opaque? top font => -
  50 dict begin gsave
    /font exch def
    /top exch def
    /opaque? exch def
    /w font /ImageWidth get def
    /h font /ImageHeight get def
    font [w 0 0 h 0 0] makefont setfont
    pathbbox
    /y1 exch def /x1 exch def
    /y0 exch def /x0 exch def
    clip
    opaque? {
      gsave
        setrgbcolor
        fill
      grestore
    } if
    newpath
    setrgbcolor
    /y0 y0 top sub h div floor h mul top add cvi def
    /x0 x0 w div floor w mul cvi def
    x0 y0 translate
    /W x1 x0 sub w div ceiling cvi 1 add def
    /H y1 y0 sub h div ceiling cvi def
    /s W string def
    H {
      0 0 moveto
      s show
      0 h translate
    } repeat
  grestore end
  newpath
} def


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
               % cap join dash thickness fill-color => -
    EllipseDict begin
        /fill-color exch def /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /endangle exch def /startangle exch def
        /yrad exch def  /xrad exch def /y exch def /x exch def
        /savematrix mtrx currentmatrix def
        % Draw the filling
        gsave
            newpath
            x y translate
            xrad thickness sub yrad thickness sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-color FillShape
            newpath
            x y translate
            xrad thickness 2 div sub yrad thickness 2 div sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-color
            0 % line-cap
            line-join dash-pattern thickness
            StrokeShape
        grestore
    end
} def

/RoundtanglePath { % left top width height radius => -
    /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
    /right l w add def  /bottom t h sub def
    l r add t moveto                         % origin
    right t right t r sub r arcto            % top side
    right bottom right r sub bottom r arcto  % right side
    l bottom l bottom r add r arcto          % bottom side
    l t l r add t r arcto                    % left side
    16 {pop} repeat  % each arcto accumulates 4 stack parameters
} def

/RoundtangleDict 27 dict def
/DrawRoundtangle { % left top width height radius line-color
                   % cap join dash thickness fill-color => -
    gsave RoundtangleDict begin
        /fill-color exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        
        % Draw filling
        newpath
        left thickness add top thickness sub
        width thickness 2 mul sub height thickness 2 mul sub
        radius thickness sub dup 0 lt { pop 0 } if RoundtanglePath
        fill-color FillShape

        left thickness 2 div add top thickness 2 div sub
        width thickness sub height thickness sub
        radius thickness 2 div sub dup 0 lt { pop 0 } if RoundtanglePath

        % Draw border
        line-color line-cap line-join dash-pattern thickness
        StrokeShape
    end grestore
} def


/PolylineDict 20 dict def
/DrawPolyline { % x1 y1 {{x y ...} ...} line-color
                % join cap dash thickness fill-color => -
    gsave PolylineDict begin
        /fill-color exch def  /thickness exch def  /dash-pattern exch def
        /line-join exch def  /line-cap exch def  /line-color exch def
        % Don't draw the path of the fill if the filling-style is null.
        fill-color null eq not {
                3 copy
                newpath
                3 1 roll moveto
                { aload length 2 idiv { lineto } repeat } forall
                fill-color FillShape
                } if

        newpath
        .5 -.5 translate

        % Stroke after every sub-array to avoid a limitcheck error
        2 index 2 index moveto
        { aload length 2 sub 2 idiv { lineto } repeat
        2 copy lineto
        line-color line-cap line-join dash-pattern thickness StrokeShape
        moveto
        } forall

        currentpoint
        3 -1 roll sub abs .01 lt
        3 1 roll sub abs .01 lt and {
          0 0 rlineto closepath
        } if

        line-color line-cap line-join dash-pattern
        thickness
%       dup -1 ne { .5 add } if % fudge outline width thicker
        StrokeShape

    end grestore
} def

/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def

/image-1 /image-1-font 4 4 <
00 00 00 00>
DefImage


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.84 0.84 scale
0 448 translate

%
% Begin new window
%
gsave
0 0 555 127 ClipToRectangle
gsave
0 0 555 127 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
0 0 translate
0 0 555 127 ClipToRectangle
gsave
14 -26 95 54 [0 0 0] 0 0 [] 1 null DrawRectangle
53 -43 -60 17 21 false [0 0 0] [1 1 1] (24) 18 /Times-Bold DrawText
108 -26 29 54 [0 0 0] 0 0 [] 1 null DrawRectangle
[0 0 0] 0 0 [] 1 165 -106 122 -53 DrawLine
163 -95 {
  { 155 -101 165 -106 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
196 -26 95 54 [0 0 0] 0 0 [] 1 null DrawRectangle
235 -43 -60 17 21 false [0 0 0] [1 1 1] (24) 18 /Times-Bold DrawText
290 -26 29 54 [0 0 0] 0 0 [] 1 null DrawRectangle
[0 0 0] 0 0 [] 1 347 -106 304 -53 DrawLine
345 -95 {
  { 337 -101 347 -106 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
378 -26 95 54 [0 0 0] 0 0 [] 1 null DrawRectangle
417 -43 -60 17 21 false [0 0 0] [1 1 1] (24) 18 /Times-Bold DrawText
472 -26 29 54 [0 0 0] 0 0 [] 1 null DrawRectangle
[0 0 0] 0 0 [] 1 529 -106 486 -53 DrawLine
527 -95 {
  { 519 -101 529 -106 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
14.5 -26.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
91.5 -26.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
166.5 -26.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
166.5 -67.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
166.5 -107.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
91.5 -107.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
14.5 -107.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
14.5 -67.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
[0 0 0] 0 0 [] 1 225 -53 215 -53 DrawLine
225 -48 {
  { 225 -58 235 -53 }
} [0 0 0] 0 0 [] 1 [0 0 0] DrawPolyline
378.5 -26.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
426.5 -26.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
472.5 -26.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
472.5 -53.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
472.5 -79.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
426.5 -79.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
378.5 -79.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
378.5 -53.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Times-Bold 
%%BoundingBox: 72 343 540 450

%%EndDocument
 GE 21780 64346 MT
(\050a\051)SH
29880 XM
(\050b\051)SH
39780 XM
(\050c\051)SH
/Times-Bold SF
8280 66098 MT
(Figure 1-4:)SH
/Times-Roman SF
14392 XM
(As the user repeatedly clicks the)
64 W( mouse button over an object, the selection cycles through)63 W
14053 67294 MT
(the aggregate hierarchy shown in Figure 1-3.)
141 W( If Lapidary is in ``top-level objects'' mode,)142 W
14053 68490 MT
(then the list element is initially selected \050a\051. A second click selects)
58 W( the label \050b\051, and a third)57 W
14053 69686 MT
(click selects the key-box \050c\051.)SH
46800 50 8280 71638 UL
ES
%%Page: 542 5
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 542)
SH( Lapidary)830 W
41121 XM
(Getting Started)
SH( Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
11 SS 
1 1 0 -1080 54000 GB 
%%BeginDocument: lapidary/selections.PS
%!PS-Adobe-1.0
%%Creator: OYSTER.GARNET.CS.CMU.EDU:bvz (Brad Vander Zanden)
%%Title: selections.bmt (Drawing Window 1)
%%CreationDate: Fri Jul 27 20:14:00 1990
%%EndComments
%%%Pages: 1
%%BoundingBox: 198 324 414 468
%%EndProlog
%%%Page: 1 1

/bitdump % stk: width, height, iscale
% dump a bit image with lower left corner at current origin,
% scaling by iscale (iscale=1 means 1/300 inch per pixel)
{
        % read arguments
        /iscale exch def
        /height exch def
        /width exch def

        % scale appropriately
        width iscale mul height iscale mul scale

        % allocate space for one scanline of input
        /picstr % picstr holds one scan line
                width 7 add 8 idiv % width of image in bytes = ceiling(width/8)
                string
                def

        % read and dump the image
        width height 1 [width 0 0 height neg 0 height]
        { currentfile picstr readhexstring pop }
        image
} def
%%BoundingBox: 198 324 414 468
72 300 div dup scale
825 1350 translate
300 200 3 bitdump
000000000000000000000000000000000000000000000000000000000000000000000000000f
000000000000000000000000000000000000000000000000000000000000000000000000000f
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffff01ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffff01ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffff01ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffff19ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffff1dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffff0efffffffffffffffffffff803fffffffe00ffffffff007fffffffffffffffffcf
3fffffffff027ffffffffffffffffffff001fffffffc007ffffffe003fffffffffffffffffcf
3ffffffffffe3fffffffffffffffffffe000fffffff8003ffffffc001fffffffffffffffffcf
3fffffffffff0fffffffffffffffffffc0007ffffff0001ffffff8000fffffffffffffffffcf
3fffffffffffc7ffffffffffffffffff80003fffffe0000ffffff00007ffffffffffffffffcf
3fffffffffffe3ffffffffffffffffff80003fffffe0000ffffff00007ffffffffffffffffcf
3ffffffffffff0ffffffffffffffffff80003fffffe0000ffffff00007ffffffffffffffffcf
3ffffffffffffc7fffffffffffffffff80000000000000000000000007ffffffffffffffffcf
3ffffffffffffe3fffffffffffffffff80000000000000000000000007ffffffffffffffffc0
3fffffffffffff0fffffffffffffffff80003fffffe0000ffffff00007ffffffffffffffffcf
3fffffffffffffc7ffffffffffffffff80003fffffe0000ffffff00007ffffffffffffffffc5
3fffffffffffffe3ffffffffffffffff80003fffffe0000ffffff00007ffffffffffffffffca
3ffffffffffffff0ffffffffffffffffc0007ffffff0001ffffff0000fffffffffffffffffcf
3ffffffffffffffc7fffffffffffffffe000fffffff8003ffffff0001fffffffffffffffffc0
3ffffffffffffffe3ffffffffffffffff001fffffffc007ffffff0003fffffffffffffffffcf
3fffffffffffffff0ffffffffffffffff803fffffffe00fffffff0007fffffffffffffffffcf
3fffffffffffffffc7ffffffffffffffff3ffffffffffffffffff2a7ffffffffffffffffffcf
3fffffffffffffffe3ffffffffffffffff3ffffffffffffffffff147ffffffffffffffffffcf
3ffffffffffffffff0ffffffffffffffff3ffffffffffffffffff2a7ffffffffffffffffffcf
3ffffffffffffffffc81ffffffffffffff3ffffffffffffffffff147ffffffffffffffffffcf
3ffffffffffffffffec1fffffffffffff803fffffffffffffffff2007fffffffffffffffffcf
3ffffffffffffffffff1fffffffffffff001fffffffffffffffff0003fffffffffffffffffcf
3fffffffffffffffff39ffffffffffffe000fffffffffffffffff0001fffffffffffffffffcf
3fffffffffffffffff1dffffffffffffc0007ffffffffffffffff0000fffffffffffffffffcf
3fffffffffffffffff0effffffffffff80003ffffffffffffffff00007ffffffffffffffffcf
3fffffffffffffffff027fffffffffff80003ffffffffffffffff00007ffffffffffffffffcb
3ffffffffffffffffffe3fffffffffff80003ffffffffffffffff00007ffffffffffffffffcf
3fffffffffffffffffff0fffffffffff80003ffffffffffffffff00007ffffffffffffffffcf
3fffffffffffffffffffc7ffffffffff80003ffffffffffffffff00007ffffffffffffffffcd
3fffffffffffffffffffe3ffffffffff80003ffffffffffffffff00007ffffffffffffffffcf
3ffffffffffffffffffff0ffffffffff80003ffffffffffffffff00007ffffffffffffffffcf
3ffffffffffffffffffffc7fffffffff80003ffffffffffffffff00007ffffffffffffffffce
3ffffffffffffffffffffe3fffffffffc0007ffffffffffffffff0000fffffffffffffffffcf
3fffffffffffffffffffff0fffffffffe000fffffffffffffffff0001fffffffffffffffffcf
3ffffffc0000ffffffffffc7fffffffff001fffffffffffffffff2003fffffffffffffffffcf
3ffffffc0000ffffffffffe3fffffffff803fffffffffffffffff1007fffffffffffffffffcf
3ffff3fc0000fffffffffff0ffffffffff3ffffffffffffffffff2a7ffffffffffffffffffcf
3ffff0fc0000fffffffffffc7fffffffff3ffffffffffffffffff147ffffffffffffffffffcf
3ffff03c0000fffffffffffe3fffffffff3ffffffffffffffffff2a7ffffffffffffffffffc0
3ffff00c0000ffffffffffff0ffffffff803fffffffe00fffffff1007fffffffffffffffffcf
3ffff0000000ffffffffffffc7fffffff001fffffffc007ffffff2003fffffffffffffffffc5
3fc000000000ffffffffffffe3ffffffe000fffffff8003ffffff0001fffffffffffffffffca
3ffff0000000fffffffffffff0ffffffc000000000000000000000000fffffffffffffffffcf
3ffff00c0000fffffffffffffc7fffff80000000000000000000000007ffffffffffffffffc0
3ffff03c0000fffffffffffffe40ffff80000aaaaaa0000aaaaaa00007ffffffffffffffffc0
3ffff0fc0000ffffffffffffff70ffff80001555554000055555500007ffffffffffffffffcf
3ffff3fc0000ffffffffffffffb8ffff80000000000000000000000007ffffffffffffffffc0
3ffffffc0000ffffffffffffff90ffff80000000000000000000000007ffffffffffffffffc0
3fffffffffffffffffffffffff80ffff80003fffffe0000ffffff00007ffffffffffffffffcf
3fffffffffffffffffffffffff80ffff80003fffffe0000ffffff00007ffffffffffffffffc0
3fffffffffffffffffffffffff80ffff80003fffffe0000ffffff00007ffffffffffffffffc0
3fffffffffffffffffffffffffffffffc0007ffffff0001ffffff8000fffffffffffffffffcf
3fffffffffffffffffffffffffffffffe000fffffff8003ffffffc001fffffffffffffffffcf
3ffffffffffffffffffffffffffffffff001fffffffc007ffffffe003fffffffffffffffffcf
3ffffffffffffffffffffffffffffffff803fffffffe00ffffffff007fffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3ffffffffffffffffffffffffffffffffffffffffffffffffc07fffffffff01fffffffff80ce
3ffffffffffffffffffffffffffffffffffffffffffffffffc07fffffffff01fffffffff80ce
3ffffffffffffffffffffffffffffffffffffffffffffffffc07fffffffff01fffffffff80ce
3ffffffffffffffffffffffffffffffffffffffffffffffffc000000000000000000000000ce
3ffffffffffffffffffe03fffffff80fffffff80fffffffffc000000000000000000000000ce
3ffffffffffffffffffefbfffffffbefffffffbefffffffffc055555555550155555555500ce
3ffffffffffffffffffefbfffffffbefffffffbefffffffffc02aaaaaaaaa00aaaaaaaaa80ce
3ffffffffffffffffffef800000003e00000003effffffffff955555555555555555555547ce
3ffffffffffffffffffef800000003e00000003effffffffff8aaaaaaaaaaaaaaaaaaaaaa7ce
3ffffffffffffffffffef955555553e55555553effffffffff955555555555555555555547ce
3ffffffffffffffffffe02aaaaaaa80aaaaaaa80ffffffffff8aaaaaaaaaaaaaaaaaaaaaa7c0
3fffffffffffffffffffc5555555555555555547ffffffffff955555555555555555555547c0
3fffffff80000fffffffcaaaaaaaaaaaaaaaaaa7ffffffffff8aaaaaaaaaaaaaaaaaaaaaa7c0
3fffffff80000fffffffc5555555555555555547ffffffffff955555555555555555555547c0
3ffffe7f9fffcfffffffcaaaaaaaaaaaaaaaaaa7ffffffffff8aaaaaaaaaaaaaaaaaaaaaa7c0
3ffffe9f9fffcfffffffc5555555555555555547ffffffffff955555555555555555555547c0
3ffffee79fffcfffffffcaaaaaaaaaaaaaaaaaa7ffffffffff8aaaaaaaaaaaaaaaaaaaaaa7c0
3ffffef99fffcfffffffc5555555555555555547ffffffffff955555555555555555555547c0
3ffffefe1fffcfffffffcaaaaaaaaaaaaaaaaaa7ffffffffff8aaaaaaaaaaaaaaaaaaaaaa7c0
3ff800ff9fffcfffffffc5555555555555555547ffffffffff955555555555555555555547c0
3ffffefe1fffcfffffffcaaaaaaaaaaaaaaaaaa7ffffffffff8aaaaaaaaaaaaaaaaaaaaaa7c0
3ffffef99fffcfffffffc5555555555555555547ffffffffff955555555555555555555547c0
3ffffee79fffcfffffffcaaaaaaaaaaaaaaaaaa7ffffffffff8aaaaaaaaaaaaaaaaaaaaaa7c0
3ffffe9f9fffcfffffffc5555555555555555547ffffffffff955555555555555555555547c0
3ffffe7f80000fffffffcaaaaaaaaaaaaaaaaaa7fffffffffc02aaaaaaaaaaaaaaaaaaaa80c0
3fffffff80000fffffffc5555555555555555547fffffffffc055555555555555555555500c0
3fffffffffffffffffffcaaaaaaaaaaaaaaaaaa7fffffffffc02aaaaaaaaaaaaaaaaaaaa80c0
3fffffffffffffffffffc5555555555555555547fffffffffc055555555555555555555500c0
3fffffffffffffffffffcaaaaaaaaaaaaaaaaaa7fffffffffc02aaaaaaaaaaaaaaaaaaaa80c0
3fffffffffffffffffffc5555555555555555547fffffffffc055555555555555555555500c0
3ffffffffffffffffffe02aaaaaaaaaaaaaaaa80fffffffffc02aaaaaaaaaaaaaaaaaaaa80c0
3ffffffffffffffffffef955555555555555553effffffffff955555555555555555555547c0
3ffffffffffffffffffefaaaaaaaaaaaaaaaaabeffffffffff8aaaaaaaaaaaaaaaaaaaaaa7c0
3ffffffffffffffffffef955555555555555553effffffffff955555555555555555555547c0
3ffffffffffffffffffefaaaaaaaaaaaaaaaaabeffffffffff8aaaaaaaaaaaaaaaaaaaaaa7c0
3ffffffffffffffffffef955555555555555553effffffffff955555555555555555555547c0
3ffffffffffffffffffe02aaaaaaaaaaaaaaaa80ffffffffff8aaaaaaaaaaaaaaaaaaaaaa7c0
3fffffffffffffffffffc5555555555555555547ffffffffff955555555555555555555547c0
3fffffffffffffffffffcaaaaaaaaaaaaaaaaaa7ffffffffff8aaaaaaaaaaaaaaaaaaaaaa7cf
3fffffffffffffffffffc5555555555555555547ffffffffff955555555555555555555547cf
3fffffffffffffffffffcaaaaaaaaaaaaaaaaaa7ffffffffff8aaaaaaaaaaaaaaaaaaaaaa7c5
3fffffffffffffffffffc5555555555555555547ffffffffff955555555555555555555547c0
3fffffffffffffffffffcaaaaaaaaaaaaaaaaaa7ffffffffff8aaaaaaaaaaaaaaaaaaaaaa7c0
3fffffffffffffffffffc5555555555555555547ffffffffff955555555555555555555547c0
3fffffffffffffffffffcaaaaaaaaaaaaaaaaaa7ffffffffff8aaaaaaaaaaaaaaaaaaaaaa7c0
3fffffffffffffffffffc5555555555555555547ffffffffff955555555555555555555547c0
3fffffffffffffffffffcaaaaaaaaaaaaaaaaaa7ffffffffff8aaaaaaaaaaaaaaaaaaaaaa7c4
3fffffffffffffffffffc5555555555555555547fffffffffc055555555550155555555500c0
3fffffffffffffffffffcaaaaaaaaaaaaaaaaaa7fffffffffc02aaaaaaaaa00aaaaaaaaa80c0
3fffffffffffffffffffc5555555555555555547fffffffffc000000000000000000000000c0
3fffffffffffffffffffcaaaaaaaaaaaaaaaaaa7fffffffffc000000000000000000000000c0
3fffffffffffffffffffc5555555555555555547fffffffffc07fffffffff01fffffffff80c0
3fffffffffffffffffffcaaaaaaaaaaaaaaaaaa7fffffffffc07fffffffff01fffffffff80c0
3fffffffffffffffffffc5555555555555555547fffffffffc07fffffffff01fffffffff80c0
3ffffffffffffffffffe02aaaaaaa80aaaaaaa80ffffffffffffffffffffffffffffffffffc0
3ffffffffffffffffffef955555553e55555553effffffffffffffffffffffffffffffffffc0
3ffffffffffffffffffef800000003e00000003effffffffffffffffffffffffffffffffffc0
3ffffffffffffffffffef800000003e00000003effffffffffffffffffffffffffffffffffc0
3ffffffffffffffffffefbfffffffbefffffffbeffffffffffffffffffffffffffffffffffc0
3ffffffffffffffffffefbfffffffbefffffffbeffffffffffffffffffffffffffffffffffc0
3ffffffffffffffffffe03fffffff80fffffff80ffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffce
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc2
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc2
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc2
3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0
0000000000000000000000000000000000000000000000000000000000000000000000000002
0000000000000000000000000000000000000000000000000000000000000000000000000000

showpage
%%Trailer

%%EndDocument
 GE /Times-Bold SF
6120 23352 MT
(Figure 1-5:)SH
/Times-Roman SF
11893 XM
(Different types of selection objects.)
80 W( Squares)
436 W( are for primitive graphical objects, circles are)81 W
11893 24548 MT
(for aggregadgets, and arrows are for objects too small to accommodate grow boxes.)SH
14 /Times-Bold AF
6120 28366 MT
(1.3. Mouse-Based Commands)SH
11 /Times-Roman AF
6120 29562 MT
(Lapidary is primarily a mouse-based system so it is important to know which mouse)
67 W( buttons correspond)66 W
6120 30758 MT
(to which operation.  These)
53 W( bindings are set in the file mouse-bindings.lisp and may be edited.  Currently)54 W
6120 31954 MT
(the following operations can be bound to mouse buttons \050the pair)
50 W( following each entry shows the default)49 W
6120 33150 MT
(and the variable that must be changed to modify the default\051:)SH
/Symbol SF
8089 34728 MT
(\267)SH
/Times-Roman SF
8870 XM
(Primary Selection \050leftdown, *prim-select-one-obj*\051: The user can either point at)
28 W( a particular)29 W
8870 35924 MT
(object and make it the primary selection, or sweep out)
41 W( a rectangular region of the screen and)40 W
8870 37120 MT
(make all objects that)128 W
/Times-Italic SF
18731 XM
(intersect)SH
/Times-Roman SF
22923 XM
(the region be primary selections.  This operation causes the)129 W
8870 38316 MT
(previous primary selections to be)
80 W( deselected. If the mouse is not pointing at any objects, all)79 W
8870 39512 MT
(primary selections)
56 W( are deselected.  Each successive mouse click over the same object moves)57 W
8870 40708 MT
(the selection one level higher in the aggregate hierarchy, until the)
66 W( top-most level is reached,)65 W
8870 41904 MT
(at which point the selection process cycles back to a leaf \050if the selection is initially a)
106 W( top-)107 W
8870 43100 MT
(level object, the next click cycles to the leaf\051.)SH
/Symbol SF
8089 44994 MT
(\267)SH
/Times-Roman SF
8870 XM
(Secondary Selection \050middledown, *sec-select-one-obj*\051: Same as)
287 W( primary selection but)286 W
8870 46190 MT
(makes a secondary selection.)SH
/Symbol SF
8089 48084 MT
(\267)SH
/Times-Roman SF
8870 XM
(Deselect Primary)
8 W( Selection \050control-leftdown, *primary-deselection-button*\051:  This operation)9 W
8870 49280 MT
(allows the user to deselect primary selections. The user can either point)
14 W( at a specific object or)13 W
8870 50476 MT
(sweep out)
154 W( a rectangular region, in which case all objects that intersect this region will be)155 W
8870 51672 MT
(deselected \050if they are primary selections\051.)SH
/Symbol SF
8089 53566 MT
(\267)SH
/Times-Roman SF
8870 XM
(Deselect Secondary Selection \050control-middledown, *secondary-deselection-button*\051:)
123 W( Same)122 W
8870 54762 MT
(as Deselect Primary Selection except secondary selections are deselected.)SH
/Symbol SF
8089 56656 MT
(\267)SH
/Times-Roman SF
8870 XM
(Primary Select Covered Object)
86 W( \050shift-control-leftdown, *prim-push-sel-under-button*\051: This)87 W
8870 57852 MT
(operation allows the user to select covered objects. When the)
62 W( user points at a particular area)61 W
8870 59048 MT
(of the screen, Lapidary determines which object is currently selected, and then deselects it)125 W
8870 60244 MT
(and primary selects the first object that it covers.)
119 W( If no object under the mouse is selected,)118 W
8870 61440 MT
(Lapidary primary selects)
139 W( the top object.  If multiple objects under the mouse are selected,)140 W
8870 62636 MT
(Lapidary finds)
302 W( the first unselected object which is under a selected object, selects the)301 W
8870 63832 MT
(unselected object, and deselects the topmost selected object.)SH
/Symbol SF
8089 65726 MT
(\267)SH
/Times-Roman SF
8870 XM
(Secondary Select Covered Object \050shift-control-middledown,)
147 W( *sec-push-sel-under-button*\051:)148 W
8870 66922 MT
(Same as Primary Select Covered Object except a secondary selection is made.)SH
/Symbol SF
8089 68816 MT
(\267)SH
/Times-Roman SF
8870 XM
(Add to Primary Selection \050shift-leftdown,)
75 W( *prim-add-to-select*\051: Same as Primary Selection)74 W
8870 70012 MT
(except previously selected objects remain selected.)
186 W( Covered)
649 W( objects that are selected are)187 W
8870 71208 MT
(automatically added to a selection, rather than causing previously selected objects to)
237 W( be)236 W
ES
%%Page: 543 6
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.3)
SH( Mouse-Based)
1800 W( Commands)SH
51386 XM
(Page 543)SH
46800 50 8280 4486 UL
11 SS 
11030 7955 MT
(deselected. Multiple)
239 W( clicks with the)240 W
/Courier SF
28115 XM
(Add to Primary Selection)240 W
/Times-Roman SF
45190 XM
(button over the)240 W
/Times-Italic SF
11030 9151 MT
(selection handles)66 W
/Times-Roman SF
19044 XM
(of a covered object will cause the selection to cycle through)
66 W( the aggregate)65 W
11030 10347 MT
(hierarchy \050Figure 1-6\051.)SH
/Symbol SF
10249 12241 MT
(\267)SH
/Times-Roman SF
11030 XM
(Add to Secondary Selection \050shift-middledown, *sec-add-to-select*\051: Same as)
9 W( add to primary)10 W
11030 13437 MT
(selection but adds to secondary selection.)SH
/Symbol SF
10249 15331 MT
(\267)SH
/Times-Roman SF
11030 XM
(Move Object \050leftdown, *move-button*\051: This operation)
115 W( allows the user to move an object)114 W
11030 16527 MT
(around the window. The user must point at one of the eight)
232 W( ``grow'' boxes around the)233 W
11030 17723 MT
(perimeter of box objects, or one of the three ``grow'' boxes attached)
121 W( to line objects or the)120 W
11030 18919 MT
(arrow if the object is too small to contain grow boxes. If)
96 W( the object is a box object and the)97 W
11030 20115 MT
(user points at one of the corner boxes, the)
21 W( object can move in any direction, if the user points)20 W
11030 21311 MT
(at one of the side boxes, the)
9 W( object can move in only one direction \050along the x-axis if the left)10 W
11030 22507 MT
(or right side is chosen and along the)
2 W( y-axis if the top or bottom side is chosen\051. If the object is)1 W
11030 23703 MT
(a line)
62 W( object, Lapidary will attach the mouse cursor to the point designated by the grow box)63 W
11030 24899 MT
(\050either an endpoint of the line or its midpoint\051 and)
148 W( move the line in any direction.  If the)147 W
11030 26095 MT
(object is undersized so that the object does not have grow boxes but instead is pointed)
59 W( at by)60 W
11030 27291 MT
(an arrow,)
152 W( then pointing at the arrow will cause the cursor to be attached to the northwest)151 W
11030 28487 MT
(corner of the object and the object can be moved in any direction.)SH
/Symbol SF
10249 30381 MT
(\267)SH
/Times-Roman SF
11030 XM
(Grow Object \050middledown, *grow-button*\051: This operation allows the user to resize)
261 W( an)262 W
11030 31577 MT
(object. The user must point at)
125 W( one of the eight ``grow'' boxes around the perimeter of the)124 W
11030 32773 MT
(object if the object is a)
69 W( box, one of the endpoint ``grow'' boxes attached to the object if the)70 W
11030 33969 MT
(object is a line, or the arrow that points at)
66 W( the object if the object is too small to contain the)65 W
11030 35165 MT
(grow boxes.)
49 W( If the object is a box object and the user points at one of the corner boxes, both)50 W
11030 36361 MT
(the object's width and height can change, if the user points at one of the)
24 W( side boxes, only one)23 W
11030 37557 MT
(of the)
24 W( object's dimensions will change \050the width if the left or right side is chosen, the height)25 W
11030 38753 MT
(if the top or bottom side is chosen\051. If the object is a)
136 W( line object, Lapidary will attach the)135 W
11030 39949 MT
(mouse cursor to the point designated by the grow)
46 W( box and move that endpoint while holding)47 W
11030 41145 MT
(the other)
116 W( endpoint fixed.  If the object is undersized so that the object does not have grow)115 W
11030 42341 MT
(boxes but instead is pointed at by an arrow, then pointing at the arrow will cause the cursor)
5 W( to)6 W
11030 43537 MT
(be attached to)
62 W( the northwest corner of the object and the object's width and height will both)61 W
11030 44733 MT
(change.)SH
/Symbol SF
10249 46627 MT
(\267)SH
/Times-Roman SF
11030 XM
(Object Creation \050rightdown, *obj-creation-button*\051: The user sweeps out)
222 W( a region of the)223 W
11030 47823 MT
(screen and Lapidary creates the object selected in the shapes menu.)SH
/Symbol SF
10249 49717 MT
(\267)SH
/Times-Roman SF
11030 XM
(Copy Object \050shift-rightdown, *copy-button*\051:  This)
166 W( operation allows the user to create a)165 W
11030 50913 MT
(copy of an object and position it in a window \050copies of an object can also be created using)68 W
11030 52109 MT
(the)SH
/Courier SF
12768 XM
(make copy)119 W
/Times-Roman SF
19221 XM
(command in the editor menu window\320see Section 2.2 for details\051.)
119 W( The)512 W
11030 53305 MT
(user must)
10 W( point at one of the eight ``grow'' boxes around the perimeter of box objects, or one)11 W
11030 54501 MT
(of the three ``grow'' boxes)
79 W( attached to line objects or the arrow if the object is too small to)78 W
11030 55697 MT
(contain grow boxes.  The selected ``grow'' box constrains the)
98 W( initial movement of the new)99 W
11030 56893 MT
(object \050see)452 W
/Courier SF
16942 XM
(Move Object)452 W
/Times-Roman SF
25381 XM
(for a description of how the ``grow'' boxes)
452 W( constrain)451 W
11030 58089 MT
(movement\051.)SH
/Symbol SF
10249 59983 MT
(\267)SH
/Times-Roman SF
11030 XM
(Instance Object \050control-rightdown, *instance-button*\051:  This operation allows the user)
174 W( to)175 W
11030 61179 MT
(create an instance of an object and position it in a window \050instances of an object can also be)24 W
11030 62375 MT
(created using the)43 W
/Courier SF
18886 XM
(make instance)43 W
/Times-Roman SF
27827 XM
(command in)
43 W( the editor menu window\320see Section 2.2)44 W
11030 63571 MT
(for details\051.)
73 W( The)
420 W( user must point at one of the eight ``grow'' boxes around the perimeter of)72 W
11030 64767 MT
(box objects, or one of)
129 W( the three ``grow'' boxes attached to line objects or the arrow if the)130 W
11030 65963 MT
(object is too small to contain grow boxes.  The selected ``grow'' box constrains the initial)118 W
11030 67159 MT
(movement of the new object \050see)195 W
/Courier SF
27044 XM
(Move Object)195 W
/Times-Roman SF
34969 XM
(for a)
195 W( description of how the ``grow'')196 W
11030 68355 MT
(boxes constrain movement\051.)SH
/Symbol SF
10249 70249 MT
(\267)SH
/Times-Roman SF
11030 XM
(Text Editing \050rightdown, *obj-creation-button*\051:)
95 W( The user can edit a selected text object by)94 W
11030 71445 MT
(pointing at it and clicking with the object creation button.  The user)
57 W( can use any text editing)58 W
ES
%%Page: 544 7
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 544)
SH( Lapidary)830 W
41121 XM
(Getting Started)
SH( Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
11 SS 
8870 7955 MT
(command described)
271 W( in the interactors manual and clicks down on the mouse button to)270 W
8870 9151 MT
(indicate that editing is complete.)SH
46800 50 6120 11302 UL
6 10 0 11160 38859 GB 
%%BeginDocument: lapidary/covered-selection.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: Drawing Window 8
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Aug 15, 1993, 3:40 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 345 540 446
%%%Pages: 1
%%EndComments


/DefImage { % image-name font-name w h string => -
  20 dict begin
    /ImageString exch def /ImageHeight exch def /ImageWidth exch def
    /FontName exch def
    /ImageName exch def
    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def
    /Encoding [
      /image 255 { /.notdef } repeat
    ] def
    /BuildChar { % font char => -
      pop begin
        1 0
        0 0 1 1 setcachedevice
        gsave
          ImageWidth ImageHeight false
          [ ImageWidth 0 0 ImageHeight 0 0 ]
          {ImageString} imagemask
        grestore
      end
    } def
    ImageName currentdict definefont
    FontName exch
    ImageName ImageString
  end
  def def
} def


/FillPattern { % fgR fgG fgB [bgR bgG bgB] opaque? top font => -
  50 dict begin gsave
    /font exch def
    /top exch def
    /opaque? exch def
    /w font /ImageWidth get def
    /h font /ImageHeight get def
    font [w 0 0 h 0 0] makefont setfont
    pathbbox
    /y1 exch def /x1 exch def
    /y0 exch def /x0 exch def
    clip
    opaque? {
      gsave
        setrgbcolor
        fill
      grestore
    } if
    newpath
    setrgbcolor
    /y0 y0 top sub h div floor h mul top add cvi def
    /x0 x0 w div floor w mul cvi def
    x0 y0 translate
    /W x1 x0 sub w div ceiling cvi 1 add def
    /H y1 y0 sub h div ceiling cvi def
    /s W string def
    H {
      0 0 moveto
      s show
      0 h translate
    } repeat
  grestore end
  newpath
} def


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
               % cap join dash thickness fill-color => -
    EllipseDict begin
        /fill-color exch def /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /endangle exch def /startangle exch def
        /yrad exch def  /xrad exch def /y exch def /x exch def
        /savematrix mtrx currentmatrix def
        % Draw the filling
        gsave
            newpath
            x y translate
            xrad thickness sub yrad thickness sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-color FillShape
            newpath
            x y translate
            xrad thickness 2 div sub yrad thickness 2 div sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-color
            0 % line-cap
            line-join dash-pattern thickness
            StrokeShape
        grestore
    end
} def

/RoundtanglePath { % left top width height radius => -
    /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
    /right l w add def  /bottom t h sub def
    l r add t moveto                         % origin
    right t right t r sub r arcto            % top side
    right bottom right r sub bottom r arcto  % right side
    l bottom l bottom r add r arcto          % bottom side
    l t l r add t r arcto                    % left side
    16 {pop} repeat  % each arcto accumulates 4 stack parameters
} def

/RoundtangleDict 27 dict def
/DrawRoundtangle { % left top width height radius line-color
                   % cap join dash thickness fill-color => -
    gsave RoundtangleDict begin
        /fill-color exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        
        % Draw filling
        newpath
        left thickness add top thickness sub
        width thickness 2 mul sub height thickness 2 mul sub
        radius thickness sub dup 0 lt { pop 0 } if RoundtanglePath
        fill-color FillShape

        left thickness 2 div add top thickness 2 div sub
        width thickness sub height thickness sub
        radius thickness 2 div sub dup 0 lt { pop 0 } if RoundtanglePath

        % Draw border
        line-color line-cap line-join dash-pattern thickness
        StrokeShape
    end grestore
} def


/PolylineDict 20 dict def
/DrawPolyline { % x1 y1 {{x y ...} ...} line-color
                % join cap dash thickness fill-color => -
    gsave PolylineDict begin
        /fill-color exch def  /thickness exch def  /dash-pattern exch def
        /line-join exch def  /line-cap exch def  /line-color exch def
        % Don't draw the path of the fill if the filling-style is null.
        fill-color null eq not {
                3 copy
                newpath
                3 1 roll moveto
                { aload length 2 idiv { lineto } repeat } forall
                fill-color FillShape
                } if

        newpath
        .5 -.5 translate

        % Stroke after every sub-array to avoid a limitcheck error
        2 index 2 index moveto
        { aload length 2 sub 2 idiv { lineto } repeat
        2 copy lineto
        line-color line-cap line-join dash-pattern thickness StrokeShape
        moveto
        } forall

        currentpoint
        3 -1 roll sub abs .01 lt
        3 1 roll sub abs .01 lt and {
          0 0 rlineto closepath
        } if

        line-color line-cap line-join dash-pattern
        thickness
%       dup -1 ne { .5 add } if % fudge outline width thicker
        StrokeShape

    end grestore
} def

/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def

/image-1 /image-1-font 4 4 <
00 00 00 00>
DefImage


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.84 0.84 scale
0 447 translate

%
% Begin new window
%
gsave
0 0 558 121 ClipToRectangle
gsave
0 0 558 121 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
0 0 translate
0 0 558 121 ClipToRectangle
gsave
21 -22 95 54 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
60 -39 -56 17 21 false [1 1 1] [1 1 1] (24) 18 /Times-Bold DrawText
115 -22 29 54 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
[0 0 0] 0 0 [] 1 172 -102 129 -49 DrawLine
170 -91 {
  { 162 -97 172 -102 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
203 -22 95 54 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
242 -39 -56 17 21 false [1 1 1] [1 1 1] (24) 18 /Times-Bold DrawText
297 -22 29 54 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
[0 0 0] 0 0 [] 1 354 -102 311 -49 DrawLine
352 -91 {
  { 344 -97 354 -102 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
385 -22 95 54 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
424 -39 -56 17 21 false [1 1 1] [1 1 1] (24) 18 /Times-Bold DrawText
479 -22 29 54 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
[0 0 0] 0 0 [] 1 536 -102 493 -49 DrawLine
534 -91 {
  { 526 -97 536 -102 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
[1 1 1] 0 0 [] 1 143 -66 129 -49 DrawLine
[1 1 1] 0 0 [] 1 115 -75 115 -22 DrawLine
[1 1 1] 0 0 [] 1 297 -75 297 -22 DrawLine
[1 1 1] 0 0 [] 1 326 -66 311 -49 DrawLine
[1 1 1] 0 0 [] 1 479 -75 479 -22 DrawLine
[1 1 1] 0 0 [] 1 508 -66 493 -49 DrawLine
18 -19 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
80 -19 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
140 -19 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
140 -46 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
140 -72 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
80 -72 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
18 -72 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
18 -46 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
385.5 -22.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
433.5 -22.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
479.5 -22.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
479.5 -49.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
479.5 -75.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
433.5 -75.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
385.5 -75.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
385.5 -49.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
[1 1 1] 0 0 [] 1 232 -49 222 -49 DrawLine
232 -44 {
  { 232 -54 242 -49 }
} [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawPolyline
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Times-Bold 
%%BoundingBox: 72 345 540 446

%%EndDocument
 GE 19206 19911 MT
(\050a\051)SH
28620 XM
(\050b\051)SH
36720 XM
(\050c\051)SH
/Times-Bold SF
6120 21663 MT
(Figure 1-6:)SH
/Times-Roman SF
11893 XM
(Selecting a covered object in ``leaves'' mode.  The label is covered by an xor)
182 W( feedback)183 W
11893 22859 MT
(object, so the feedback object is the initial selection)
989 W( \050a\051. Clicking the)988 W
/Courier SF
11893 24055 MT
(shift-control-leftdown)SH
/Times-Roman SF
26907 XM
(mouse button pushes the)
219 W( selection down to the covered)220 W
11893 25251 MT
(label \050b\051. Clicking the add to selection button \050)25 W
/Courier SF
(shift-leftdown)SH
/Times-Roman SF
42193 XM
(over the feedback arrow)24 W
11893 26447 MT
(causes the selection to cycle up)
50 W( to the next level in the aggregate hierarchy, in this case, the)51 W
11893 27643 MT
(key-box \050c\051.)SH
46800 50 6120 29595 UL
46800 50 6120 31546 UL
35 100 0 3760 49143 GB 
%%BeginDocument: lapidary/duplicating-a.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: Drawing Window 4
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Aug 11, 1993, 9:24 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 91 311 521 480
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
               % cap join dash thickness fill-color => -
    EllipseDict begin
        /fill-color exch def /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /endangle exch def /startangle exch def
        /yrad exch def  /xrad exch def /y exch def /x exch def
        /savematrix mtrx currentmatrix def
        % Draw the filling
        gsave
            newpath
            x y translate
            xrad thickness sub yrad thickness sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-color FillShape
            newpath
            x y translate
            xrad thickness 2 div sub yrad thickness 2 div sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-color
            0 % line-cap
            line-join dash-pattern thickness
            StrokeShape
        grestore
    end
} def

/RoundtanglePath { % left top width height radius => -
    /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
    /right l w add def  /bottom t h sub def
    l r add t moveto                         % origin
    right t right t r sub r arcto            % top side
    right bottom right r sub bottom r arcto  % right side
    l bottom l bottom r add r arcto          % bottom side
    l t l r add t r arcto                    % left side
    16 {pop} repeat  % each arcto accumulates 4 stack parameters
} def

/RoundtangleDict 27 dict def
/DrawRoundtangle { % left top width height radius line-color
                   % cap join dash thickness fill-color => -
    gsave RoundtangleDict begin
        /fill-color exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        
        % Draw filling
        newpath
        left thickness add top thickness sub
        width thickness 2 mul sub height thickness 2 mul sub
        radius thickness sub dup 0 lt { pop 0 } if RoundtanglePath
        fill-color FillShape

        left thickness 2 div add top thickness 2 div sub
        width thickness sub height thickness sub
        radius thickness 2 div sub dup 0 lt { pop 0 } if RoundtanglePath

        % Draw border
        line-color line-cap line-join dash-pattern thickness
        StrokeShape
    end grestore
} def


/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/PolylineDict 20 dict def
/DrawPolyline { % x1 y1 {{x y ...} ...} line-color
                % join cap dash thickness fill-color => -
    gsave PolylineDict begin
        /fill-color exch def  /thickness exch def  /dash-pattern exch def
        /line-join exch def  /line-cap exch def  /line-color exch def
        % Don't draw the path of the fill if the filling-style is null.
        fill-color null eq not {
                3 copy
                newpath
                3 1 roll moveto
                { aload length 2 idiv { lineto } repeat } forall
                fill-color FillShape
                } if

        newpath
        .5 -.5 translate

        % Stroke after every sub-array to avoid a limitcheck error
        2 index 2 index moveto
        { aload length 2 sub 2 idiv { lineto } repeat
        2 copy lineto
        line-color line-cap line-join dash-pattern thickness StrokeShape
        moveto
        } forall

        currentpoint
        3 -1 roll sub abs .01 lt
        3 1 roll sub abs .01 lt and {
          0 0 rlineto closepath
        } if

        line-color line-cap line-join dash-pattern
        thickness
%       dup -1 ne { .5 add } if % fudge outline width thicker
        StrokeShape

    end grestore
} def

/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawGenericWindowFrame { % label left top w h
                          % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale
19 408 translate

%
% Begin new window
%
gsave
0 0 430 169 ClipToRectangle
gsave
0 0 430 169 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
2 -23 translate
(Drawing Window 4) 0 0 426 144 2 23 2 2 DrawGenericWindowFrame
0 0 426 144 ClipToRectangle
gsave
[0 0 0] 0 0 [] 1 175 -72 179 -79 DrawLine
171 -74 {
  { 179 -70 171 -63 }
} [0 0 0] 0 0 [] 1 [0 0 0] DrawPolyline
12 -19 95 54 [0 0 0] 0 0 [] 1 null DrawRectangle
51 -36 -53 17 21 false [0 0 0] [1 1 1] (24) 18 /Times-Bold DrawText
106 -19 29 54 [0 0 0] 0 0 [] 1 null DrawRectangle
[0 0 0] 0 0 [] 1 163 -99 120 -46 DrawLine
161 -88 {
  { 153 -94 163 -99 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
12.5 -19.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
89.5 -19.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
164.5 -19.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
164.5 -60.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
164.5 -100.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
89.5 -100.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
12.5 -100.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
12.5 -60.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Times-Bold Helvetica-Bold 
%%BoundingBox: 91 311 521 480

%%EndDocument
 GE 35 100 0 18810 49143 GB 
%%BeginDocument: lapidary/duplicating-b.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: Drawing Window 4
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Aug 11, 1993, 9:25 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 91 311 521 480
%%%Pages: 1
%%EndComments


/DefImage { % image-name font-name w h string => -
  20 dict begin
    /ImageString exch def /ImageHeight exch def /ImageWidth exch def
    /FontName exch def
    /ImageName exch def
    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def
    /Encoding [
      /image 255 { /.notdef } repeat
    ] def
    /BuildChar { % font char => -
      pop begin
        1 0
        0 0 1 1 setcachedevice
        gsave
          ImageWidth ImageHeight false
          [ ImageWidth 0 0 ImageHeight 0 0 ]
          {ImageString} imagemask
        grestore
      end
    } def
    ImageName currentdict definefont
    FontName exch
    ImageName ImageString
  end
  def def
} def


/FillPattern { % fgR fgG fgB [bgR bgG bgB] opaque? top font => -
  50 dict begin gsave
    /font exch def
    /top exch def
    /opaque? exch def
    /w font /ImageWidth get def
    /h font /ImageHeight get def
    font [w 0 0 h 0 0] makefont setfont
    pathbbox
    /y1 exch def /x1 exch def
    /y0 exch def /x0 exch def
    clip
    opaque? {
      gsave
        setrgbcolor
        fill
      grestore
    } if
    newpath
    setrgbcolor
    /y0 y0 top sub h div floor h mul top add cvi def
    /x0 x0 w div floor w mul cvi def
    x0 y0 translate
    /W x1 x0 sub w div ceiling cvi 1 add def
    /H y1 y0 sub h div ceiling cvi def
    /s W string def
    H {
      0 0 moveto
      s show
      0 h translate
    } repeat
  grestore end
  newpath
} def


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
               % cap join dash thickness fill-color => -
    EllipseDict begin
        /fill-color exch def /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /endangle exch def /startangle exch def
        /yrad exch def  /xrad exch def /y exch def /x exch def
        /savematrix mtrx currentmatrix def
        % Draw the filling
        gsave
            newpath
            x y translate
            xrad thickness sub yrad thickness sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-color FillShape
            newpath
            x y translate
            xrad thickness 2 div sub yrad thickness 2 div sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-color
            0 % line-cap
            line-join dash-pattern thickness
            StrokeShape
        grestore
    end
} def

/RoundtanglePath { % left top width height radius => -
    /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
    /right l w add def  /bottom t h sub def
    l r add t moveto                         % origin
    right t right t r sub r arcto            % top side
    right bottom right r sub bottom r arcto  % right side
    l bottom l bottom r add r arcto          % bottom side
    l t l r add t r arcto                    % left side
    16 {pop} repeat  % each arcto accumulates 4 stack parameters
} def

/RoundtangleDict 27 dict def
/DrawRoundtangle { % left top width height radius line-color
                   % cap join dash thickness fill-color => -
    gsave RoundtangleDict begin
        /fill-color exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        
        % Draw filling
        newpath
        left thickness add top thickness sub
        width thickness 2 mul sub height thickness 2 mul sub
        radius thickness sub dup 0 lt { pop 0 } if RoundtanglePath
        fill-color FillShape

        left thickness 2 div add top thickness 2 div sub
        width thickness sub height thickness sub
        radius thickness 2 div sub dup 0 lt { pop 0 } if RoundtanglePath

        % Draw border
        line-color line-cap line-join dash-pattern thickness
        StrokeShape
    end grestore
} def


/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/PolylineDict 20 dict def
/DrawPolyline { % x1 y1 {{x y ...} ...} line-color
                % join cap dash thickness fill-color => -
    gsave PolylineDict begin
        /fill-color exch def  /thickness exch def  /dash-pattern exch def
        /line-join exch def  /line-cap exch def  /line-color exch def
        % Don't draw the path of the fill if the filling-style is null.
        fill-color null eq not {
                3 copy
                newpath
                3 1 roll moveto
                { aload length 2 idiv { lineto } repeat } forall
                fill-color FillShape
                } if

        newpath
        .5 -.5 translate

        % Stroke after every sub-array to avoid a limitcheck error
        2 index 2 index moveto
        { aload length 2 sub 2 idiv { lineto } repeat
        2 copy lineto
        line-color line-cap line-join dash-pattern thickness StrokeShape
        moveto
        } forall

        currentpoint
        3 -1 roll sub abs .01 lt
        3 1 roll sub abs .01 lt and {
          0 0 rlineto closepath
        } if

        line-color line-cap line-join dash-pattern
        thickness
%       dup -1 ne { .5 add } if % fudge outline width thicker
        StrokeShape

    end grestore
} def

/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawGenericWindowFrame { % label left top w h
                          % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def

/image-1 /image-1-font 4 4 <
00 00 00 00>
DefImage


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale
19 408 translate

%
% Begin new window
%
gsave
0 0 430 169 ClipToRectangle
gsave
0 0 430 169 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
2 -23 translate
(Drawing Window 4) 0 0 426 144 2 23 2 2 DrawGenericWindowFrame
0 0 426 144 ClipToRectangle
gsave
[0 0 0] 0 0 [] 1 387 -69 391 -76 DrawLine
383 -71 {
  { 391 -67 383 -60 }
} [0 0 0] 0 0 [] 1 [0 0 0] DrawPolyline
12 -19 95 54 [0 0 0] 0 0 [] 1 null DrawRectangle
51 -36 -53 17 21 false [0 0 0] [1 1 1] (24) 18 /Times-Bold DrawText
106 -19 29 54 [0 0 0] 0 0 [] 1 null DrawRectangle
[0 0 0] 0 0 [] 1 163 -99 120 -46 DrawLine
161 -88 {
  { 153 -94 163 -99 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
228 -19 153 82 [0 0 0] 0 0 [4 4] 1 null DrawRectangle
12.5 -19.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
89.5 -19.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
164.5 -19.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
164.5 -60.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
164.5 -100.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
89.5 -100.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
12.5 -100.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
12.5 -60.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Times-Bold Helvetica-Bold 
%%BoundingBox: 91 311 521 480

%%EndDocument
 GE 35 100 0 33860 49143 GB 
%%BeginDocument: lapidary/duplicating-c.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: Drawing Window 4
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Aug 11, 1993, 9:26 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 91 311 521 480
%%%Pages: 1
%%EndComments


/DefImage { % image-name font-name w h string => -
  20 dict begin
    /ImageString exch def /ImageHeight exch def /ImageWidth exch def
    /FontName exch def
    /ImageName exch def
    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def
    /Encoding [
      /image 255 { /.notdef } repeat
    ] def
    /BuildChar { % font char => -
      pop begin
        1 0
        0 0 1 1 setcachedevice
        gsave
          ImageWidth ImageHeight false
          [ ImageWidth 0 0 ImageHeight 0 0 ]
          {ImageString} imagemask
        grestore
      end
    } def
    ImageName currentdict definefont
    FontName exch
    ImageName ImageString
  end
  def def
} def


/FillPattern { % fgR fgG fgB [bgR bgG bgB] opaque? top font => -
  50 dict begin gsave
    /font exch def
    /top exch def
    /opaque? exch def
    /w font /ImageWidth get def
    /h font /ImageHeight get def
    font [w 0 0 h 0 0] makefont setfont
    pathbbox
    /y1 exch def /x1 exch def
    /y0 exch def /x0 exch def
    clip
    opaque? {
      gsave
        setrgbcolor
        fill
      grestore
    } if
    newpath
    setrgbcolor
    /y0 y0 top sub h div floor h mul top add cvi def
    /x0 x0 w div floor w mul cvi def
    x0 y0 translate
    /W x1 x0 sub w div ceiling cvi 1 add def
    /H y1 y0 sub h div ceiling cvi def
    /s W string def
    H {
      0 0 moveto
      s show
      0 h translate
    } repeat
  grestore end
  newpath
} def


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
               % cap join dash thickness fill-color => -
    EllipseDict begin
        /fill-color exch def /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /endangle exch def /startangle exch def
        /yrad exch def  /xrad exch def /y exch def /x exch def
        /savematrix mtrx currentmatrix def
        % Draw the filling
        gsave
            newpath
            x y translate
            xrad thickness sub yrad thickness sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-color FillShape
            newpath
            x y translate
            xrad thickness 2 div sub yrad thickness 2 div sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-color
            0 % line-cap
            line-join dash-pattern thickness
            StrokeShape
        grestore
    end
} def

/RoundtanglePath { % left top width height radius => -
    /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
    /right l w add def  /bottom t h sub def
    l r add t moveto                         % origin
    right t right t r sub r arcto            % top side
    right bottom right r sub bottom r arcto  % right side
    l bottom l bottom r add r arcto          % bottom side
    l t l r add t r arcto                    % left side
    16 {pop} repeat  % each arcto accumulates 4 stack parameters
} def

/RoundtangleDict 27 dict def
/DrawRoundtangle { % left top width height radius line-color
                   % cap join dash thickness fill-color => -
    gsave RoundtangleDict begin
        /fill-color exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        
        % Draw filling
        newpath
        left thickness add top thickness sub
        width thickness 2 mul sub height thickness 2 mul sub
        radius thickness sub dup 0 lt { pop 0 } if RoundtanglePath
        fill-color FillShape

        left thickness 2 div add top thickness 2 div sub
        width thickness sub height thickness sub
        radius thickness 2 div sub dup 0 lt { pop 0 } if RoundtanglePath

        % Draw border
        line-color line-cap line-join dash-pattern thickness
        StrokeShape
    end grestore
} def


/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/PolylineDict 20 dict def
/DrawPolyline { % x1 y1 {{x y ...} ...} line-color
                % join cap dash thickness fill-color => -
    gsave PolylineDict begin
        /fill-color exch def  /thickness exch def  /dash-pattern exch def
        /line-join exch def  /line-cap exch def  /line-color exch def
        % Don't draw the path of the fill if the filling-style is null.
        fill-color null eq not {
                3 copy
                newpath
                3 1 roll moveto
                { aload length 2 idiv { lineto } repeat } forall
                fill-color FillShape
                } if

        newpath
        .5 -.5 translate

        % Stroke after every sub-array to avoid a limitcheck error
        2 index 2 index moveto
        { aload length 2 sub 2 idiv { lineto } repeat
        2 copy lineto
        line-color line-cap line-join dash-pattern thickness StrokeShape
        moveto
        } forall

        currentpoint
        3 -1 roll sub abs .01 lt
        3 1 roll sub abs .01 lt and {
          0 0 rlineto closepath
        } if

        line-color line-cap line-join dash-pattern
        thickness
%       dup -1 ne { .5 add } if % fudge outline width thicker
        StrokeShape

    end grestore
} def

/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawGenericWindowFrame { % label left top w h
                          % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def

/image-1 /image-1-font 4 4 <
00 00 00 00>
DefImage


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale
19 408 translate

%
% Begin new window
%
gsave
0 0 430 169 ClipToRectangle
gsave
0 0 430 169 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
2 -23 translate
(Drawing Window 4) 0 0 426 144 2 23 2 2 DrawGenericWindowFrame
0 0 426 144 ClipToRectangle
gsave
[0 0 0] 0 0 [] 1 393 -72 397 -79 DrawLine
389 -74 {
  { 397 -70 389 -63 }
} [0 0 0] 0 0 [] 1 [0 0 0] DrawPolyline
12 -19 95 54 [0 0 0] 0 0 [] 1 null DrawRectangle
51 -36 -53 17 21 false [0 0 0] [1 1 1] (24) 18 /Times-Bold DrawText
106 -19 29 54 [0 0 0] 0 0 [] 1 null DrawRectangle
[0 0 0] 0 0 [] 1 163 -99 120 -46 DrawLine
161 -88 {
  { 153 -94 163 -99 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
228 -19 95 54 [0 0 0] 0 0 [] 1 null DrawRectangle
267 -36 -53 17 21 false [0 0 0] [1 1 1] (24) 18 /Times-Bold DrawText
322 -19 29 54 [0 0 0] 0 0 [] 1 null DrawRectangle
[0 0 0] 0 0 [] 1 379 -99 336 -46 DrawLine
377 -88 {
  { 369 -94 379 -99 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
228.5 -19.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
305.5 -19.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
380.5 -19.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
380.5 -60.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
380.5 -100.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
305.5 -100.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
228.5 -100.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
228.5 -60.5 8.5 8.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Times-Bold Helvetica-Bold 
%%BoundingBox: 91 311 521 480

%%EndDocument
 GE 14220 40010 MT
(\050a\051)SH
29520 XM
(\050b\051)SH
43920 XM
(\050c\051)SH
/Times-Bold SF
6120 41762 MT
(Figure 1-7:)SH
/Times-Roman SF
12366 XM
(Objects can be duplicated or instanced by clicking on one of the selection handles)
198 W( \050a\051,)197 W
11893 42958 MT
(dragging the new object to the appropriate location \050b\051, and dropping it \050c\051.)SH
46800 50 6120 44910 UL
ES
%%Page: 545 8
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 2.1)
SH( File)1800 W
51386 XM
(Page 545)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(2. Editor Menu Commands)SH
11 /Times-Roman AF
8280 10524 MT
(The commands in Lapidary's pull)
133 W( down menu \050Figure 1-2\051 provide a set of commands for saving and)134 W
8280 11720 MT
(restoring objects, manipulating aggregadgets, applying constraints, and editing properties.)SH
14 /Times-Bold AF
8280 15538 MT
(2.1. File)SH
11 /Symbol AF
10249 17116 MT
(\267)SH
/Courier SF
11030 XM
(Save Gadget:)7 W
/Times-Roman SF
19239 XM
(Objects are written out using)7 W
/Courier SF
32257 XM
(opal:write-gadget)SH
/Times-Roman SF
(, so the file contains)6 W
11030 18312 MT
(a series of create-instance)
76 W( calls. The value in the object's)77 W
/Courier SF
37114 XM
(:known-as)SH
/Times-Roman SF
43406 XM
(slot is passed as the)77 W
11030 19508 MT
(name parameter to create-instance. For)
408 W( example, if the object's)407 W
/Courier SF
42702 XM
(:known-as)SH
/Times-Roman SF
49324 XM
(slot is)407 W
/Courier SF
11030 20704 MT
(:white-rect)SH
/Times-Roman SF
18565 XM
(and the object is a rectangle, the first line of the create-instance would be)SH
8 /Courier AF
12950 21869 MT
(\050create-instance 'white-rect opal:rectangle\051)SH
11 /Times-Roman AF
11030 23763 MT
(Primary selections are saved before secondary)
164 W( selections, so it is best to make prototypes)165 W
11030 24959 MT
(primary selections and instances of these prototypes secondary selections.)
43 W( The)
359 W( user can also)42 W
11030 26155 MT
(save an entire window by having no objects selected and typing in the string that)
16 W( appears in a)17 W
11030 27351 MT
(window's title bar or icon in the corresponding area of the dialog box.)SH
11030 29245 MT
(Lapidary looks at each saved object to)
68 W( determine if the object has any links which Lapidary)67 W
11030 30441 MT
(thinks should be)
54 W( parameters. If Lapidary finds any such links, it pops up the link parameters)55 W
11030 31637 MT
(dialog box and asks the user if these links should be)
50 W( made into parameters \050see Section 2.3\051.)49 W
11030 32833 MT
(Pressing either the)32 W
/Courier SF
19528 XM
(OK)SH
/Times-Roman SF
21156 XM
(or)SH
/Courier SF
22380 XM
(CANCEL)SH
/Times-Roman SF
26648 XM
(buttons in the link parameters dialog box allows Lapidary)33 W
11030 34029 MT
(to continue. The)17 W
/Courier SF
18535 XM
(CANCEL)SH
/Times-Roman SF
22787 XM
(button in the link parameters dialog box will not)
17 W( cause Lapidary to)16 W
11030 35225 MT
(discontinue the save operation, it will simply cause Lapidary to proceed to the next object.)SH
7 10 0 10260 70721 GB 
%%BeginDocument: lapidary/saving.PS
%!PS-Adobe-2.0
%%Title: Save File
%%Creator: Make-PS-File -- Garnet Version 2.0
%%CreationDate: May 14, 1992, 2:13 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 148 302 464 490
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
76 -230 translate
gsave
0 648 316 188 ClipToRectangle
0 0 translate
gsave
9 640 625 94 20 0 false 0 0 0 false 0 0 0 false (Saving...) 18 /Courier-BoldOblique DrawText
20 606 595 60 14 0 false 0 0 0 false 0 0 0 false (Filename:) 12 /Courier-Bold DrawText
85 608 220 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
20 576 565 151 14 0.50 false 0 0 0 false 0 0 0 false (Top-level Gadget name:) 12 /Courier-Bold DrawText
176 578 129 18 0.50 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
185 576 565 77 14 0.50 false 0 0 0 false 0 0 0 false (TEMP-GADGET) 12 /Courier DrawText
20 516 505 89 14 0.50 false 0 0 0 false 0 0 0 false (Window Title:) 12 /Courier-Bold DrawText
114 518 191 18 0.50 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
20 486 475 89 14 0 false 0 0 0 false 0 0 0 false (Package name:) 12 /Courier-Bold DrawText
114 488 191 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
123 486 475 28 14 0 false 0 0 0 false 0 0 0 false (USER) 12 /Courier DrawText
193 637 51 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
188 642 51 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
191 639 45 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
207 637 626 13 14 0 false 0 0 0 false 0 0 0 false (OK) 12 /Courier DrawText
254 637 51 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
249 642 51 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
252 639 45 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
254 637 626 41 14 0 false 0 0 0 false 0 0 0 false (Cancel) 12 /Courier DrawText
134 543 20 20 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
129 548 20 20 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
132 545 14 14 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
20 543 532 104 14 0 false 0 0 0 false 0 0 0 false (Export Gadgets?) 12 /Courier-Bold DrawText
grestore

grestore

0 648 316 188 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold /Courier-BoldOblique 
%%BoundingBox: 148 302 464 490

%%EndDocument
 GE /Times-Bold SF
8280 51333 MT
(Figure 2-1:)SH
/Times-Roman SF
14053 XM
(Save file dialog box)SH
/Symbol SF
10249 53409 MT
(\267)SH
/Courier SF
11030 XM
(Load Gadget:)215 W
/Times-Roman SF
19655 XM
(Requests the name of a file and then)
215 W( loads it \050Figure 2-2\051.  Lapidary)216 W
11030 54605 MT
(expects a variable named *Garnet-Objects-Just-Created* to be initialized in the)
37 W( user package)36 W
11030 55801 MT
(which contains the names of the)
178 W( created objects. If the user selects the option)179 W
/Courier SF
47710 XM
(Replace)SH
11030 56997 MT
(existing objects)45 W
/Times-Roman SF
(, then the objects in the)
45 W( loaded file will replace the current objects in)44 W
11030 58193 MT
(the drawing window. If the user)
110 W( selects the option)111 W
/Courier SF
34262 XM
(Add to existing objects)111 W
/Times-Roman SF
(, then)111 W
11030 59389 MT
(the objects in the file will be added to the existing objects in the window.)SH
5 10 0 16380 85185 GB 
%%BeginDocument: lapidary/loading.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: Read File
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Sep 21, 1993, 3:18 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 146 301 466 492
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
               % cap join dash thickness fill-color => -
    EllipseDict begin
        /fill-color exch def /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /endangle exch def /startangle exch def
        /yrad exch def  /xrad exch def /y exch def /x exch def
        /savematrix mtrx currentmatrix def
        % Draw the filling
        gsave
            newpath
            x y translate
            xrad thickness sub yrad thickness sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-color FillShape
            newpath
            x y translate
            xrad thickness 2 div sub yrad thickness 2 div sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-color
            0 % line-cap
            line-join dash-pattern thickness
            StrokeShape
        grestore
    end
} def

/DefImage { % image-name font-name w h string => -
  20 dict begin
    /ImageString exch def /ImageHeight exch def /ImageWidth exch def
    /FontName exch def
    /ImageName exch def
    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def
    /Encoding [
      /image 255 { /.notdef } repeat
    ] def
    /BuildChar { % font char => -
      pop begin
        1 0
        0 0 1 1 setcachedevice
        gsave
          ImageWidth ImageHeight false
          [ ImageWidth 0 0 ImageHeight 0 0 ]
          {ImageString} imagemask
        grestore
      end
    } def
    ImageName currentdict definefont
    FontName exch
    ImageName ImageString
  end
  def def
} def


/FillPattern { % fgR fgG fgB [bgR bgG bgB] opaque? top font => -
  50 dict begin gsave
    /font exch def
    /top exch def
    /opaque? exch def
    /w font /ImageWidth get def
    /h font /ImageHeight get def
    font [w 0 0 h 0 0] makefont setfont
    pathbbox
    /y1 exch def /x1 exch def
    /y0 exch def /x0 exch def
    clip
    opaque? {
      gsave
        setrgbcolor
        fill
      grestore
    } if
    newpath
    setrgbcolor
    /y0 y0 top sub h div floor h mul top add cvi def
    /x0 x0 w div floor w mul cvi def
    x0 y0 translate
    /W x1 x0 sub w div ceiling cvi 1 add def
    /H y1 y0 sub h div ceiling cvi def
    /s W string def
    H {
      0 0 moveto
      s show
      0 h translate
    } repeat
  grestore end
  newpath
} def


/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawGenericWindowFrame { % label left top w h
                          % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def

/image-1 /image-1-font 4 4 <
00 00 00 00>
DefImage


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale
74 420 translate

%
% Begin new window
%
gsave
0 0 320 191 ClipToRectangle
gsave
0 0 320 191 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
2 -23 translate
(Read File) 0 0 316 166 2 23 2 2 DrawGenericWindowFrame
0 0 316 166 ClipToRectangle
gsave
9 -8 -23 105 20 false [0 0 0] [1 1 1] (Reading...) 18 /Courier-BoldOblique DrawText
20 -42 -53 60 14 false [0 0 0] [1 1 1] (Filename:) 12 /Courier-Bold DrawText
85 -40 220 18 [0 0 0] 0 0 [] 1 null DrawRectangle
20 -70 -81 75 14 false [0 0 0] [1 1 1] (Windowname:) 12 /Courier-Bold DrawText
100 -68 205 18 [0 0 0] 0 0 [] 1 null DrawRectangle
109 -70 -81 111 14 false [0 0 0] [1 1 1] (Drawing Window 3) 12 /Courier DrawText
193 -11 51 24 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
188 -6 51 24 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
191 -9 45 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
207 -11 -22 13 14 false [0 0 0] [1 1 1] (OK) 12 /Courier DrawText
254 -11 51 24 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
249 -6 51 24 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
252 -9 45 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
254 -11 -22 41 14 false [0 0 0] [1 1 1] (Cancel) 12 /Courier DrawText
211.5 -112.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
206.5 -107.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
206.5 -107.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
29 -103 -114 161 14 false [0 0 0] [1 1 1] (Add to existing objects) 12 /Courier-Bold DrawText
211.5 -145.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
206.5 -140.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
206.5 -140.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
22 -136 -147 168 14 false [0 0 0] [1 1 1] (Replace existing objects) 12 /Courier-Bold DrawText
206.5 -140.5 5.5 5.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold /Courier-BoldOblique Helvetica-Bold 
%%BoundingBox: 146 301 466 492

%%EndDocument
 GE /Times-Bold SF
8280 71887 MT
(Figure 2-2:)SH
/Times-Roman SF
14053 XM
(Load file dialog box)SH
ES
%%Page: 546 9
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 546)
SH( Lapidary)830 W
37315 XM
(Editor Menu Commands)
SH( Chapter)
1550 W( 2)SH
46800 50 6120 4486 UL
11 /Symbol AF
8089 8080 MT
(\267)SH
/Courier SF
8870 XM
(Add Gadget:)3 W
/Times-Roman SF
16411 XM
(Users may create objects in the lisp listener)
3 W( and then link them to a Lapidary)2 W
8870 9276 MT
(window.)SH
/Courier SF
13563 XM
(add-gadget)SH
/Times-Roman SF
20600 XM
(pops up a dialog box that requests the name of the object to)
162 W( be)163 W
8870 10472 MT
(added and the name of a window to place the object in \050Figure 2-3\051.  The name)
39 W( of the object)38 W
8870 11668 MT
(should be the one used in the call to)
164 W( create-instance.  For example, the object created by)165 W
/Courier SF
8870 12864 MT
(\050create-instance 'my-gadget)
398 W( opal:rectangle\051)397 W
/Times-Roman SF
38717 XM
(is named ``my-gadget''.)397 W
8870 14060 MT
(The name of the window should be the name that appears in the window's title)
71 W( bar or in its)72 W
8870 15256 MT
(icon.)SH
7 10 0 8100 50332 GB 
%%BeginDocument: lapidary/add-gadget.PS
%!PS-Adobe-2.0
%%Title: Add Gadget
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jul 22, 1992, 3:41 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 148 309 464 484
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def
        /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub
          width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
76 -236 translate
gsave
0 648 316 175 ClipToRectangle
0 0 translate
gsave
9 640 625 172 20 0 false 0 0 0 false 0 0 0 false (Adding Gadget...) 18 /Courier-BoldOblique DrawText
20 606 595 74 14 0 false 0 0 0 false 0 0 0 false (Gadgetname:) 12 /Courier-Bold DrawText
99 608 206 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
20 578 567 75 14 0 false 0 0 0 false 0 0 0 false (Windowname:) 12 /Courier-Bold DrawText
100 580 205 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
109 578 567 111 14 0 false 0 0 0 false 0 0 0 false (Drawing Window 1) 12 /Courier DrawText
36.5 526.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
31.5 531.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
31.5 531.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawEllipse
53 536 525 104 14 0 false 0 0 0 false 0 0 0 false (add this object) 12 /Courier DrawText
36.5 493.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
31.5 498.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
31.5 498.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawEllipse
53 503 492 209 14 0 false 0 0 0 false 0 0 0 false (add an instance of this object) 12 /Courier DrawText
31.5 531.5 5.5 5.5 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
193 637 51 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
188 642 51 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
191 639 45 18 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRectangle
207 637 626 13 14 0 false 0 0 0 false 0 0 0 false (OK) 12 /Courier DrawText
254 637 51 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
249 642 51 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
252 639 45 18 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRectangle
254 637 626 41 14 0 false 0 0 0 false 0 0 0 false (Cancel) 12 /Courier DrawText
grestore

grestore

0 648 316 175 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold /Courier-BoldOblique 
%%BoundingBox: 148 309 464 484

%%EndDocument
 GE /Times-Bold SF
6120 30454 MT
(Figure 2-3:)SH
/Times-Roman SF
11893 XM
(Add gadget dialog box)SH
8870 32405 MT
(The user has)
204 W( the option of either adding the object itself or an instance of the object to)203 W
8870 33601 MT
(Lapidary. If the user decides to add the object itself and)
112 W( the object has instances, Lapidary)113 W
8870 34797 MT
(will pop up a warning box indicating that editing this object)
364 W( could have unintended)363 W
8870 35993 MT
(consequences on other applications that use this object. For example, it is better)
128 W( to add an)129 W
8870 37189 MT
(instance of a garnet gadgets text button rather than the actual button defined in the)
100 W( gadgets)99 W
8870 38385 MT
(package, since editing the actual button is likely)
172 W( to cause Lapidary to fail \050Lapidary uses)173 W
8870 39581 MT
(garnet gadgets text buttons\051.)SH
/Symbol SF
8089 41475 MT
(\267)SH
/Courier SF
8870 XM
(Quit:)SH
/Times-Roman SF
12498 XM
(Allows the user to)
53 W( exit Lapidary. It is suggested that before rebooting Lapidary, that)52 W
8870 42671 MT
(the user create a new lisp listener and reload Garnet.)SH
14 /Times-Bold AF
6120 46489 MT
(2.2. Edit)SH
11 /Symbol AF
8089 48067 MT
(\267)SH
/Courier SF
8870 XM
(Make Instance:)125 W
/Times-Roman SF
18635 XM
(Creates an instance of the selected object.  The selected object is the)126 W
8870 49263 MT
(new object's prototype.)SH
/Symbol SF
8089 51157 MT
(\267)SH
/Courier SF
8870 XM
(Make Copy:)74 W
/Times-Roman SF
15893 XM
(Creates a copy of the selected object.  The value of each slot in the)
74 W( selected)73 W
8870 52353 MT
(object will be copied)
46 W( to the new-object.  The new object will have the same prototype as the)47 W
8870 53549 MT
(selected object, and thus will inherit from the selected object's prototype rather than)
207 W( the)206 W
8870 54745 MT
(selected object.)SH
/Symbol SF
8089 56639 MT
(\267)SH
/Courier SF
8870 XM
(Delete Object:)SH
/Times-Roman SF
18385 XM
(Destroys all selected objects.)SH
/Symbol SF
8089 58533 MT
(\267)SH
/Courier SF
8870 XM
(Delete Window:)63 W
/Times-Roman SF
18511 XM
(Pops up a dialog box)
63 W( and asks the user to input the name of a window)64 W
8870 59729 MT
(that appears in a window's title bar or icon.  Lapidary then destroys the window.)SH
14 /Times-Bold AF
6120 63547 MT
(2.3. Properties)SH
11 /Times-Roman AF
6120 64743 MT
(Lapidary contains)
24 W( four property menus that control an object's line-style, filling-style, draw-function, and)23 W
6120 65939 MT
(font. The)
349 W( line-style and filling-style menus \050Figures)
37 W( 2-4 and 2-5\051 provide a set of commonly used styles,)38 W
6120 67135 MT
(an ``Other'' option which prompts the user for the name of a style, and a ``Constraint'')
19 W( option that allows)18 W
6120 68331 MT
(the user to enter a custom constraint that defines the style \050see Section 3 for)
9 W( information on how to enter a)10 W
6120 69527 MT
(custom constraint\051.)
108 W( The)
489 W( color button pops up a color menu that allows the user to select a pre-defined)107 W
6120 70723 MT
(color or create a new color by mixing hues of red, green, and blue.)SH
ES
%%Page: 547 10
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 2.3)
SH( Properties)1800 W
51386 XM
(Page 547)SH
46800 50 8280 4486 UL
11 /Symbol AF
10249 8080 MT
(\267)SH
/Courier SF
11030 XM
(Filling Style:)SH
/Times-Roman SF
20545 XM
(Allows the user to set the filling style of selected objects.)SH
7 10 0 10260 45956 GB 
%%BeginDocument: lapidary/filling-properties.PS
%!PS-Adobe-2.0
%%Title: Filling Properties
%%Creator: Make-PS-File -- Garnet Version 2.0
%%CreationDate: May 14, 1992, 5:30 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 181 269 431 524
%%%Pages: 1
%%EndComments


/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
109 -196 translate
gsave
0 648 250 255 ClipToRectangle
0 0 translate
gsave
10 638 623 117 20 0 false 0 0 0 false 0 0 0 false (Fill-Style:) 18 /Courier-BoldOblique DrawText
45 606 595 27 14 0 false 0 0 0 false 0 0 0 false (None) 12 /Courier DrawText
38 425 414 38 14 0 false 0 0 0 false 0 0 0 false (Other:) 12 /Courier DrawText
93 428 142 18 0.50 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
125 593 51 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
120 598 51 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
123 595 45 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
139 593 582 13 14 0 false 0 0 0 false 0 0 0 false (OK) 12 /Courier DrawText
186 593 51 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
181 598 51 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
184 595 45 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
186 593 582 41 14 0 false 0 0 0 false 0 0 0 false (Cancel) 12 /Courier DrawText
150 523 55 35 0 0 0 0 false 0 0 [] 1 0 1.00 1.00 1.00 true DrawRectangle
165 638 55 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
141 555 79 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
136 560 79 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
139 557 73 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
141 555 544 69 14 0 false 0 0 0 false 0 0 0 false (Constraint) 12 /Courier DrawText
155 468 57 30 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
150 473 57 30 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
153 470 51 24 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
162 465 454 33 14 0 false 0 0 0 false 0 0 0 false (Color) 12 /Courier DrawText
30 608 55 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 578 55 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
30 548 55 20 0 0 0 0 false 0 0 [] 1 0.75 0 0 0 false DrawRectangle
30 518 55 20 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
30 488 55 20 0 0 0 0 false 0 0 [] 1 0.25 0 0 0 false DrawRectangle
30 458 55 20 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
30 428 55 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
28 610 59 24 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore

grestore

0 648 250 255 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-BoldOblique 
%%BoundingBox: 181 269 431 524

%%EndDocument
 GE /Times-Bold SF
8280 28878 MT
(Figure 2-4:)SH
/Times-Roman SF
14053 XM
(Filling styles that can be attached to objects in Lapidary)SH
/Symbol SF
10249 30954 MT
(\267)SH
/Courier SF
11030 XM
(Line Style:)SH
/Times-Roman SF
18565 XM
(Allows the user to set the line style of selected objects.)SH
7 10 0 10260 70370 GB 
%%BeginDocument: lapidary/line-properties.PS
%!PS-Adobe-2.0
%%Title: Line Properties
%%Creator: Make-PS-File -- Garnet Version 2.0
%%CreationDate: May 14, 1992, 5:29 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 181 246 431 546
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
109 -174 translate
gsave
0 648 250 300 ClipToRectangle
0 0 translate
gsave
125 593 51 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
120 598 51 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
123 595 45 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
139 593 582 13 14 0 false 0 0 0 false 0 0 0 false (OK) 12 /Courier DrawText
186 593 51 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
181 598 51 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
184 595 45 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
186 593 582 41 14 0 false 0 0 0 false 0 0 0 false (Cancel) 12 /Courier DrawText
10 638 623 117 20 0 false 0 0 0 false 0 0 0 false (Line-Style:) 18 /Courier-BoldOblique DrawText
141 555 79 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
136 560 79 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
139 557 73 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
141 555 544 69 14 0 false 0 0 0 false 0 0 0 false (Constraint) 12 /Courier DrawText
150 498 55 35 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
155 443 57 30 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
150 448 57 30 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
153 445 51 24 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
162 440 429 33 14 0 false 0 0 0 false 0 0 0 false (Color) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 80 598 35 598 DrawLine
0 0 0 0 false 0 0 [] 2 80 568 35 568 DrawLine
0 0 0 0 false 0 0 [] 4 80 538 35 538 DrawLine
0 0 0 0 false 0 0 [] 8 80 508 35 508 DrawLine
45 486 475 27 14 0 false 0 0 0 false 0 0 0 false (None) 12 /Courier DrawText
38 395 384 38 14 0 false 0 0 0 false 0 0 0 false (Other:) 12 /Courier DrawText
0 0 0 0 false 0 0 [1 1] 1 80 448 35 448 DrawLine
0 0 0 0 false 0 0 [4 4] 1 80 418 35 418 DrawLine
30 608 55 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 578 55 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 548 55 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 518 55 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 488 55 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 458 55 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 428 55 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 398 55 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
93 398 142 18 0.50 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
28 490 59 24 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore

grestore

0 648 250 300 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier-BoldOblique /Courier 
%%BoundingBox: 181 246 431 546

%%EndDocument
 GE /Times-Bold SF
8280 54902 MT
(Figure 2-5:)SH
/Times-Roman SF
14053 XM
(Line styles that can be attached to objects in Lapidary)SH
/Symbol SF
10249 56978 MT
(\267)SH
/Courier SF
11030 XM
(Draw Function:)127 W
/Times-Roman SF
20799 XM
(Allows the user to set the draw function)
127 W( of all selected objects.  The)128 W
11030 58174 MT
(Opal chapter describes draw functions in more detail.)SH
/Symbol SF
10249 60068 MT
(\267)SH
/Courier SF
11030 XM
(Name Object:)29 W
/Times-Roman SF
19283 XM
(Requests a name from the user \050no quotes should be used\051, converts it to a)28 W
11030 61264 MT
(keyword, and stores it in the :known-as slot of the selected object)
68 W( \050if there is more than one)69 W
11030 62460 MT
(selected object, Lapidary will rename the last object the user selected; name object does)
68 W( not)67 W
11030 63656 MT
(distinguish between primary and secondary selections\051.  Lapidary also creates a link)
14 W( with this)15 W
11030 64852 MT
(name in the object's parent that points)
143 W( to this object.  When an object is saved, it will be)142 W
11030 66048 MT
(assigned this name.)SH
/Symbol SF
10249 67942 MT
(\267)SH
/Courier SF
11030 XM
(List Properties:)290 W
/Times-Roman SF
22445 XM
(Brings up a)
290 W( property list for horizontal and vertical lists. This)291 W
11030 69138 MT
(property list allows the user to modify any of the customizable slots)
63 W( of an aggrelist. The list)62 W
11030 70334 MT
(of customizable slots can be found in the Aggrelists chapter.)SH
ES
%%Page: 548 11
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 548)
SH( Lapidary)830 W
37315 XM
(Editor Menu Commands)
SH( Chapter)
1550 W( 2)SH
46800 50 6120 4486 UL
11 SS 
7 10 0 7997 45420 GB 
%%BeginDocument: lapidary/draw-function.PS
%!PS-Adobe-2.0
%%Title: draw-function
%%Creator: Make-PS-File -- Garnet Version 2.0
%%CreationDate: May 14, 1992, 12:53 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 88 246 523 546
%%%Pages: 1
%%EndComments


/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
16 -174 translate
gsave
0 648 435 300 ClipToRectangle
0 0 translate
gsave
13 538 409 169 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
58.5 570.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
53.5 575.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
53.5 575.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
10 580 569 27 14 0 false 0 0 0 false 0 0 0 false (Copy) 12 /Courier DrawText
123.5 570.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
118.5 575.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
118.5 575.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
82 580 569 20 14 0 false 0 0 0 false 0 0 0 false (Xor) 12 /Courier DrawText
188.5 570.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
183.5 575.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
183.5 575.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
146 580 569 21 14 0 false 0 0 0 false 0 0 0 false (And) 12 /Courier DrawText
253.5 570.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
248.5 575.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
248.5 575.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
220 580 569 12 14 0 false 0 0 0 false 0 0 0 false (Or) 12 /Courier DrawText
53.5 575.5 5.5 5.5 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
131.5 501.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
126.5 506.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
126.5 506.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
77 511 500 33 14 0 false 0 0 0 false 0 0 0 false (Clear) 12 /Courier DrawText
259.5 501.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
254.5 506.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
254.5 506.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
218 511 500 20 14 0 false 0 0 0 false 0 0 0 false (Set) 12 /Courier DrawText
387.5 501.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
382.5 506.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
382.5 506.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
332 511 500 34 14 0 false 0 0 0 false 0 0 0 false (No-Op) 12 /Courier DrawText
131.5 468.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
126.5 473.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
126.5 473.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
20 478 467 90 14 0 false 0 0 0 false 0 0 0 false (Copy-Inverted) 12 /Courier DrawText
259.5 468.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
254.5 473.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
254.5 473.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
197 478 467 41 14 0 false 0 0 0 false 0 0 0 false (Invert) 12 /Courier DrawText
387.5 468.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
382.5 473.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
382.5 473.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
331 478 467 35 14 0 false 0 0 0 false 0 0 0 false (Equiv) 12 /Courier DrawText
131.5 435.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
126.5 440.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
126.5 440.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
82 445 434 28 14 0 false 0 0 0 false 0 0 0 false (Nand) 12 /Courier DrawText
259.5 435.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
254.5 440.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
254.5 440.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
218 445 434 20 14 0 false 0 0 0 false 0 0 0 false (Nor) 12 /Courier DrawText
387.5 435.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
382.5 440.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
382.5 440.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
282 445 434 84 14 0 false 0 0 0 false 0 0 0 false (And-Inverted) 12 /Courier DrawText
131.5 402.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
126.5 407.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
126.5 407.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
34 412 401 76 14 0 false 0 0 0 false 0 0 0 false (And-Reverse) 12 /Courier DrawText
259.5 402.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
254.5 407.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
254.5 407.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
162 412 401 76 14 0 false 0 0 0 false 0 0 0 false (Or-Inverted) 12 /Courier DrawText
387.5 402.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
382.5 407.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
382.5 407.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
298 412 401 68 14 0 false 0 0 0 false 0 0 0 false (Or-Reverse) 12 /Courier DrawText
10 633 611 155 28 0 false 0 0 0 false 0 0 0 false (Draw Function) 24 /Times-BoldItalic DrawText
45 550 52 24 0 0 0 0 false 0 0 [] -1 1 1.00 1.00 1.00 true DrawRectangle
50 546 535 40 14 0 false 0 0 0 false 0 0 0 false (Others) 12 /Courier DrawText
202 630 51 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
197 635 51 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
200 632 45 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
216 630 619 13 14 0 false 0 0 0 false 0 0 0 false (OK) 12 /Courier DrawText
263 630 51 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
258 635 51 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
261 632 45 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
266 630 619 35 14 0 false 0 0 0 false 0 0 0 false (Apply) 12 /Courier DrawText
324 630 51 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
319 635 51 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
322 632 45 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
324 630 619 41 14 0 false 0 0 0 false 0 0 0 false (Cancel) 12 /Courier DrawText
grestore

grestore

0 648 435 300 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Times-BoldItalic /Courier 
%%BoundingBox: 88 246 523 546

%%EndDocument
 GE /Times-Bold SF
6120 29952 MT
(Figure 2-6:)SH
/Times-Roman SF
11893 XM
(Draw functions that can be attached to objects in Lapidary)SH
/Symbol SF
8089 32028 MT
(\267)SH
/Courier SF
8870 XM
(Text Properties:)157 W
/Times-Roman SF
20019 XM
(Allows the user to choose a standard Opal font, to request a font)158 W
8870 33224 MT
(from one of the directories on the user's)
251 W( font path, to request a font from an arbitrary)250 W
8870 34420 MT
(directory, or to enter a)
26 W( custom constraint that determines the font \050Figure 2-7\051.  It also allows)27 W
8870 35616 MT
(the user to enter a custom constraint that determines the string of a text object.)SH
7 10 0 8100 77762 GB 
%%BeginDocument: lapidary/text-properties.PS
%!PS-Adobe-2.0
%%Title: text properties
%%Creator: Make-PS-File -- Garnet Version 2.0
%%CreationDate: May 14, 1992, 12:58 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 206 540 585
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.9957447 0.9957447 scale

%
% Begin new window
%
0 -136 translate
gsave
0 651 470 380 ClipToRectangle
0 0 translate
gsave
10 641 619 163 28 0 false 0 0 0 false 0 0 0 false (Text-Properties) 24 /Times-BoldItalic DrawText
402 636 44 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
397 641 44 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
400 638 38 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
413 636 625 13 14 0 false 0 0 0 false 0 0 0 false (OK) 12 /Courier DrawText
20 597 427 250 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 604 42 14 0 0 0 0 false 0 0 [] -1 1 1.00 1.00 1.00 true DrawRectangle
35 604 593 32 14 0 false 0 0 0 false 0 0 0 false (:font) 12 /Courier-Bold DrawText
42 584 573 97 14 0 false 0 0 0 false 0 0 0 false (Standard Fonts) 12 /Courier-Bold DrawText
62 559 548 42 14 0 false 0 0 0 false 0 0 0 false (Family) 12 /Courier-Bold DrawText
172.5 549.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
167.5 554.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
167.5 554.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
118 559 548 33 14 0 false 0 0 0 false 0 0 0 false (Serif) 12 /Courier DrawText
278.5 549.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
273.5 554.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
273.5 554.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
189 559 548 68 14 0 false 0 0 0 false 0 0 0 false (Sans-Serif) 12 /Courier DrawText
351.5 549.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
346.5 554.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
346.5 554.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
295 559 548 35 14 0 false 0 0 0 false 0 0 0 false (Fixed) 12 /Courier DrawText
346.5 554.5 5.5 5.5 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
62 527 516 27 14 0 false 0 0 0 false 0 0 0 false (Size) 12 /Courier-Bold DrawText
158.5 517.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
153.5 522.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
153.5 522.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
103 527 516 34 14 0 false 0 0 0 false 0 0 0 false (Small) 12 /Courier DrawText
238.5 517.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
233.5 522.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
233.5 522.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
175 527 516 42 14 0 false 0 0 0 false 0 0 0 false (Medium) 12 /Courier DrawText
310.5 517.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
305.5 522.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
305.5 522.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
255 527 516 34 14 0 false 0 0 0 false 0 0 0 false (Large) 12 /Courier DrawText
417.5 517.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
412.5 522.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
412.5 522.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
327 527 516 69 14 0 false 0 0 0 false 0 0 0 false (Very-Large) 12 /Courier DrawText
233.5 522.5 5.5 5.5 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
62 495 484 27 14 0 false 0 0 0 false 0 0 0 false (Face) 12 /Courier-Bold DrawText
159.5 485.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
154.5 490.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
154.5 490.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
103 495 484 35 14 0 false 0 0 0 false 0 0 0 false (Roman) 12 /Courier DrawText
237.5 485.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
232.5 490.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
232.5 490.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
176 495 484 40 14 0 false 0 0 0 false 0 0 0 false (Italic) 12 /Courier DrawText
303.5 485.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
298.5 490.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
298.5 490.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
254 495 484 28 14 0 false 0 0 0 false 0 0 0 false (Bold) 12 /Courier DrawText
417.5 485.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
412.5 490.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
412.5 490.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
320 495 484 76 14 0 false 0 0 0 false 0 0 0 false (Bold-Italic) 12 /Courier DrawText
154.5 490.5 5.5 5.5 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
42 465 454 97 14 0 false 0 0 0 false 0 0 0 false (Font From File) 12 /Courier-Bold DrawText
62 445 434 62 14 0 false 0 0 0 false 0 0 0 false (Font-Name) 12 /Courier DrawText
129 447 100 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
166.5 403.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
161.5 408.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
161.5 408.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
26 413 402 119 14 0 false 0 0 0 false 0 0 0 false (Default Font Path) 12 /Courier DrawText
192 413 402 90 14 0 false 0 0 0 false 0 0 0 false (or  Font-Path) 12 /Courier DrawText
287 415 100 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
146.5 366.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
141.5 371.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
141.5 371.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
63 376 365 62 14 0 false 0 0 0 false 0 0 0 false (<Formula>) 12 /Courier-Bold DrawText
177 378 87 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
172 383 87 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
175 380 81 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
177 378 367 77 14 0 false 0 0 0 false 0 0 0 false (Unconstrain) 12 /Courier DrawText
20 331 427 49 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 338 57 14 0 0 0 0 false 0 0 [] -1 1 1.00 1.00 1.00 true DrawRectangle
35 338 327 47 14 0 false 0 0 0 false 0 0 0 false (:string) 12 /Courier-Bold DrawText
45 313 191 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
40 318 191 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
43 315 185 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
45 313 302 181 14 0 false 0 0 0 false 0 0 0 false (Generate Text from Formula) 12 /Courier DrawText
246 313 191 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
241 318 191 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
244 315 185 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
270 313 302 133 14 0 false 0 0 0 false 0 0 0 false (Remove Text Formula) 12 /Courier DrawText
grestore

grestore

0 651 470 380 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier-Bold /Courier /Times-BoldItalic 
%%BoundingBox: 72 206 540 585

%%EndDocument
 GE /Times-Bold SF
6120 65094 MT
(Figure 2-7:)SH
/Times-Roman SF
11893 XM
(Lapidary's text properties menu)SH
/Symbol SF
8089 67170 MT
(\267)SH
/Courier SF
8870 XM
(Parameters:)SH
/Times-Roman SF
16575 XM
(Allows the user to specify that one or)
170 W( more slots in an object should be)169 W
8870 68366 MT
(parameters \050Figure 2-8\051. A slot that is a parameter will have its)
17 W( value provided at run-time by)18 W
8870 69562 MT
(the application.  To create parameters,)
105 W( the user must make both a primary and a secondary)104 W
8870 70758 MT
(selection. The primary selection)
19 W( is the object whose slots are being made into parameters and)20 W
8870 71954 MT
(the secondary selection is the object that the parameters will retrieve their values from.)240 W
ES
%%Page: 549 12
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 2.3)
SH( Properties)1800 W
51386 XM
(Page 549)SH
46800 50 8280 4486 UL
11 SS 
11030 7955 MT
(Typically the secondary selection will be the top-level aggregadget that)
89 W( contains the object,)90 W
11030 9151 MT
(since the top-level aggregadget is)
53 W( the only object that the application should know about \050an)52 W
11030 10347 MT
(application should not be required to know the parts of an)
120 W( aggregadget\051. For example, if a)121 W
11030 11543 MT
(label text object belongs to an)
256 W( aggregadget, the user might make the label the primary)255 W
11030 12739 MT
(selection and the aggregadget the secondary selection.  If the object is already)
155 W( at the top-)156 W
11030 13935 MT
(level, then the object should be both the primary and secondary selection.)SH
8 10 0 7160 64091 GB 
%%BeginDocument: lapidary/parameters.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: Parameters
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Aug 11, 1993, 5:50 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 108 181 505 612
%%%Pages: 1
%%EndComments


/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/DefImage { % image-name font-name w h string => -
  20 dict begin
    /ImageString exch def /ImageHeight exch def /ImageWidth exch def
    /FontName exch def
    /ImageName exch def
    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def
    /Encoding [
      /image 255 { /.notdef } repeat
    ] def
    /BuildChar { % font char => -
      pop begin
        1 0
        0 0 1 1 setcachedevice
        gsave
          ImageWidth ImageHeight false
          [ ImageWidth 0 0 ImageHeight 0 0 ]
          {ImageString} imagemask
        grestore
      end
    } def
    ImageName currentdict definefont
    FontName exch
    ImageName ImageString
  end
  def def
} def


/FillPattern { % fgR fgG fgB [bgR bgG bgB] opaque? top font => -
  50 dict begin gsave
    /font exch def
    /top exch def
    /opaque? exch def
    /w font /ImageWidth get def
    /h font /ImageHeight get def
    font [w 0 0 h 0 0] makefont setfont
    pathbbox
    /y1 exch def /x1 exch def
    /y0 exch def /x0 exch def
    clip
    opaque? {
      gsave
        setrgbcolor
        fill
      grestore
    } if
    newpath
    setrgbcolor
    /y0 y0 top sub h div floor h mul top add cvi def
    /x0 x0 w div floor w mul cvi def
    x0 y0 translate
    /W x1 x0 sub w div ceiling cvi 1 add def
    /H y1 y0 sub h div ceiling cvi def
    /s W string def
    H {
      0 0 moveto
      s show
      0 h translate
    } repeat
  grestore end
  newpath
} def


/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawGenericWindowFrame { % label left top w h
                          % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def

/image-1 /image-1-font 4 4 <
00 00 00 00>
DefImage


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale
36 540 translate

%
% Begin new window
%
gsave
0 0 397 431 ClipToRectangle
gsave
0 0 397 431 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
2 -23 translate
(Parameters) 0 0 393 406 2 23 2 2 DrawGenericWindowFrame
0 0 393 406 ClipToRectangle
gsave
85 -362 51 24 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
80 -357 51 24 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
83 -360 45 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
99 -362 -373 13 14 false [0 0 0] [1 1 1] (OK) 12 /Courier DrawText
146 -362 51 24 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
141 -357 51 24 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
144 -360 45 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
146 -362 -373 41 14 false [0 0 0] [1 1 1] (Cancel) 12 /Courier DrawText
10 -10 -21 348 14 false [0 0 0] [1 1 1] (If a slot should be a parameter, enter the name of) 12 /Courier DrawText
10 -24 -35 350 14 false [0 0 0] [1 1 1] (the slot in the secondary selection that it should ) 12 /Courier DrawText
10 -38 -49 350 14 false [0 0 0] [1 1 1] (retrieve its value from. If you do not want a slot ) 12 /Courier DrawText
10 -52 -63 350 14 false [0 0 0] [1 1 1] (to be a parameter, just leave the text box next to ) 12 /Courier DrawText
10 -66 -77 357 14 false [0 0 0] [1 1 1] (it blank \050or make it blank it it currently contains ) 12 /Courier DrawText
10 -80 -91 128 14 false [0 0 0] [1 1 1] (the name of a slot.) 12 /Courier DrawText
10 -115 -126 32 14 false [0 0 0] [1 1 1] (:FONT) 12 /Courier DrawText
10 -143 -154 45 14 false [0 0 0] [1 1 1] (:STRING) 12 /Courier DrawText
10 -171 -182 73 14 false [0 0 0] [1 1 1] (:LINE-STYLE) 12 /Courier DrawText
10 -199 -210 95 14 false [0 0 0] [1 1 1] (:DRAW-FUNCTION) 12 /Courier DrawText
128 -115 -126 32 14 false [0 0 0] [1 1 1] (:font) 12 /Courier DrawText
122 -113 44 18 [0 0 0] 0 0 [] 1 null DrawRectangle
128 -143 -154 38 14 false [0 0 0] [1 1 1] (:value) 12 /Courier DrawText
122 -141 50 18 [0 0 0] 0 0 [] 1 null DrawRectangle
122 -169 15 18 [0 0 0] 0 0 [] 1 null DrawRectangle
122 -197 15 18 [0 0 0] 0 0 [] 1 null DrawRectangle
10 -234 -245 362 14 false [0 0 0] [1 1 1] (Select the following button to get a list of objects) 12 /Courier DrawText
10 -248 -259 342 14 false [0 0 0] [1 1 1] (that are referenced by the primary selection, and) 12 /Courier DrawText
10 -262 -273 363 14 false [0 0 0] [1 1 1] (which lapidary thinks should be parameters. If there) 12 /Courier DrawText
10 -276 -287 282 14 false [0 0 0] [1 1 1] (are no such objects, nothing will appear.) 12 /Courier DrawText
15 -314 113 24 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
10 -309 113 24 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
13 -312 107 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
15 -314 -325 103 14 false [0 0 0] [1 1 1] (link parameters) 12 /Courier DrawText
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier Helvetica-Bold 
%%BoundingBox: 108 181 505 612

%%EndDocument
 GE /Times-Bold SF
8280 51363 MT
(Figure 2-8:)SH
/Times-Roman SF
14053 XM
(Parameters dialog box)SH
11030 53314 MT
(To turn a slot into a parameter, select the text box next to the)
63 W( slot and enter the name of the)62 W
11030 54510 MT
(slot in)
51 W( the secondary selection that the slot should retrieve its value from.  In Figure 2-8, the)52 W
11030 55706 MT
(label's)SH
/Courier SF
14357 XM
(string)SH
/Times-Roman SF
18712 XM
(slot retrieves its value from list)
120 W( element's)119 W
/Courier SF
38033 XM
(value)SH
/Times-Roman SF
41727 XM
(slot, and the)119 W
/Courier SF
47706 XM
(font)SH
/Times-Roman SF
50740 XM
(slot)SH
11030 56902 MT
(retrieves its value from)
256 W( the list element's)257 W
/Courier SF
31063 XM
(font)SH
/Times-Roman SF
34235 XM
(slot. To make the slot no longer be a)257 W
11030 58098 MT
(parameter, make the slot's text box be blank.  Lapidary maintains a list of slots)
172 W( for each)171 W
11030 59294 MT
(objects that)
46 W( can be turned into parameters. If the user wants to parameterize a slot that is not)47 W
11030 60490 MT
(displayed in the parameters dialog box, the user can bring up C32)
40 W( and place a formula in the)39 W
11030 61686 MT
(desired slot that retrieves its value from the top-level aggregadget.)SH
11030 63580 MT
(The link parameters)
54 W( button in the parameters dialog box allows the user to specify links that)55 W
11030 64776 MT
(should be parameters.  Links are used by Lapidary-generated)
345 W( constraints to indirectly)344 W
11030 65972 MT
(reference other objects. For example, when the user creates a constraint that)
191 W( attaches the)192 W
11030 67168 MT
(endpoint of a)
181 W( line, say)180 W
/Courier SF
21952 XM
(arrow1)SH
/Times-Roman SF
26367 XM
(to a rectangle, say)180 W
/Courier SF
35302 XM
(rect1)SH
/Times-Roman SF
(, Lapidary generates a link in)180 W
/Courier SF
11030 68364 MT
(arrow1)SH
/Times-Roman SF
15473 XM
(that points to)208 W
/Courier SF
22119 XM
(rect1)SH
/Times-Roman SF
(. When a link references an object that is not part of the)209 W
11030 69560 MT
(primary selection's top-level aggregadget, Lapidary)
345 W( guesses that this link should be a)344 W
11030 70756 MT
(parameter and displays it in the link parameters dialog box \050Figure 2-9\051. For each)
63 W( such link,)64 W
11030 71952 MT
(Lapidary displays the value of the link, the slots)
182 W( that reference the link, and a parameter)181 W
ES
%%Page: 550 13
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 550)
SH( Lapidary)830 W
37315 XM
(Editor Menu Commands)
SH( Chapter)
1550 W( 2)SH
46800 50 6120 4486 UL
11 SS 
8 10 0 5040 51040 GB 
%%BeginDocument: lapidary/link-parameters.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: link parameters
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Aug 11, 1993, 6:00 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 243 540 548
%%%Pages: 1
%%EndComments


/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/DefImage { % image-name font-name w h string => -
  20 dict begin
    /ImageString exch def /ImageHeight exch def /ImageWidth exch def
    /FontName exch def
    /ImageName exch def
    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def
    /Encoding [
      /image 255 { /.notdef } repeat
    ] def
    /BuildChar { % font char => -
      pop begin
        1 0
        0 0 1 1 setcachedevice
        gsave
          ImageWidth ImageHeight false
          [ ImageWidth 0 0 ImageHeight 0 0 ]
          {ImageString} imagemask
        grestore
      end
    } def
    ImageName currentdict definefont
    FontName exch
    ImageName ImageString
  end
  def def
} def


/FillPattern { % fgR fgG fgB [bgR bgG bgB] opaque? top font => -
  50 dict begin gsave
    /font exch def
    /top exch def
    /opaque? exch def
    /w font /ImageWidth get def
    /h font /ImageHeight get def
    font [w 0 0 h 0 0] makefont setfont
    pathbbox
    /y1 exch def /x1 exch def
    /y0 exch def /x0 exch def
    clip
    opaque? {
      gsave
        setrgbcolor
        fill
      grestore
    } if
    newpath
    setrgbcolor
    /y0 y0 top sub h div floor h mul top add cvi def
    /x0 x0 w div floor w mul cvi def
    x0 y0 translate
    /W x1 x0 sub w div ceiling cvi 1 add def
    /H y1 y0 sub h div ceiling cvi def
    /s W string def
    H {
      0 0 moveto
      s show
      0 h translate
    } repeat
  grestore end
  newpath
} def


/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawGenericWindowFrame { % label left top w h
                          % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def

/image-1 /image-1-font 4 4 <
00 00 00 00>
DefImage


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.67 0.67 scale
0 714 translate

%
% Begin new window
%
gsave
0 0 702 457 ClipToRectangle
gsave
0 0 702 457 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
2 -23 translate
(link parameters) 0 0 698 432 2 23 2 2 DrawGenericWindowFrame
0 0 698 432 ClipToRectangle
gsave
476 -15 51 24 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
471 -10 51 24 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
474 -13 45 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
490 -15 -26 13 14 false [0 0 0] [1 1 1] (OK) 12 /Courier DrawText
537 -15 51 24 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
532 -10 51 24 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
535 -13 45 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
537 -15 -26 41 14 false [0 0 0] [1 1 1] (Cancel) 12 /Courier DrawText
10 -78 -89 621 14 false [0 0 0] [1 1 1] (Some of the slots in the object reference objects that might be parameters. These objects) 12 /Courier DrawText
10 -92 -103 642 14 false [0 0 0] [1 1 1] (are listed below, along with the slots that reference them. If you make any of these objects) 12 /Courier DrawText
10 -106 -117 656 14 false [0 0 0] [1 1 1] (into parameters, Lapidary will create formulas that cause the slots to retrieve the parameters) 12 /Courier DrawText
10 -120 -131 303 14 false [0 0 0] [1 1 1] (from the object labeled 'parameters object'.) 12 /Courier DrawText
10 -148 -159 651 14 false [0 0 0] [1 1 1] (If you want to see the object labeled 'object:', select the object's name with the left mouse ) 12 /Courier DrawText
10 -162 -173 367 14 false [0 0 0] [1 1 1] (button and the object will be flashed on the display.) 12 /Courier DrawText
10 -190 -201 678 14 false [0 0 0] [1 1 1] (If you want to make an object a parameter, enter the parameter name in the blank box next to each) 12 /Courier DrawText
10 -204 -215 665 14 false [0 0 0] [1 1 1] (object. This name must be a slot name \050e.g., :string\051. If the user has already provided a name, ) 12 /Courier DrawText
10 -218 -229 192 14 false [0 0 0] [1 1 1] (Lapidary puts it in the box.) 12 /Courier DrawText
10 -246 -257 657 14 false [0 0 0] [1 1 1] (If you do not want an object to be a parameter, just leave its parameter box blank \050or make it) 12 /Courier DrawText
10 -260 -271 297 14 false [0 0 0] [1 1 1] (blank if Lapidary has put a name in there\051.) 12 /Courier DrawText
10 -288 -299 658 14 false [0 0 0] [1 1 1] (If you want to see one of the referenced objects, select the object's name with the left mouse ) 12 /Courier DrawText
10 -302 -313 367 14 false [0 0 0] [1 1 1] (button and the object will be flashed on the display.) 12 /Courier DrawText
10 -330 -341 514 14 false [0 0 0] [1 1 1] (For more information on this operation, see the Lapidary reference manual.) 12 /Courier DrawText
10 -15 -30 72 20 false [0 0 0] [1 1 1] (object:) 18 /Courier-Bold DrawText
10 -39 -54 193 20 false [0 0 0] [1 1 1] (parameters object:) 18 /Courier-Bold DrawText
91 -15 -30 361 20 false [0 0 0] [1 1 1] (TRANSPARENT-THIN-ARROW-LINE-25038) 18 /Courier-Bold DrawText
212 -39 -54 361 20 false [0 0 0] [1 1 1] (TRANSPARENT-THIN-ARROW-LINE-25038) 18 /Courier-Bold DrawText
369 -388 -399 58 14 false [0 0 0] [1 1 1] (:from-obj) 12 /Courier DrawText
363 -386 100 18 [0 0 0] 0 0 [] 1 null DrawRectangle
369 -411 -422 44 14 false [0 0 0] [1 1 1] (:to-obj) 12 /Courier DrawText
363 -409 100 18 [0 0 0] 0 0 [] 1 null DrawRectangle
10 -386 -397 258 14 false [0 0 0] [1 1 1] (TRANSPARENT-THIN-LINE-RECTANGLE-25026) 12 /Courier DrawText
10 -410 -421 258 14 false [0 0 0] [1 1 1] (TRANSPARENT-THIN-LINE-RECTANGLE-25028) 12 /Courier DrawText
284 -386 -397 55 14 false [0 0 0] [1 1 1] ( :X1 :Y1) 12 /Courier DrawText
284 -410 -421 55 14 false [0 0 0] [1 1 1] ( :X2 :Y2) 12 /Courier DrawText
10 -363 -374 140 14 false [0 0 0] [1 1 1] (object referenced by) 12 /Courier-Bold DrawText
287 -363 -374 34 14 false [0 0 0] [1 1 1] (slots) 12 /Courier-Bold DrawText
358 -363 -374 98 14 false [0 0 0] [1 1 1] (parameter name) 12 /Courier-Bold DrawText
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier-Bold /Courier Helvetica-Bold 
%%BoundingBox: 72 243 540 548

%%EndDocument
 GE /Times-Bold SF
6120 33352 MT
(Figure 2-9:)SH
/Times-Roman SF
11893 XM
(Link parameters dialog box)SH
8870 35303 MT
(name, if any, that the)
21 W( user has assigned to this link. The user can change this parameter name)22 W
8870 36499 MT
(by editing it, or can indicate that this link should not be a parameter by making)
18 W( the parameter)17 W
8870 37695 MT
(name blank.)SH
8870 39589 MT
(To make a slot depend on an :items list in an aggrelist, make any object in the aggrelist)
48 W( be a)49 W
8870 40785 MT
(primary selection and make the aggrelist be the secondary selection.)
42 W( Then enter :items in the)41 W
8870 41981 MT
(labeled box for any)
96 W( slot on the parameters menu that should get its value from :items.  For)97 W
8870 43177 MT
(example, suppose the prototype object for)
9 W( a list is a text object and the string and font slots of)8 W
8870 44373 MT
(the text object should retrieve their values from the aggrelist's)82 W
/Courier SF
37304 XM
(:items)SH
/Times-Roman SF
41621 XM
(slot. To do this the)82 W
8870 45569 MT
(user makes the aggrelist the secondary selection and one of the text objects in the aggrelist a)46 W
8870 46765 MT
(primary selection. The)
45 W( user then selects the)46 W
/Courier SF
28494 XM
(parameters)SH
/Times-Roman SF
35415 XM
(option, which causes Lapidary to)46 W
8870 47961 MT
(pop up the parameters)
240 W( menu. Typing :items in the type-in fields next to the)239 W
/Courier SF
45428 XM
(font)SH
/Times-Roman SF
48582 XM
(and)SH
/Courier SF
8870 49157 MT
(string)SH
/Times-Roman SF
13173 XM
(slots creates the necessary formulas that link these)
68 W( slots to the)69 W
/Courier SF
41388 XM
(:items)SH
/Times-Roman SF
45692 XM
(slot in the)69 W
8870 50353 MT
(aggrelist \050Figure 2-10\051. The :items slot of the)
132 W( aggrelist will now contain a list of the form)131 W
8870 51549 MT
(\050\050string1 font1\051 \050string2 font2\051...\050stringN fontN\051\051.)SH
8870 53443 MT
(If the prototype object is an aggregadget \050such as a labeled box that)
46 W( contains a rectangle and)47 W
8870 54639 MT
(a piece of text\051, then any of the parts of the aggregadget, and the)
26 W( aggregadget itself, can have)25 W
8870 55835 MT
(slots that depend on the aggrelist's :items slot. This is)
5 W( done by parameterizing the parts one at)6 W
8870 57031 MT
(a time. For example, if the string slot of the text object)
221 W( and the filling-style slot of the)220 W
8870 58227 MT
(rectangle should be parameters, the user could first select)
92 W( the rectangle and parameterize it,)93 W
8870 59423 MT
(then select the text object and parameterize it. Lapidary does not follow)
42 W( any easily described)41 W
8870 60619 MT
(rules in constructing the :items list \050e.g., the string and font values could easily)
130 W( have been)131 W
8870 61815 MT
(reversed in the above)
74 W( list\051, so users should look at the :items list Lapidary constructs before)73 W
8870 63011 MT
(writing their own.)SH
8870 64905 MT
(If a slotname besides :items \050e.g., :string\051 is entered in a)
48 W( type-in field, then the slot is treated)49 W
8870 66101 MT
(as an ordinary parameter, and all items in the list will have a formula that accesses)
12 W( this slot in)11 W
8870 67297 MT
(the aggrelist. For example, if a list consists of rectangles, and)
73 W( the rectangles should all have)74 W
8870 68493 MT
(the line-style that is passed to)
79 W( the aggrelist, then the user would select one of the rectangles)78 W
8870 69689 MT
(and enter the an appropriate name, such as)35 W
/Courier SF
28115 XM
(:line-style)SH
/Times-Roman SF
(, next)
35 W( to the :line-style slot of the)36 W
8870 70885 MT
(rectangle.)SH
ES
%%Page: 551 14
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 2.4)
SH( Arrange)1800 W
51386 XM
(Page 551)SH
46800 50 8280 4486 UL
11 SS 
8 10 0 7160 56160 GB 
%%BeginDocument: lapidary/ParamItems.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: Parameters
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Sep 21, 1993, 3:28 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 108 181 505 612
%%%Pages: 1
%%EndComments


/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/DefImage { % image-name font-name w h string => -
  20 dict begin
    /ImageString exch def /ImageHeight exch def /ImageWidth exch def
    /FontName exch def
    /ImageName exch def
    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def
    /Encoding [
      /image 255 { /.notdef } repeat
    ] def
    /BuildChar { % font char => -
      pop begin
        1 0
        0 0 1 1 setcachedevice
        gsave
          ImageWidth ImageHeight false
          [ ImageWidth 0 0 ImageHeight 0 0 ]
          {ImageString} imagemask
        grestore
      end
    } def
    ImageName currentdict definefont
    FontName exch
    ImageName ImageString
  end
  def def
} def


/FillPattern { % fgR fgG fgB [bgR bgG bgB] opaque? top font => -
  50 dict begin gsave
    /font exch def
    /top exch def
    /opaque? exch def
    /w font /ImageWidth get def
    /h font /ImageHeight get def
    font [w 0 0 h 0 0] makefont setfont
    pathbbox
    /y1 exch def /x1 exch def
    /y0 exch def /x0 exch def
    clip
    opaque? {
      gsave
        setrgbcolor
        fill
      grestore
    } if
    newpath
    setrgbcolor
    /y0 y0 top sub h div floor h mul top add cvi def
    /x0 x0 w div floor w mul cvi def
    x0 y0 translate
    /W x1 x0 sub w div ceiling cvi 1 add def
    /H y1 y0 sub h div ceiling cvi def
    /s W string def
    H {
      0 0 moveto
      s show
      0 h translate
    } repeat
  grestore end
  newpath
} def


/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawGenericWindowFrame { % label left top w h
                          % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def

/image-1 /image-1-font 4 4 <
00 00 00 00>
DefImage


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale
36 540 translate

%
% Begin new window
%
gsave
0 0 397 431 ClipToRectangle
gsave
0 0 397 431 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
2 -23 translate
(Parameters) 0 0 393 406 2 23 2 2 DrawGenericWindowFrame
0 0 393 406 ClipToRectangle
gsave
85 -362 51 24 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
80 -357 51 24 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
83 -360 45 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
99 -362 -373 13 14 false [0 0 0] [1 1 1] (OK) 12 /Courier DrawText
146 -362 51 24 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
141 -357 51 24 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
144 -360 45 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
146 -362 -373 41 14 false [0 0 0] [1 1 1] (Cancel) 12 /Courier DrawText
10 -10 -21 348 14 false [0 0 0] [1 1 1] (If a slot should be a parameter, enter the name of) 12 /Courier DrawText
10 -24 -35 350 14 false [0 0 0] [1 1 1] (the slot in the secondary selection that it should ) 12 /Courier DrawText
10 -38 -49 350 14 false [0 0 0] [1 1 1] (retrieve its value from. If you do not want a slot ) 12 /Courier DrawText
10 -52 -63 350 14 false [0 0 0] [1 1 1] (to be a parameter, just leave the text box next to ) 12 /Courier DrawText
10 -66 -77 357 14 false [0 0 0] [1 1 1] (it blank \050or make it blank it it currently contains ) 12 /Courier DrawText
10 -80 -91 128 14 false [0 0 0] [1 1 1] (the name of a slot.) 12 /Courier DrawText
10 -115 -126 32 14 false [0 0 0] [1 1 1] (:FONT) 12 /Courier DrawText
10 -143 -154 45 14 false [0 0 0] [1 1 1] (:STRING) 12 /Courier DrawText
10 -171 -182 73 14 false [0 0 0] [1 1 1] (:LINE-STYLE) 12 /Courier DrawText
10 -199 -210 95 14 false [0 0 0] [1 1 1] (:DRAW-FUNCTION) 12 /Courier DrawText
128 -115 -126 38 14 false [0 0 0] [1 1 1] (:items) 12 /Courier DrawText
122 -113 50 18 [0 0 0] 0 0 [] 1 null DrawRectangle
128 -143 -154 38 14 false [0 0 0] [1 1 1] (:items) 12 /Courier DrawText
122 -141 50 18 [0 0 0] 0 0 [] 1 null DrawRectangle
122 -169 15 18 [0 0 0] 0 0 [] 1 null DrawRectangle
122 -197 15 18 [0 0 0] 0 0 [] 1 null DrawRectangle
10 -234 -245 362 14 false [0 0 0] [1 1 1] (Select the following button to get a list of objects) 12 /Courier DrawText
10 -248 -259 342 14 false [0 0 0] [1 1 1] (that are referenced by the primary selection, and) 12 /Courier DrawText
10 -262 -273 363 14 false [0 0 0] [1 1 1] (which lapidary thinks should be parameters. If there) 12 /Courier DrawText
10 -276 -287 282 14 false [0 0 0] [1 1 1] (are no such objects, nothing will appear.) 12 /Courier DrawText
15 -314 113 24 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
10 -309 113 24 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
13 -312 107 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
15 -314 -325 103 14 false [0 0 0] [1 1 1] (link parameters) 12 /Courier DrawText
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier Helvetica-Bold 
%%BoundingBox: 108 181 505 612

%%EndDocument
 GE /Times-Bold SF
8280 43432 MT
(Figure 2-10:)SH
/Times-Roman SF
14603 XM
(Parameters dialog box for an Aggrelist)SH
14 /Times-Bold AF
8280 47250 MT
(2.4. Arrange)SH
11 /Symbol AF
10249 48828 MT
(\267)SH
/Courier SF
11030 XM
(Bring to Front:)46 W
/Times-Roman SF
21343 XM
(Brings the selected objects to the front of their)
46 W( aggregadget \050i.e., they)45 W
11030 50024 MT
(will cover all other objects in their aggregadget\051.  If multiple objects are selected, it)
SH( brings the)1 W
11030 51220 MT
(objects to the front in their current order.)SH
/Symbol SF
10249 53114 MT
(\267)SH
/Courier SF
11030 XM
(Send to Back:)23 W
/Times-Roman SF
19954 XM
(Sends the selected objects to the back of their aggregadget)
23 W( \050i.e., they will)22 W
11030 54310 MT
(be covered by)
30 W( all other objects in their aggregadget\051. If multiple objects are selected, it sends)31 W
11030 55506 MT
(the objects to the back in their current order.)SH
/Symbol SF
10249 57400 MT
(\267)SH
/Courier SF
11030 XM
(Make Aggregadget:)242 W
/Times-Roman SF
23009 XM
(Creates a)
242 W( new aggregadget and adds all selected objects \050both)241 W
11030 58596 MT
(primary and secondary selections\051)
167 W( to it.  The selected objects must initially belong to the)168 W
11030 59792 MT
(same aggregadget or else Lapidary will print an error message)
62 W( and abort the operation.  The)61 W
/Courier SF
11030 60988 MT
(:left)SH
/Times-Roman SF
14870 XM
(and)SH
/Courier SF
16998 XM
(:top)SH
/Times-Roman SF
20178 XM
(slots of the objects added to)
265 W( the aggregadget are constrained to the)266 W
11030 62184 MT
(aggregadget unless they were already constrained \050if the object is a line, the)26 W
/Courier SF
44964 XM
(:x1)SH
/Times-Roman SF
(,)SH
/Courier SF
47520 XM
(:y1)SH
/Times-Roman SF
(,)SH
/Courier SF
50075 XM
(:x2)SH
/Times-Roman SF
(,)SH
11030 63380 MT
(and)SH
/Courier SF
12931 XM
(:y2)SH
/Times-Roman SF
15224 XM
(slots are constrained\051.)
38 W( The)
352 W( constraints tie the objects to the northwest corner of the)39 W
11030 64576 MT
(aggregadget and)
45 W( use absolute offsets based on the current position of the objects.  Thus if an)44 W
11030 65772 MT
(object is 10 pixels from the left side of the aggregadget)
15 W( \050the bounding box of the aggregadget)16 W
11030 66968 MT
(is computed from the initial bounding boxes of the)
57 W( objects\051, the object's)56 W
/Courier SF
43697 XM
(:left)SH
/Times-Roman SF
47328 XM
(slot will be)56 W
11030 68164 MT
(constrained to be)
78 W( 10 pixels from the left side of the aggregadget.  If the object is a line, the)79 W
11030 69360 MT
(object's endpoints will be tied to the aggregadget's northwest corner by absolute fixed)275 W
11030 70556 MT
(offsets. These)
971 W( constraints cause the objects to move with the aggregadget when the)348 W
11030 71752 MT
(aggregadgets moves.  If the user wants different constraints)
123 W( to apply, the user can primary)122 W
ES
%%Page: 552 15
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 552)
SH( Lapidary)830 W
37315 XM
(Editor Menu Commands)
SH( Chapter)
1550 W( 2)SH
46800 50 6120 4486 UL
11 SS 
8870 7955 MT
(select an object, secondary)
188 W( select the aggregadget, and attach a different constraint.  The)189 W
8870 9151 MT
(aggregadget derives its width and height from its children, so the :width and)
65 W( :height slots of)64 W
8870 10347 MT
(the children are not constrained to the aggregadget.  Because the)
113 W( aggregadget computes its)114 W
8870 11543 MT
(width and height from its children, it is not permitted to resize an aggregadget.)SH
/Symbol SF
8089 13437 MT
(\267)SH
/Courier SF
8870 XM
(Ungroup:)SH
/Times-Roman SF
15125 XM
(Destroys selected aggregadgets and moves their components to)
700 W( the)699 W
8870 14633 MT
(aggregadgets' parents.)SH
14 /Times-Bold AF
6120 18451 MT
(2.5. Constraints)SH
11 /Symbol AF
8089 20029 MT
(\267)SH
/Courier SF
8870 XM
(Line Constraints:)SH
/Times-Roman SF
20365 XM
(Brings up the line constraints dialog box \050Figure 3-2\051.)SH
/Symbol SF
8089 21923 MT
(\267)SH
/Courier SF
8870 XM
(Box Constraints:)SH
/Times-Roman SF
19705 XM
(Brings up the box constraints dialog box \050Figure 3-1\051)SH
/Symbol SF
8089 23817 MT
(\267)SH
/Courier SF
8870 XM
(C32:)SH
/Times-Roman SF
11842 XM
(Brings up C32.)
57 W( Each primary and secondary selection is displayed in the spreadsheet,)58 W
8870 25013 MT
(and additional Lapidary objects can be displayed using the)38 W
/Courier SF
35269 XM
(Point to Object)38 W
/Times-Roman SF
45557 XM
(command.)SH
8870 26209 MT
(While Lapidary is running, only objects in Lapidary's drawing windows)
56 W( can be displayed in)57 W
8870 27405 MT
(the spreadsheet.)
335 W( Nothing will happen if the user attempts to execute the)334 W
/Courier SF
44556 XM
(Point to)334 W
8870 28601 MT
(Object)SH
/Times-Roman SF
13334 XM
(command on an)
229 W( object which is not in a Lapidary drawing window. The C32)230 W
8870 29797 MT
(chapter describes how to use C32 and)
245 W( Section 3.3 describes a number of modifications)244 W
8870 30993 MT
(Lapidary makes to C32.)SH
14 /Times-Bold AF
6120 34811 MT
(2.6. Other)SH
11 /Symbol AF
8089 36389 MT
(\267)SH
/Courier SF
8870 XM
(Interactors:)SH
/Times-Roman SF
17178 XM
(Displays a menu of interactors that the user can choose to look at.)
113 W( Once)114 W
8870 37585 MT
(the user selects an interactor, the information from that interactor)
151 W( will be displayed in the)150 W
8870 38781 MT
(appropriate interactor dialog box \050see Section 4\051 and the user is free to change)
9 W( it.  In addition,)10 W
8870 39977 MT
(menu items are)
82 W( provided for the five Garnet-defined interactor types: choice \050encompassing)81 W
8870 41173 MT
(both menu and button)
141 W( interactors\051, move/grow, two-point, text, and angle.  If the user has)142 W
8870 42369 MT
(selected a set of objects, then the interactors)
29 W( menu will contain all interactors associated with)28 W
8870 43565 MT
(these objects.)
107 W( Lapidary)
490 W( will display all interactors whose)108 W
/Courier SF
35378 XM
(:start-where)SH
/Times-Roman SF
43681 XM
(slot references)108 W
8870 44761 MT
(these objects, or whose)186 W
/Courier SF
20090 XM
(:feedback-obj)SH
/Times-Roman SF
29130 XM
(or)SH
/Courier SF
30506 XM
(:final-feedback-obj)SH
/Times-Roman SF
43506 XM
(points at these)185 W
8870 45957 MT
(objects. If)
409 W( no objects are selected, then the interactors)
67 W( menu will contain all interactors that)68 W
8870 47153 MT
(have been created in Lapidary.)SH
/Symbol SF
8089 49047 MT
(\267)SH
/Courier SF
8870 XM
(Clear Workspace:)147 W
/Times-Roman SF
19999 XM
(Deletes all objects from Lapidary)
147 W( but does not destroy any of the)146 W
8870 50243 MT
(drawing windows.)SH
14 /Times-Bold AF
6120 54061 MT
(2.7. Test and Build Radio Buttons)SH
11 /Symbol AF
8089 55639 MT
(\267)SH
/Courier SF
8870 XM
(Test:)SH
/Times-Roman SF
12753 XM
(Deactivates the Lapidary interactors)
308 W( that operate on the drawing windows and)309 W
8870 56835 MT
(activates all user-defined interactors. This allows the user)
105 W( to experiment with the look-and-)104 W
8870 58031 MT
(feel that the user has created.)SH
/Symbol SF
8089 59925 MT
(\267)SH
/Courier SF
8870 XM
(Build:)SH
/Times-Roman SF
13324 XM
(Deactivates all user-defined interactors)
219 W( and reactivates the Lapidary interactors,)220 W
8870 61121 MT
(allowing the user to modify the look-and-feel.)SH
ES
%%Page: 553 16
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 3.1)
SH( Box)
1800 W( Constraints)SH
51386 XM
(Page 553)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(3. Creating Constraints)SH
11 /Times-Roman AF
8280 10524 MT
(Lapidary provides two menus)
48 W( for creating constraints, one that deals with ``box'' constraints \050constraints)47 W
8280 11720 MT
(on non-line objects\051)
80 W( and one that deals with line constraints.  In addition, several of the property menus)81 W
8280 12916 MT
(provide a custom constraint option that allows the user to)
48 W( input a constraint that determines the property.)47 W
8280 14112 MT
(Each of the menus)
1 W( contains buttons labeled with tiny rectangular boxes that indicate how an object will be)2 W
8280 15308 MT
(positioned if the constraint associated with that button is chosen.  The rectangular)
11 W( boxes in the buttons are)10 W
8280 16504 MT
(colored black to indicate that)
179 W( the primary object is the object that will be constrained, and the white)180 W
8280 17700 MT
(rectangular boxes positioned at the)
66 W( four corners of the rectangle in the box constraint menu indicate that)65 W
8280 18896 MT
(the secondary selection is the object that will be referenced in the constraint.)SH
8280 21194 MT
(The Box and Line Constraint dialog boxes, can be used separately from Lapidary \050see section 3.4\051.)SH
8280 23492 MT
(The constraint menus can)
131 W( display the current position and size of a primary selection. By pressing the)132 W
/Courier SF
8280 24688 MT
(Show Constraints)58 W
/Times-Roman SF
19231 XM
(button in the constraint menus, the user can see what types of constraints are on)58 W
8280 25884 MT
(the slots of an object.)
186 W( If)
649 W( two objects are selected, Lapidary will display the types of the constraints)187 W
8280 27080 MT
(between the two objects.)SH
14 /Times-Bold AF
8280 30898 MT
(3.1. Box Constraints)SH
11 /Times-Roman AF
8280 32094 MT
(The box constraint menu allows constraints to be attached to)
14 W( the)13 W
/Courier SF
36995 XM
(:left)SH
/Times-Roman SF
(,)SH
/Courier SF
40858 XM
(:top)SH
/Times-Roman SF
(,)SH
/Courier SF
44061 XM
(:width)SH
/Times-Roman SF
(, and)13 W
/Courier SF
50460 XM
(:height)SH
/Times-Roman SF
8280 33290 MT
(of an object \050see Figure 3-1\051.  The user attaches constraints by first selecting the object)
46 W( to be constrained)47 W
8280 34486 MT
(\050a primary selection\051 and the object to be)
84 W( referenced in the constraint \050a secondary selection\051.  The user)83 W
8280 35682 MT
(then selects the appropriate buttons in)
66 W( the box constraint menu.  The possible constraints for the)67 W
/Courier SF
51780 XM
(:left)SH
/Times-Roman SF
8280 36878 MT
(slot are:)SH
/Symbol SF
10249 38456 MT
(\267)SH
/Times-Roman SF
11030 XM
(left-outside: The right side of the primary selection is)
258 W( aligned with the left side of the)259 W
11030 39652 MT
(secondary selection.)SH
/Symbol SF
10249 41546 MT
(\267)SH
/Times-Roman SF
11030 XM
(left-inside: The left)
20 W( side of the primary selection is aligned with the left side of the secondary)19 W
11030 42742 MT
(selection.)SH
/Symbol SF
10249 44636 MT
(\267)SH
/Times-Roman SF
11030 XM
(center: The center of the)
266 W( primary selection is aligned with the center of the secondary)267 W
11030 45832 MT
(selection.)SH
/Symbol SF
10249 47726 MT
(\267)SH
/Times-Roman SF
11030 XM
(right-inside: The right side of the primary selection is)
214 W( aligned with the right side of the)213 W
11030 48922 MT
(secondary selection.)SH
/Symbol SF
10249 50816 MT
(\267)SH
/Times-Roman SF
11030 XM
(right-outside: The left side of the)
217 W( primary selection is aligned with the right side of the)218 W
11030 52012 MT
(secondary selection.)SH
8280 54310 MT
(The possible constraints for the)SH
/Courier SF
22363 XM
(:top)SH
/Times-Roman SF
25278 XM
(slot are:)SH
/Symbol SF
10249 55888 MT
(\267)SH
/Times-Roman SF
11030 XM
(top-outside: The bottom)
198 W( side of the primary selection is aligned with the top side of the)197 W
11030 57084 MT
(secondary selection.)SH
/Symbol SF
10249 58978 MT
(\267)SH
/Times-Roman SF
11030 XM
(top-inside: The top side of the primary selection is aligned with)
30 W( the top side of the secondary)31 W
11030 60174 MT
(selection.)SH
/Symbol SF
10249 62068 MT
(\267)SH
/Times-Roman SF
11030 XM
(center: The center of the primary selection is aligned with the)
267 W( center of the secondary)266 W
11030 63264 MT
(selection.)SH
/Symbol SF
10249 65158 MT
(\267)SH
/Times-Roman SF
11030 XM
(bottom-inside: The bottom side of the primary selection)
5 W( is aligned with the bottom side of the)6 W
11030 66354 MT
(secondary selection.)SH
/Symbol SF
10249 68248 MT
(\267)SH
/Times-Roman SF
11030 XM
(bottom-outside: The top side of the primary selection is aligned with the bottom side of the)83 W
11030 69444 MT
(secondary selection.)SH
8280 71742 MT
(The only option for the)27 W
/Courier SF
18895 XM
(:width)SH
/Times-Roman SF
23158 XM
(slot is to constrain the width of the primary selection to the width of the)28 W
ES
%%Page: 554 17
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 554)
SH( Lapidary)830 W
38954 XM
(Creating Constraints)
SH( Chapter)
1550 W( 3)SH
46800 50 6120 4486 UL
46800 50 6120 8155 UL
11 SS 
7 10 0 8100 50561 GB 
%%BeginDocument: lapidary/box-constraint-menu.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: Untitled
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Jul 6, 1993, 2:43 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 211 540 581
%%%Pages: 1
%%EndComments


/PolylineDict 20 dict def
/DrawPolyline { % x1 y1 {{x y ...} ...} line-color
                % join cap dash thickness fill-color => -
    gsave PolylineDict begin
        /fill-color exch def  /thickness exch def  /dash-pattern exch def
        /line-join exch def  /line-cap exch def  /line-color exch def
        % Don't draw the path of the fill if the filling-style is null.
        fill-color null eq not {
                3 copy
                newpath
                3 1 roll moveto
                { aload length 2 idiv { lineto } repeat } forall
                fill-color FillShape
                } if

        newpath
        .5 -.5 translate

        % Stroke after every sub-array to avoid a limitcheck error
        2 index 2 index moveto
        { aload length 2 sub 2 idiv { lineto } repeat
        2 copy lineto
        line-color line-cap line-join dash-pattern thickness StrokeShape
        moveto
        } forall

        currentpoint
        3 -1 roll sub abs .01 lt
        3 1 roll sub abs .01 lt and {
          0 0 rlineto closepath
        } if

        line-color line-cap line-join dash-pattern
        thickness
%       dup -1 ne { .5 add } if % fudge outline width thicker
        StrokeShape

    end grestore
} def

/DefImage { % image-name font-name w h string => -
  20 dict begin
    /ImageString exch def /ImageHeight exch def /ImageWidth exch def
    /FontName exch def
    /ImageName exch def
    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def
    /Encoding [
      /image 255 { /.notdef } repeat
    ] def
    /BuildChar { % font char => -
      pop begin
        1 0
        0 0 1 1 setcachedevice
        gsave
          ImageWidth ImageHeight false
          [ ImageWidth 0 0 ImageHeight 0 0 ]
          {ImageString} imagemask
        grestore
      end
    } def
    ImageName currentdict definefont
    FontName exch
    ImageName ImageString
  end
  def def
} def


/FillPattern { % fgR fgG fgB [bgR bgG bgB] opaque? top font => -
  50 dict begin gsave
    /font exch def
    /top exch def
    /opaque? exch def
    /w font /ImageWidth get def
    /h font /ImageHeight get def
    font [w 0 0 h 0 0] makefont setfont
    pathbbox
    /y1 exch def /x1 exch def
    /y0 exch def /x0 exch def
    clip
    opaque? {
      gsave
        setrgbcolor
        fill
      grestore
    } if
    newpath
    setrgbcolor
    /y0 y0 top sub h div floor h mul top add cvi def
    /x0 x0 w div floor w mul cvi def
    x0 y0 translate
    /W x1 x0 sub w div ceiling cvi 1 add def
    /H y1 y0 sub h div ceiling cvi def
    /s W string def
    H {
      0 0 moveto
      s show
      0 h translate
    } repeat
  grestore end
  newpath
} def


/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
               % cap join dash thickness fill-color => -
    EllipseDict begin
        /fill-color exch def /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /endangle exch def /startangle exch def
        /yrad exch def  /xrad exch def /y exch def /x exch def
        /savematrix mtrx currentmatrix def
        % Draw the filling
        gsave
            newpath
            x y translate
            xrad thickness sub yrad thickness sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-color FillShape
            newpath
            x y translate
            xrad thickness 2 div sub yrad thickness 2 div sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-color
            0 % line-cap
            line-join dash-pattern thickness
            StrokeShape
        grestore
    end
} def

/RoundtanglePath { % left top width height radius => -
    /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
    /right l w add def  /bottom t h sub def
    l r add t moveto                         % origin
    right t right t r sub r arcto            % top side
    right bottom right r sub bottom r arcto  % right side
    l bottom l bottom r add r arcto          % bottom side
    l t l r add t r arcto                    % left side
    16 {pop} repeat  % each arcto accumulates 4 stack parameters
} def

/RoundtangleDict 27 dict def
/DrawRoundtangle { % left top width height radius line-color
                   % cap join dash thickness fill-color => -
    gsave RoundtangleDict begin
        /fill-color exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        
        % Draw filling
        newpath
        left thickness add top thickness sub
        width thickness 2 mul sub height thickness 2 mul sub
        radius thickness sub dup 0 lt { pop 0 } if RoundtanglePath
        fill-color FillShape

        left thickness 2 div add top thickness 2 div sub
        width thickness sub height thickness sub
        radius thickness 2 div sub dup 0 lt { pop 0 } if RoundtanglePath

        % Draw border
        line-color line-cap line-join dash-pattern thickness
        StrokeShape
    end grestore
} def


/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawGenericWindowFrame { % label left top w h
                          % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def

/image-1 /image-1-font 4 4 <
00 00 00 00>
DefImage


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.69 0.69 scale
0 736 translate

%
% Begin new window
%
gsave
0 0 676 535 ClipToRectangle
gsave
0 0 676 535 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
380 -396 translate
(Drawing Window 2) 0 0 294 137 2 23 2 2 DrawGenericWindowFrame
0 0 294 137 ClipToRectangle
gsave
49 -28 118 73 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
186 -28 57 24 [0 0 0] 0 0 [] 1 null DrawRectangle
183 -25 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
212 -25 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
239 -25 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
239 -37 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
239 -48 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
212 -48 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
183 -48 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
183 -37 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
46 -25 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
105 -25 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
163 -25 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
163 -62 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
163 -97 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
105 -97 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
46 -97 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
46 -62 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
grestore

grestore


%
% Begin new window
%
gsave
2 -23 translate
(box constraints) 0 0 375 510 2 23 2 2 DrawGenericWindowFrame
0 0 375 510 ClipToRectangle
gsave
10 -10 -27 169 21 false [0 0 0] [1 1 1] (Box Constraint Menu) 18 /Times-BoldItalic DrawText
217 -10 120 24 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
212 -5 120 24 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
215 -8 114 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
217 -10 -21 110 14 false [0 0 0] [1 1 1] (Show Constraints) 12 /Courier DrawText
347 -10 23 24 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
342 -5 23 24 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
345 -8 17 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
347 -10 -21 13 14 false [0 0 0] [1 1 1] (OK) 12 /Courier DrawText
200 -38 -55 31 21 false [0 0 0] [1 1 1] (:left) 18 /Times-BoldItalic DrawText
242 -43 -54 19 14 false [0 0 0] [1 1 1] (186) 12 /Courier DrawText
236 -41 31 18 [0 0 0] 0 0 [] 1 null DrawRectangle
195 -67 -78 41 14 false [0 0 0] [1 1 1] (offset) 12 /Courier DrawText
247 -67 -78 12 14 false [0 0 0] [1 1 1] (20) 12 /Courier DrawText
241 -65 30 18 [0 0 0] 0 0 [] 1 null DrawRectangle
142 -92 89 26 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
137 -87 89 26 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
140 -90 83 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
143 -93 -104 77 14 false [0 0 0] [1 1 1] (unconstrain) 12 /Courier DrawText
241 -92 89 26 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
236 -87 89 26 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
239 -90 83 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
250 -93 -104 61 14 false [0 0 0] [1 1 1] (customize) 12 /Courier DrawText
45 -169 -186 30 21 false [0 0 0] [1 1 1] (:top) 18 /Times-BoldItalic DrawText
86 -174 -185 12 14 false [0 0 0] [1 1 1] (28) 12 /Courier DrawText
80 -172 30 18 [0 0 0] 0 0 [] 1 null DrawRectangle
39 -198 -209 41 14 false [0 0 0] [1 1 1] (offset) 12 /Courier DrawText
91 -198 -209 5 14 false [0 0 0] [1 1 1] (0) 12 /Courier DrawText
85 -196 30 18 [0 0 0] 0 0 [] 1 null DrawRectangle
35 -223 89 26 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
30 -218 89 26 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
33 -221 83 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
36 -224 -235 77 14 false [0 0 0] [1 1 1] (unconstrain) 12 /Courier DrawText
35 -259 89 26 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
30 -254 89 26 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
33 -257 83 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
44 -260 -271 61 14 false [0 0 0] [1 1 1] (customize) 12 /Courier DrawText
[0 0 0] 0 0 [] 1 313 -317 180 -317 DrawLine
187 -320 {
  { 187 -314 180 -317 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
306 -314 {
  { 306 -320 313 -317 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
[0 0 0] 0 0 [] 1 246 -327 246 -337 DrawLine
242 -327 {
  { 250 -327 246 -317 }
} [0 0 0] 0 0 [] 1 [0 0 0] DrawPolyline
239 -341 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
235 -337 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
239 -341 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
242 -344 5 5 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
142 -364 -381 47 21 false [0 0 0] [1 1 1] (:width) 18 /Times-BoldItalic DrawText
200 -367 -378 13 14 false [0 0 0] [1 1 1] (57) 12 /Courier DrawText
194 -365 30 18 [0 0 0] 0 0 [] 1 null DrawRectangle
149 -391 -402 33 14 false [0 0 0] [1 1 1] (Scale) 12 /Courier DrawText
193 -391 -402 5 14 false [0 0 0] [1 1 1] (1) 12 /Courier DrawText
187 -389 30 18 [0 0 0] 0 0 [] 1 null DrawRectangle
131 -406 -417 69 14 false [0 0 0] [1 1 1] (Difference) 12 /Courier DrawText
131 -420 -431 61 14 false [0 0 0] [1 1 1] (in pixels) 12 /Courier DrawText
211 -413 -424 5 14 false [0 0 0] [1 1 1] (0) 12 /Courier DrawText
205 -411 30 18 [0 0 0] 0 0 [] 1 null DrawRectangle
141 -438 89 26 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
136 -433 89 26 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
139 -436 83 20 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
142 -439 -450 77 14 false [1 1 1] [1 1 1] (unconstrain) 12 /Courier DrawText
141 -474 89 26 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
136 -469 89 26 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
139 -472 83 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
150 -475 -486 61 14 false [0 0 0] [1 1 1] (customize) 12 /Courier DrawText
[0 0 0] 0 0 [] 1 321 -309 321 -176 DrawLine
318 -183 {
  { 324 -183 321 -176 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
324 -302 {
  { 318 -302 321 -309 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
[0 0 0] 0 0 [] 1 331 -243 341 -243 DrawLine
331 -246 {
  { 331 -240 321 -243 }
} [0 0 0] 0 0 [] 1 [0 0 0] DrawPolyline
345 -236 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
341 -232 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
345 -236 11 11 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
264 -362 -379 55 21 false [0 0 0] [1 1 1] (:height) 18 /Times-BoldItalic DrawText
330 -367 -378 12 14 false [0 0 0] [1 1 1] (24) 12 /Courier DrawText
324 -365 30 18 [0 0 0] 0 0 [] 1 null DrawRectangle
275 -391 -402 33 14 false [0 0 0] [1 1 1] (Scale) 12 /Courier DrawText
319 -391 -402 26 14 false [0 0 0] [1 1 1] (0.33) 12 /Courier DrawText
313 -389 38 18 [0 0 0] 0 0 [] 1 null DrawRectangle
257 -406 -417 69 14 false [0 0 0] [1 1 1] (Difference) 12 /Courier DrawText
257 -420 -431 61 14 false [0 0 0] [1 1 1] (in pixels) 12 /Courier DrawText
337 -413 -424 5 14 false [0 0 0] [1 1 1] (0) 12 /Courier DrawText
331 -411 30 18 [0 0 0] 0 0 [] 1 null DrawRectangle
267 -438 89 26 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
262 -433 89 26 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
265 -436 83 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
268 -439 -450 77 14 false [0 0 0] [1 1 1] (unconstrain) 12 /Courier DrawText
267 -474 89 26 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
262 -469 89 26 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
265 -472 83 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
276 -475 -486 61 14 false [0 0 0] [1 1 1] (customize) 12 /Courier DrawText
180 -176 133 133 [0 0 0] 0 0 [] 1 null DrawRectangle
176 -172 10 10 [0 0 0] 0 0 [] 1 null DrawRectangle
307 -172 10 10 [0 0 0] 0 0 [] 1 null DrawRectangle
176 -303 10 10 [0 0 0] 0 0 [] 1 null DrawRectangle
307 -303 10 10 [0 0 0] 0 0 [] 1 null DrawRectangle
160 -133 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
156 -129 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
160 -133 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
163 -136 5 5 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
182 -133 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
178 -129 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
182 -133 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
185 -136 5 5 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
240 -133 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
236 -129 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
240 -133 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
243 -136 5 5 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
291 -133 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
287 -129 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
291 -133 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
294 -136 5 5 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
314 -133 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
310 -129 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
314 -133 11 11 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
[0 0 0] 0 0 [] 1 180 -162 180 -152 DrawLine
184 -162 {
  { 176 -162 180 -172 }
} [0 0 0] 0 0 [] 1 [0 0 0] DrawPolyline
[0 0 0] 0 0 [] 1 247 -162 247 -152 DrawLine
250 -162 {
  { 244 -162 247 -172 }
} [0 0 0] 0 0 [] 1 [0 0 0] DrawPolyline
[0 0 0] 0 0 [] 1 312 -162 312 -152 DrawLine
316 -162 {
  { 308 -162 312 -172 }
} [0 0 0] 0 0 [] 1 [0 0 0] DrawPolyline
137 -156 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
133 -152 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
137 -156 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
140 -159 5 5 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
137 -178 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
133 -174 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
137 -178 11 11 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
137 -236 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
133 -232 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
137 -236 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
140 -239 5 5 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
137 -287 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
133 -283 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
137 -287 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
140 -290 5 5 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
137 -310 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
133 -306 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
137 -310 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
140 -313 5 5 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
[0 0 0] 0 0 [] 1 165 -176 155 -176 DrawLine
165 -172 {
  { 165 -180 175 -176 }
} [0 0 0] 0 0 [] 1 [0 0 0] DrawPolyline
[0 0 0] 0 0 [] 1 165 -243 155 -243 DrawLine
165 -240 {
  { 165 -246 175 -243 }
} [0 0 0] 0 0 [] 1 [0 0 0] DrawPolyline
[0 0 0] 0 0 [] 1 165 -308 155 -308 DrawLine
165 -304 {
  { 165 -312 175 -308 }
} [0 0 0] 0 0 [] 1 [0 0 0] DrawPolyline
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier /Times-BoldItalic Helvetica-Bold 
%%BoundingBox: 72 211 540 581

%%EndDocument
 GE /Times-Bold SF
6120 37543 MT
(Figure 3-1:)SH
/Times-Roman SF
12285 XM
(The constraint menu for box-like objects on the left,)
117 W( and a drawing window on the right.)116 W
11893 38739 MT
(The white rectangle in the drawing window)
183 W( is the object to be constrained and the gray)184 W
11893 39935 MT
(rectangle is the object to be referenced in the)
52 W( constraint.  The white rectangle is constrained)51 W
11893 41131 MT
(to be offset from the right of the gray rectangle by 20 pixels,)
27 W( and aligned at the top-inside of)28 W
11893 42327 MT
(the gray rectangle.  The white rectangle's width is not constrained and it is 33%)
14 W( as tall as the)13 W
11893 43523 MT
(gray rectangle. If the gray rectangle changes, the white one will be adjusted automatically.)SH
46800 50 6120 45475 UL
6120 47226 MT
(secondary selection and the only option for the)104 W
/Courier SF
27846 XM
(:height)SH
/Times-Roman SF
32845 XM
(slot is to constrain)
104 W( the height of the primary)103 W
6120 48422 MT
(selection to the height of the secondary selection.  In addition, each of the four slots may have a)
66 W( custom)67 W
6120 49618 MT
(constraint attached to them \050see Section 3.3\051.  Each of the four)
103 W( slots also has an ``Unconstrain'' option)102 W
6120 50814 MT
(that destroys the constraint attached to that slot.)SH
6120 53112 MT
(The constraints)
10 W( in the box constraint menu can be fine-tuned by entering offsets for the constraints, and in)11 W
6120 54308 MT
(the case of the size slots \050width and height\051, scale factors)
4 W( as well.  When an object is centered with respect)3 W
6120 55504 MT
(to another object, the offset field)
140 W( changes to a percent field denoting an interval where 0% causes the)141 W
6120 56700 MT
(center point of the constrained object to be attached to the)
62 W( left or top side of the object referenced in the)61 W
6120 57896 MT
(constraint and 100% causes the center point of the constrained object to be attached to the right)
17 W( or bottom)18 W
6120 59092 MT
(side of)
49 W( the object referenced in the constraint.  By default this percentage is 50.  The)48 W
/Courier SF
44292 XM
(Difference in)48 W
6120 60288 MT
(pixels)SH
/Times-Roman SF
10374 XM
(and)SH
/Courier SF
12256 XM
(Scale)SH
/Times-Roman SF
15851 XM
(factors cause the width and height constraints to be computed as)20 W
/Times-Italic SF
44632 XM
(Scale * Dimension)20 W
6120 61484 MT
(+ Difference in pixels)SH
/Times-Roman SF
(.)SH
6120 63782 MT
(Finally, each of the slots has a labeled box next to its)
49 W( name that allows the user to type in an integer that)48 W
6120 64978 MT
(will be placed in that slot.)
53 W( If)
383 W( there is already a constraint in the slot, the constraint will not be destroyed)54 W
6120 66174 MT
(so the value will only temporarily override the value computed by)
218 W( the constraint \050the next time the)217 W
6120 67370 MT
(constraint is recomputed, the value will be lost\051.  This operation)
102 W( works only when there is one primary)103 W
6120 68566 MT
(selection and no secondary selections.)SH
ES
%%Page: 555 18
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 3.2)
SH( Line)
1800 W( Constraints)SH
51386 XM
(Page 555)SH
46800 50 8280 4486 UL
14 /Times-Bold AF
8280 8138 MT
(3.2. Line Constraints)SH
11 /Times-Roman AF
8280 9334 MT
(The line constraint menu allows the endpoints of a line to be attached to other objects or)
50 W( the)49 W
/Courier SF
49868 XM
(:left)SH
/Times-Roman SF
53492 XM
(and)SH
/Courier SF
8280 10530 MT
(:top)SH
/Times-Roman SF
11281 XM
(slots of a box object to be constrained to)
86 W( the endpoint of a line \050Figure 3-2\051.  The buttons on the)87 W
8280 11726 MT
(box and line object in Figure 3-2 indicate the various locations where the endpoint of a line can be)197 W
8280 12922 MT
(attached to a box or line object or where a point of a box can be attached to a line.)
194 W( Thus)
665 W( the two)195 W
8280 14118 MT
(endpoints of a line can)
79 W( be attached to any of the corners, sides, or center of a box object and any of the)78 W
8280 15314 MT
(corners, sides, or center of a box object can be attached to the endpoints or center of a line.)SH
46800 50 8280 17465 UL
7 10 0 10260 61411 GB 
%%BeginDocument: lapidary/line-constraint-menu.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: Untitled
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Aug 11, 1993, 5:00 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 190 540 603
%%%Pages: 1
%%EndComments


/RoundtanglePath { % left top width height radius => -
    /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
    /right l w add def  /bottom t h sub def
    l r add t moveto                         % origin
    right t right t r sub r arcto            % top side
    right bottom right r sub bottom r arcto  % right side
    l bottom l bottom r add r arcto          % bottom side
    l t l r add t r arcto                    % left side
    16 {pop} repeat  % each arcto accumulates 4 stack parameters
} def

/RoundtangleDict 27 dict def
/DrawRoundtangle { % left top width height radius line-color
                   % cap join dash thickness fill-color => -
    gsave RoundtangleDict begin
        /fill-color exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        
        % Draw filling
        newpath
        left thickness add top thickness sub
        width thickness 2 mul sub height thickness 2 mul sub
        radius thickness sub dup 0 lt { pop 0 } if RoundtanglePath
        fill-color FillShape

        left thickness 2 div add top thickness 2 div sub
        width thickness sub height thickness sub
        radius thickness 2 div sub dup 0 lt { pop 0 } if RoundtanglePath

        % Draw border
        line-color line-cap line-join dash-pattern thickness
        StrokeShape
    end grestore
} def


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
               % cap join dash thickness fill-color => -
    EllipseDict begin
        /fill-color exch def /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /endangle exch def /startangle exch def
        /yrad exch def  /xrad exch def /y exch def /x exch def
        /savematrix mtrx currentmatrix def
        % Draw the filling
        gsave
            newpath
            x y translate
            xrad thickness sub yrad thickness sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-color FillShape
            newpath
            x y translate
            xrad thickness 2 div sub yrad thickness 2 div sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-color
            0 % line-cap
            line-join dash-pattern thickness
            StrokeShape
        grestore
    end
} def

/DefImage { % image-name font-name w h string => -
  20 dict begin
    /ImageString exch def /ImageHeight exch def /ImageWidth exch def
    /FontName exch def
    /ImageName exch def
    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def
    /Encoding [
      /image 255 { /.notdef } repeat
    ] def
    /BuildChar { % font char => -
      pop begin
        1 0
        0 0 1 1 setcachedevice
        gsave
          ImageWidth ImageHeight false
          [ ImageWidth 0 0 ImageHeight 0 0 ]
          {ImageString} imagemask
        grestore
      end
    } def
    ImageName currentdict definefont
    FontName exch
    ImageName ImageString
  end
  def def
} def


/FillPattern { % fgR fgG fgB [bgR bgG bgB] opaque? top font => -
  50 dict begin gsave
    /font exch def
    /top exch def
    /opaque? exch def
    /w font /ImageWidth get def
    /h font /ImageHeight get def
    font [w 0 0 h 0 0] makefont setfont
    pathbbox
    /y1 exch def /x1 exch def
    /y0 exch def /x0 exch def
    clip
    opaque? {
      gsave
        setrgbcolor
        fill
      grestore
    } if
    newpath
    setrgbcolor
    /y0 y0 top sub h div floor h mul top add cvi def
    /x0 x0 w div floor w mul cvi def
    x0 y0 translate
    /W x1 x0 sub w div ceiling cvi 1 add def
    /H y1 y0 sub h div ceiling cvi def
    /s W string def
    H {
      0 0 moveto
      s show
      0 h translate
    } repeat
  grestore end
  newpath
} def


/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawGenericWindowFrame { % label left top w h
                          % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def

/image-1 /image-1-font 4 4 <
00 00 00 00>
DefImage


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.78 0.78 scale
0 681 translate

%
% Begin new window
%
gsave
0 0 601 530 ClipToRectangle
gsave
0 0 601 530 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
2 -23 translate
(line constraints) 0 0 356 505 2 23 2 2 DrawGenericWindowFrame
0 0 356 505 ClipToRectangle
gsave
10 -10 -27 172 21 false [0 0 0] [1 1 1] (Line Constraint Menu) 18 /Times-BoldItalic DrawText
10 -57 294 142 [0 0 0] 0 0 [] 1 null DrawRectangle
20 -50 121 14 [0 0 0] 0 0 [] -1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
25 -50 -61 111 14 false [0 0 0] [1 1 1] (obj-to-constrain) 12 /Courier-Bold DrawText
[0 0 0] 0 0 [] 1 136 -154 36 -101 DrawLine
29 -94 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
25 -90 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
29 -94 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
32 -97 5 5 [1 1 1] 0 0 [] 1 [0 0 0] DrawRectangle
129 -147 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
125 -143 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
129 -147 11 11 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
166 -66 125 125 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
178 -78 100 100 [0 0 0] 0 0 [] 1 null DrawRectangle
171 -71 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
167 -67 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
171 -71 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
174 -74 5 5 [1 1 1] 0 0 [] 1 [0 0 0] DrawRectangle
171 -121 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
167 -117 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
171 -121 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
174 -124 5 5 [1 1 1] 0 0 [] 1 [0 0 0] DrawRectangle
171 -171 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
167 -167 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
171 -171 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
174 -174 5 5 [1 1 1] 0 0 [] 1 [0 0 0] DrawRectangle
221 -71 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
217 -67 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
221 -71 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
224 -74 5 5 [1 1 1] 0 0 [] 1 [0 0 0] DrawRectangle
221 -121 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
217 -117 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
221 -121 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
224 -124 5 5 [1 1 1] 0 0 [] 1 [0 0 0] DrawRectangle
221 -171 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
217 -167 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
221 -171 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
224 -174 5 5 [1 1 1] 0 0 [] 1 [0 0 0] DrawRectangle
271 -71 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
267 -67 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
271 -71 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
274 -74 5 5 [1 1 1] 0 0 [] 1 [0 0 0] DrawRectangle
271 -121 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
267 -117 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
271 -121 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
274 -124 5 5 [1 1 1] 0 0 [] 1 [0 0 0] DrawRectangle
271 -171 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
267 -167 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
271 -171 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
274 -174 5 5 [1 1 1] 0 0 [] 1 [0 0 0] DrawRectangle
10 -225 294 142 [0 0 0] 0 0 [] 1 null DrawRectangle
20 -218 121 14 [0 0 0] 0 0 [] -1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
25 -218 -229 111 14 false [0 0 0] [1 1 1] (obj-to-reference) 12 /Courier-Bold DrawText
24 -234 125 125 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
[0 0 0] 0 0 [] 1 36 -318 136 -274 DrawLine
129 -267 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
125 -263 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
129 -267 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
132 -270 5 5 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
79 -289 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
75 -285 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
79 -289 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
82 -292 5 5 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
29 -311 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
25 -307 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
29 -311 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
32 -314 5 5 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
178 -246 100 100 [0 0 0] 0 0 [] 1 null DrawRectangle
171 -239 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
167 -235 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
171 -239 11 11 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
171 -289 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
167 -285 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
171 -289 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
174 -292 5 5 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
171 -339 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
167 -335 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
171 -339 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
174 -342 5 5 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
221 -239 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
217 -235 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
221 -239 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
224 -242 5 5 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
221 -289 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
217 -285 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
221 -289 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
224 -292 5 5 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
221 -339 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
217 -335 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
221 -339 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
224 -342 5 5 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
271 -239 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
267 -235 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
271 -239 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
274 -242 5 5 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
271 -289 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
267 -285 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
271 -289 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
274 -292 5 5 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
271 -339 19 19 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
267 -335 19 19 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
271 -339 11 11 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
274 -342 5 5 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
15 -391 89 26 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
10 -386 89 26 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
13 -389 83 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
16 -392 -403 77 14 false [0 0 0] [1 1 1] (unconstrain) 12 /Courier DrawText
15 -427 89 26 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
10 -422 89 26 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
13 -425 83 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
24 -428 -439 61 14 false [0 0 0] [1 1 1] (customize) 12 /Courier DrawText
196 -15 120 24 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
191 -10 120 24 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
194 -13 114 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
196 -15 -26 110 14 false [0 0 0] [1 1 1] (Show Constraints) 12 /Courier DrawText
326 -15 23 24 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
321 -10 23 24 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
324 -13 17 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
326 -15 -26 13 14 false [0 0 0] [1 1 1] (OK) 12 /Courier DrawText
123 -388 -399 55 14 false [0 0 0] [1 1 1] (x-offset) 12 /Courier-Bold DrawText
189 -388 -399 5 14 false [0 0 0] [1 1 1] (0) 12 /Courier DrawText
183 -386 17 18 [0 0 0] 0 0 [] 1 null DrawRectangle
123 -415 -426 56 14 false [0 0 0] [1 1 1] (y-offset) 12 /Courier-Bold DrawText
190 -415 -426 5 14 false [0 0 0] [1 1 1] (0) 12 /Courier DrawText
184 -413 17 18 [0 0 0] 0 0 [] 1 null DrawRectangle
233 -388 -399 13 14 false [0 0 0] [1 1 1] (x1) 12 /Courier-Bold DrawText
257 -388 -399 13 14 false [0 0 0] [1 1 1] (40) 12 /Courier DrawText
251 -386 25 18 [0 0 0] 0 0 [] 1 null DrawRectangle
233 -415 -426 14 14 false [0 0 0] [1 1 1] (y1) 12 /Courier-Bold DrawText
258 -415 -426 12 14 false [0 0 0] [1 1 1] (20) 12 /Courier DrawText
252 -413 24 18 [0 0 0] 0 0 [] 1 null DrawRectangle
233 -452 -463 13 14 false [0 0 0] [1 1 1] (x2) 12 /Courier-Bold DrawText
257 -452 -463 19 14 false [0 0 0] [1 1 1] (152) 12 /Courier DrawText
251 -450 31 18 [0 0 0] 0 0 [] 1 null DrawRectangle
233 -479 -490 14 14 false [0 0 0] [1 1 1] (y2) 12 /Courier-Bold DrawText
258 -479 -490 12 14 false [0 0 0] [1 1 1] (79) 12 /Courier DrawText
252 -477 24 18 [0 0 0] 0 0 [] 1 null DrawRectangle
grestore

grestore


%
% Begin new window
%
gsave
360 -371 translate
(Drawing Window 4) 0 0 239 157 2 23 2 2 DrawGenericWindowFrame
0 0 239 157 ClipToRectangle
gsave
169.5 -96.5 24.5 24.5 0 360 [0 0 0] 0 0 [] 1 null DrawEllipse
[0 0 0] 0 0 [] 1 152 -79 40 -20 DrawLine
142 -69 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
167 -69 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
190 -69 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
190 -94 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
190 -117 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
167 -117 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
142 -117 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
142 -94 7 7 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
37 -17 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
149 -76 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
93 -46 7 7 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold /Times-BoldItalic Helvetica-Bold 
%%BoundingBox: 72 190 540 603

%%EndDocument
 GE /Times-Bold SF
8280 49863 MT
(Figure 3-2:)SH
/Times-Roman SF
14444 XM
(The constraint menu for line-like objects on)
116 W( the left, and a drawing window on the right.)117 W
14053 51059 MT
(The arrow in the drawing window is the object to be)
51 W( constrained and the circle is the object)50 W
14053 52255 MT
(to be referenced in the constraint.  In the ``obj-to-constrain'')
46 W( section of the constraint menu,)47 W
14053 53451 MT
(the line feedback object has been rotated so that it has the same orientation as the)
94 W( selected)93 W
14053 54647 MT
(arrow, and the box feedback object has been)
390 W( disabled \050grayed-out\051. In the ``obj-to-)391 W
14053 55843 MT
(reference'' section the line feedback object has been disabled since the object to be)344 W
14053 57039 MT
(referenced in the constraint is a box-like object. The darkened buttons on the right endpoint)57 W
14053 58235 MT
(of the line feedback object and)
114 W( the left corner of the box feedback object indicate that the)113 W
14053 59431 MT
(right endpoint of the arrow is attached to the left corner of the circle.)SH
46800 50 8280 61383 UL
8280 63481 MT
(The line object in the constraint menu is oriented)
30 W( in the same direction as the selected line in the drawing)31 W
8280 64677 MT
(window, so that the user knows which endpoint is)
134 W( being constrained.  The buttons with the blackened)133 W
8280 65873 MT
(rectangles indicate the points that)
22 W( can be constrained in the primary selection.  Similarly, the buttons with)23 W
8280 67069 MT
(the white rectangles indicate the points)
227 W( in the secondary selection that the primary selection can be)226 W
8280 68265 MT
(attached to.)SH
8280 70563 MT
(The)SH
/Courier SF
10389 XM
(Unconstrain)SH
/Times-Roman SF
18048 XM
(button at the bottom of the menu allows the)
124 W( user to destroy the constraint on the)125 W
8280 71759 MT
(selected point)
173 W( and the)172 W
/Courier SF
18805 XM
(Customize)SH
/Times-Roman SF
25192 XM
(button allows the user to input a custom constraint \050described in)172 W
ES
%%Page: 556 19
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 556)
SH( Lapidary)830 W
38954 XM
(Creating Constraints)
SH( Chapter)
1550 W( 3)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(Section 3.3\051. Finally the)31 W
/Courier SF
17122 XM
(x-offset)SH
/Times-Roman SF
22708 XM
(and)SH
/Courier SF
24602 XM
(y-offset)SH
/Times-Roman SF
30188 XM
(labeled boxes allow the user to)
31 W( enter offsets for the)32 W
6120 9151 MT
(constraint. All)
347 W( offsets are added to the value computed by the)
36 W( constraint.  For example, an x-offset of 10)35 W
6120 10347 MT
(causes an endpoint constrained to the northwest corner of a box object to appear 10 pixels to the right)
50 W( of)51 W
6120 11543 MT
(that corner.)SH
6120 13841 MT
(The end points of)
2 W( a line can be set directly by typing in values for x1, y1, x2 and y2.  This function is only)1 W
6120 15037 MT
(active if there is a single line as the primary selection and no secondary selections.)SH
14 /Times-Bold AF
6120 18855 MT
(3.3. Custom Constraints)SH
11 /Times-Roman AF
6120 20051 MT
(When the user selects the custom constraint option)
74 W( in any of the constraint or property menus, Lapidary)75 W
6120 21247 MT
(brings up the C32 spreadsheet and a formula window for)
16 W( the desired slot. The user should enter a formula)15 W
6120 22443 MT
(and press OK \050or cancel to)
86 W( stop the operation\051. Both the OK and cancel buttons in the formula window)87 W
6120 23639 MT
(will make C32 disappear.)SH
6120 25937 MT
(Information on C32 can be found in the C32 chapter. However, Lapidary modifies C32 in a number of)99 W
6120 27133 MT
(ways that are)
120 W( important for a user to know. First, it generates indirect references to objects rather than)121 W
6120 28329 MT
(direct references. A direct reference explicitly lists an object)
20 W( in a constraint, whereas an indirect reference)19 W
6120 29525 MT
(accesses the object indirectly through a link. For example,)20 W
/Courier SF
32173 XM
(\050gv rect1 :left\051)20 W
/Times-Roman SF
43068 XM
(is a direct)
20 W( reference to)21 W
/Courier SF
6120 30721 MT
(rect1)SH
/Times-Roman SF
(, whereas)237 W
/Courier SF
14321 XM
(\050gvl :link0)
237 W( :left\051)236 W
/Times-Roman SF
27185 XM
(is an indirect reference to)236 W
/Courier SF
39816 XM
(rect1)SH
/Times-Roman SF
43627 XM
(\050this assumes that a)236 W
6120 31917 MT
(pointer to)60 W
/Courier SF
10762 XM
(rect1)SH
/Times-Roman SF
14397 XM
(is stored in)60 W
/Courier SF
19680 XM
(:link0)SH
/Times-Roman SF
(\051. If the user always generates references using)
60 W( the C32 functions)61 W
/Courier SF
6120 33113 MT
(Insert Ref from Mouse)112 W
/Times-Roman SF
20703 XM
(and)SH
/Courier SF
22678 XM
(Insert Ref from Spread)112 W
/Times-Roman SF
(, then Lapidary will)
112 W( automatically)111 W
6120 34309 MT
(generate indirect references)
163 W( and create appropriate link names. The user can edit these link names by)164 W
6120 35505 MT
(bringing up the parameters menu and)
8 W( hitting the link parameters button \050see Section 2.3\051.  However, if the)7 W
6120 36701 MT
(user inserts the references by typing them)
143 W( in, then the user should take care to use the)144 W
/Courier SF
46376 XM
(gvl)SH
/Times-Roman SF
48775 XM
(form and)144 W
6120 37897 MT
(create the appropriate links. When the formula is completed, Lapidary checks whether there are any direct)7 W
6120 39093 MT
(references in the formula)
105 W( and generates a warning if there are.  At this point the user has the option of)106 W
6120 40289 MT
(editing the formula or continuing with the formula as is.)
67 W( If the user chooses to leave direct references in)66 W
6120 41485 MT
(the formula, Lapidary may not be able)
193 W( to generalize it, so the formula may behave strangely if it is)194 W
6120 42681 MT
(inherited.)SH
6120 44979 MT
(The second change Lapidary makes is in copying)
37 W( formulas. Lapidary copies all the links that the formula)36 W
6120 46175 MT
(references to the object which is receiving the copied)
3 W( formula. If the links should point to new objects, the)4 W
6120 47371 MT
(user must manually change them by selecting)
156 W( the)155 W
/Courier SF
29300 XM
(Show All Slots)155 W
/Times-Roman SF
39280 XM
(option in C32 and editing the)155 W
6120 48567 MT
(appropriate links \050the names of the links that need to be modified can be found by looking at the formula\051.)SH
14 /Times-Bold AF
6120 52385 MT
(3.4. The Constraint Gadget)SH
11 /Times-Roman AF
6120 53581 MT
(The constraint menus have been bundled into a constraint gadget that can be used independently)
214 W( of)215 W
6120 54777 MT
(Lapidary. The)
621 W( constraint gadget provides two menus:)
173 W( a box constraint menu for specifying box-type)172 W
6120 55973 MT
(constraints \050Figure 3-1\051 and)
6 W( a line constraint menu for specifying line-type constraints \050Figure 3-2\051. These)7 W
6120 57169 MT
(menus operate as described)
209 W( in Sections 3.1 and 3.2. The menus also provide access to C32 through)208 W
/Courier SF
6120 58365 MT
(customize)SH
/Times-Roman SF
12607 XM
(buttons. The)
819 W( module can be loaded independently of Lapidary with)272 W
10 /Courier AF
45720 XM
(\050garnet-load)SH
6120 59561 MT
("lapidary:constraint-gadget-loader"\051)SH
11 /Times-Roman AF
28359 XM
(and is)
364 W( exported from the gadgets package \050garnet-)363 W
6120 60757 MT
(gadgets\051.)SH
12 /Times-Bold AF
6120 64441 MT
(3.4.1. Programming Interface)SH
11 /Times-Roman AF
6120 65637 MT
(The constraint gadget can be created \050or made visible, if already)
15 W( created\051 by executing one of the)16 W
10 /Courier AF
49320 XM
(-do-go)SH
11 /Times-Roman AF
6120 66833 MT
(or)SH
10 /Courier AF
7355 XM
(show-)SH
11 /Times-Roman AF
10674 XM
(functions described in section 3.4.1.2.)
44 W( Certain)
362 W( slots of the gadget, described in section 3.4.1.1,)43 W
6120 68029 MT
(are then set with the objects to be constrained.)
133 W( When)
542 W( the user operates the buttons in the dialog box,)134 W
6120 69225 MT
(constraints will be set up among the indicated objects.)SH
ES
%%Page: 557 20
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 3.4)
SH( The)
1800 W( Constraint Gadget)SH
51386 XM
(Page 557)SH
46800 50 8280 4486 UL
12 /Times-Bold AF
8280 8004 MT
(3.4.1.1. Slots of the Constraint Gadget)SH
11 /Times-Roman AF
8280 9200 MT
(The constraint gadget exports one object called)14 W
10 /Courier AF
29423 XM
(gg::*constraint-gadget*)SH
11 /Times-Roman AF
(. This)
301 W( object contains four)13 W
8280 10396 MT
(settable slots:)SH
10 /Courier AF
10780 12347 MT
(:obj-to-constrain)SH
11 /Times-Roman AF
21307 XM
(- The object which should be constrained. This slot)
52 W( expects only one object)53 W
11880 13543 MT
(\320 it will not take a list.)SH
10 /Courier AF
10780 15238 MT
(:obj-to-reference)SH
11 /Times-Roman AF
21317 XM
(- The object which should be referenced in the constraint. This slot expects)62 W
11880 16434 MT
(only one object \320 it will not take a list.)SH
10 /Courier AF
10780 18129 MT
(:top-level-agg)SH
11 /Times-Roman AF
19703 XM
(- The top level aggregate containing constrainable)
248 W( objects. If the aggregate)249 W
11880 19325 MT
(associated with a window is the top level aggregate, this slot)
207 W( may be left NIL \050the default\051.)206 W
11880 20521 MT
(However, if, for)
158 W( example, the window contains an editor aggregate and a feedback aggregate,)159 W
11880 21717 MT
(then the)SH
10 /Courier AF
15668 XM
(:top-level-agg)SH
11 /Times-Roman AF
24343 XM
(slot should be set to the editor aggregate.)SH
10 /Courier AF
10780 23412 MT
(:custom-function)SH
11 /Times-Roman AF
20725 XM
(- A function that is)
70 W( executed whenever a constraint is attached to a slot. The)69 W
11880 24608 MT
(function should take three parameters: an object, a slot, and)
6 W( a formula. The function is called after)7 W
11880 25804 MT
(the formula has been installed)
215 W( on the slot, but before the formula has been evaluated.)214 W
/Times-Italic SF
53184 XM
(This)SH
11880 27000 MT
(function is not called when the user calls the)
30 W( c32 function and provides a c32-custom-function as)31 W
11880 28196 MT
(a parameter)65 W
/Times-Roman SF
17691 XM
(\050see Section 3.4.1.2 for details on the c32-custom-function and its parameters\051. The)64 W
11880 29392 MT
(function is not called in this case since the constraint gadget does)
113 W( not install the formula if the)114 W
11880 30588 MT
(c32-custom-function is provided.)SH
8280 32886 MT
(It is also possible to prevent either the)
27 W( box-constraint or line-constraint menus from attaching a constraint)26 W
8280 34082 MT
(to a slot by adding the slot's name to a list)
44 W( in the)45 W
10 /Courier AF
30458 XM
(:do-not-alter-slots)SH
11 /Times-Roman AF
42178 XM
(of an object. For example, to)45 W
8280 35278 MT
(prevent a constraint from being attached to the)242 W
10 /Courier AF
30986 XM
(:width)SH
11 /Times-Roman AF
35103 XM
(or)SH
10 /Courier AF
36536 XM
(:height)SH
11 /Times-Roman AF
41253 XM
(slots of a text object, the list)242 W
10 /Courier AF
8280 36474 MT
('\050:width :height)68 W
11 /Times-Roman AF
(\051 could be placed in the object's)68 W
10 /Courier AF
32749 XM
(:do-not-alter-slots)SH
11 /Times-Roman AF
44493 XM
(slot. If)
413 W( the user tries to)69 W
8280 37670 MT
(attach a constraint to that slot, an error box will be popped)
182 W( up indicating that a constraint cannot be)181 W
8280 38866 MT
(attached to that slot. C32 does not)
286 W( recognize the)287 W
10 /Courier AF
32241 XM
(:do-not-alter-slots)SH
11 /Times-Roman AF
(, and therefore the box-)287 W
8280 40062 MT
(constraint and line-constraint menus)
7 W( cannot prevent the user from inserting a formula into a forbidden slot)6 W
8280 41258 MT
(if a customize button is chosen.)SH
12 /Times-Bold AF
8280 44222 MT
(3.4.1.2. Exported Functions)SH
11 /Times-Roman AF
8280 45418 MT
(The following functions are exported from the constraint gadget module:)SH
8 /Courier AF
10200 46631 MT
(gg:Box-Constraint-Do-Go)SH
49312 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
10200 48361 MT
(gg:Line-Constraint-Do-Go)SH
49312 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
11 /Times-Roman AF
8280 50659 MT
(These functions create the Box and Line Constraint dialog boxes.  They)
55 W( should not be executed multiple)56 W
1406 50 44067 50859 UL
8280 51855 MT
(times, since there is only one)89 W
10 /Courier AF
21859 XM
(constraint-gadget)SH
11 /Times-Roman AF
32423 XM
(object. If)
451 W( the user clicks on an ``OK'' button and)88 W
8280 53051 MT
(makes the dialog boxes invisible, then the following functions can be called to make them visible again:)SH
8 /Courier AF
10200 54264 MT
(gg:Show-Box-Constraint-Menu)SH
49312 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
10200 55994 MT
(gg:Show-Line-Constraint-Menu)SH
49312 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
11 /Times-Roman AF
8280 58292 MT
(These functions make the Box and Line Constraint dialog boxes visible.  They can only be)
5 W( called after the)6 W
10 /Courier AF
8280 59488 MT
(-do-go)SH
11 /Times-Roman AF
12155 XM
(functions above have been called to create the dialog boxes.)SH
8 /Courier AF
10200 60701 MT
(gg:C32 &optional)SH
/Times-Italic SF
18360 XM
(object slot)200 W
/Courier SF
49312 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
13560 61566 MT
(&key)SH
/Times-Italic SF
15960 XM
(left top c32-custom-function prompt)200 W
11 /Times-Roman AF
8280 63864 MT
(This function causes c32 to come up, with the)34 W
/Times-Italic SF
29054 XM
(object)SH
/Times-Roman SF
32051 XM
(displayed in the)
34 W( first panel of the c32 window.  The)33 W
8280 65060 MT
(formula in)125 W
/Times-Italic SF
13418 XM
(slot)SH
/Times-Roman SF
15409 XM
(will be displayed in c32's formula editing dialog box.  The keyword parameters are as)126 W
8280 66256 MT
(follows:)SH
/Times-Italic SF
10780 69644 MT
(left)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
12736 XM
(top)SH
/Times-Roman SF
14417 XM
(- Controls placement of query box that users use to indicate that they are done with C32.)SH
/Times-Italic SF
10780 71339 MT
(c32-custom-function)SH
/Times-Roman SF
20254 XM
(- A function to be executed when the user hits the OK button in a formula)157 W
ES
%%Page: 558 21
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 558)
SH( Lapidary)830 W
38954 XM
(Creating Constraints)
SH( Chapter)
1550 W( 3)SH
46800 50 6120 4486 UL
11 SS 
9720 7955 MT
(window in C32. The function should take three parameters: an object, a slot, and a formula.  If a)48 W
9720 9151 MT
(custom function is provided, the formula will not)
155 W( be installed in the slot \050thus the function in)154 W
9720 10347 MT
(:custom-function will not be called\320it must be called explicitly by the)68 W
/Times-Italic SF
41907 XM
(c32-custom-function)SH
/Times-Roman SF
51292 XM
(if it)69 W
9720 11543 MT
(should be executed\051. This gives)
1 W( the)SH
/Times-Italic SF
25517 XM
(c32-custom-function)SH
/Times-Roman SF
34834 XM
(an opportunity to defer the installation of)SH
9720 12739 MT
(the formula. For example, in Lapidary, the user can create formulas that define the values of)176 W
9720 13935 MT
(various slots)
204 W( in an interactor, but until the user presses the ``create-interactor'' or ``modify'')203 W
9720 15131 MT
(buttons, the formulas should not be installed. Thus the Lapidary)33 W
10 /Courier AF
38464 XM
(c32-custom-function)SH
11 /Times-Roman AF
50172 XM
(places)SH
9720 16327 MT
(the formulas on a queue, but does not install them.)SH
9720 18022 MT
(The constraint gadget stores the links that this formula uses in a meta-slot in the formula called)88 W
10 /Courier AF
9720 19218 MT
(:links)SH
11 /Times-Roman AF
(. Like)
411 W( the formula, the links are not installed. That is, the link slots do not exist \050unless)68 W
9720 20414 MT
(another formula already uses them\051. Because the links have not been installed, the constraint)191 W
9720 21610 MT
(gadget stores the links and the objects)
137 W( they point to in another meta-slot in the formula called)138 W
9 SS 
51829 22468 MT
(*)SH
10 /Courier AF
9720 22831 MT
(:links-and-objs)SH
11 /Times-Roman AF
(. The contents of this)
181 W( slot have the form \050list \050cons \050link-name object\051\051)180 W
52279 XM
(\051.)SH
9720 24027 MT
(Links that already exist because another formula uses them will not be on this list.)SH
9720 25722 MT
(The)SH
10 /Courier AF
11780 XM
(c32-custom-function)SH
11 /Times-Roman AF
23530 XM
(or the application can install the links by calling the c32 function)75 W
10 /Courier AF
9720 26918 MT
(install-links)SH
11 /Times-Roman AF
17938 XM
(which takes a formula and the object that the links should be installed in as)142 W
9720 28114 MT
(arguments \050the object that is passed to)206 W
10 /Courier AF
28240 XM
(c32-custom-function)SH
11 /Times-Roman AF
40122 XM
(is the object that should be)207 W
9720 29310 MT
(passed to)95 W
10 /Courier AF
14248 XM
(install-links)SH
11 /Times-Roman AF
(\051.)SH
10 /Courier AF
23059 XM
(install-links)SH
11 /Times-Roman AF
31229 XM
(will create the links, and if the)
95 W( link points to an)94 W
9720 30506 MT
(object that is in the same aggregate as the object containing the link,)14 W
10 /Courier AF
40206 XM
(install-links)SH
11 /Times-Roman AF
48295 XM
(will create)14 W
9720 31702 MT
(a path to the reference object and store)
320 W( it in the link slot.)319 W
10 /Courier AF
38922 XM
(install-links)SH
11 /Times-Roman AF
47316 XM
(destroys the)319 W
10 /Courier AF
9720 32898 MT
(:links-and-objs)SH
11 /Times-Roman AF
19029 XM
(slot, so the)34 W
10 /Courier AF
24143 XM
(c32-custom-function)SH
11 /Times-Roman AF
35852 XM
(or application should)
34 W( take care to save)35 W
9720 34094 MT
(the contents of this slot if they need to make further use of this information.)SH
/Times-Italic SF
8620 35789 MT
(prompt)SH
/Times-Roman SF
12073 XM
(- A text string that should be displayed in the query box that appears when C32 is invoked.)SH
8 /Courier AF
8040 37532 MT
(gg:CG-Destroy-Constraint)SH
/Times-Italic SF
20040 XM
(object slot)200 W
/Courier SF
47152 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
11 /Times-Roman AF
6120 39830 MT
(This function destroys a constraint created by the constraint gadget. Required parameters are an)
125 W( object)124 W
6120 41026 MT
(and a slot.)SH
8 /Courier AF
8040 42239 MT
(gg:Valid-Integer-P)SH
/Times-Italic SF
17160 XM
(gadget string)SH
/Courier SF
47152 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
10 SS 
6120 44537 MT
(Valid-integer-p)SH
11 /Times-Roman AF
15402 XM
(determines if a string input by a Garnet gadget contains a valid integer. If it does not,)8 W
6120 45733 MT
(the gadget's original value is restored and an error message is printed.)SH
8 /Courier AF
8040 48383 MT
(c32::Install-Links)SH
/Times-Italic SF
17160 XM
(formula obj)200 W
/Courier SF
47152 XM
([)SH
/Times-Italic SF
(Function)SH
/Courier SF
(])SH
11 /Times-Roman AF
6120 50681 MT
(This function is provided by c32, though it is)
13 W( not exported.  As mentioned above, it is useful for installing)12 W
6120 51877 MT
(links when a custom function is provided)
101 W( in c32.  The)102 W
/Times-Italic SF
31188 XM
(formula)SH
/Times-Roman SF
35049 XM
(should have a)102 W
10 /Courier AF
41678 XM
(:links-and-objs)SH
11 /Times-Roman AF
51055 XM
(slot,)SH
6120 53073 MT
(whose value should be a list of the form \050\050)157 W
/Times-Italic SF
(link-slot-name object)157 W
/Times-Roman SF
(\051 \050)157 W
/Times-Italic SF
(link-slot-name object)157 W
/Times-Roman SF
(\051 ...\051.  The)156 W
/Times-Italic SF
51514 XM
(obj)SH
/Times-Roman SF
6120 54269 MT
(parameter names the object which the links should be installed in.)SH
12 /Times-Bold AF
6120 57233 MT
(3.4.1.3. Programming with Links)SH
11 /Times-Roman AF
6120 58429 MT
(Each constraint contains indirect references to objects rather than)
33 W( direct references. The set of link names)34 W
6120 59625 MT
(it uses to make these indirect references is contained in the)1 W
10 /Courier AF
32245 XM
(:links)SH
11 /Times-Roman AF
36120 XM
(meta-slot of the formula and the name)SH
6120 60821 MT
(of the offset slot it)
151 W( uses is contained in the)152 W
10 /Courier AF
26456 XM
(:offset)SH
11 /Times-Roman AF
31083 XM
(meta-slot. If)
579 W( the formula involves the width or)152 W
6120 62017 MT
(height slots, there is also a)33 W
10 /Courier AF
18203 XM
(:scale)SH
11 /Times-Roman AF
22111 XM
(meta-slot, containing the name of the scale slot that the formula uses.)32 W
6120 63213 MT
(The constraint gadget generates)
51 W( link and offset names by appending the suffixes)52 W
10 /Courier AF
42295 XM
(-over)SH
11 /Times-Roman AF
45622 XM
(and)SH
10 /Courier AF
47537 XM
(-offset)SH
11 /Times-Roman AF
52064 XM
(to)SH
6120 64409 MT
(the name of the slot that is being constrained. For example, if the)
87 W( left slot is being constrained, the link)86 W
6120 65605 MT
(name will be)15 W
10 /Courier AF
12122 XM
(:left-over)SH
11 /Times-Roman AF
18412 XM
(and the offset name will be)15 W
10 /Courier AF
30720 XM
(:left-offset)SH
11 /Times-Roman AF
(. These)
305 W( slot)
15 W( names are stored in a)16 W
6120 66801 MT
(formula's)SH
10 /Courier AF
10793 XM
(:links)SH
11 /Times-Roman AF
14790 XM
(and)SH
10 /Courier AF
16775 XM
(:offset)SH
11 /Times-Roman AF
21372 XM
(meta-slots. For)
519 W( width and height slots,)
122 W( scale names are generated by)121 W
6120 67997 MT
(appending the suffix)22 W
10 /Courier AF
15503 XM
(-scale)SH
11 /Times-Roman AF
19400 XM
(to the slot name. Thus the scale slot for a)
22 W( height constraint would be named)23 W
10 /Courier AF
6120 69193 MT
(:height-scale)SH
11 /Times-Roman AF
(. When C32 generates link names, it generates them by appending a number to the)198 W
6120 70389 MT
(prefix)SH
10 /Courier AF
9021 XM
(link-)SH
11 /Times-Roman AF
(. Thus it generates links such as)SH
10 /Courier AF
26257 XM
(:link-0)SH
11 /Times-Roman AF
30732 XM
(and)SH
10 /Courier AF
32595 XM
(:link-1)SH
11 /Times-Roman AF
(.)SH
ES
%%Page: 559 22
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 3.4)
SH( The)
1800 W( Constraint Gadget)SH
51386 XM
(Page 559)SH
46800 50 8280 4486 UL
12 /Times-Bold AF
8280 8004 MT
(3.4.2. Custom Constraints)SH
11 /Times-Roman AF
8280 9200 MT
(When the user selects the custom constraint option in any)
74 W( of the constraint menus, the constraint gadget)75 W
8280 10396 MT
(brings up the C32 spreadsheet and a formula window for)
16 W( the desired slot. The user should enter a formula)15 W
8280 11592 MT
(and press OK \050or cancel to)
86 W( stop the operation\051. Both the OK and cancel buttons in the formula window)87 W
8280 12788 MT
(will make C32 disappear.)SH
8280 15086 MT
(The constraint gadget modifies C32 in a number)
89 W( of ways that are important for a user to know. First, it)88 W
8280 16282 MT
(generates indirect references to objects rather than direct references. A direct reference)
60 W( explicitly lists an)61 W
8280 17478 MT
(object in a constraint, whereas an indirect reference accesses the object)
170 W( indirectly through a link. For)169 W
8280 18674 MT
(example,)SH
10 /Courier AF
12693 XM
(\050gv RECT1 :left\051)137 W
11 /Times-Roman AF
22979 XM
(is a direct reference to)137 W
10 /Courier AF
33709 XM
(RECT1)SH
11 /Times-Roman AF
(, whereas)137 W
10 /Courier AF
41410 XM
(\050gvl :link0 :left\051)137 W
11 /Times-Roman AF
52896 XM
(is an)137 W
8280 19870 MT
(indirect reference to)19 W
10 /Courier AF
17466 XM
(RECT1)SH
11 /Times-Roman AF
20760 XM
(\050this assumes that a pointer to)19 W
10 /Courier AF
34255 XM
(RECT1)SH
11 /Times-Roman AF
37548 XM
(is stored in)18 W
10 /Courier AF
42705 XM
(:link0)SH
11 /Times-Roman AF
(\051. If the user always)18 W
8280 21066 MT
(generates references using the C32 functions)237 W
10 /Courier AF
29676 XM
(Insert Ref from Mouse)238 W
11 /Times-Roman AF
43503 XM
(and)SH
10 /Courier AF
45604 XM
(Insert Ref from)238 W
8280 22262 MT
(Spread)SH
11 /Times-Roman AF
(, then the constraint gadget will automatically generate indirect references)
50 W( and create appropriate)49 W
8280 23458 MT
(link names. The user can)
80 W( edit these link names by finding them in the spreadsheet and modifying them.)81 W
8280 24654 MT
(However, if the user inserts the references by typing them in, then the user should take care to use the)2 W
10 /Courier AF
53280 XM
(gvl)SH
11 /Times-Roman AF
8280 25850 MT
(form and create the appropriate links. When the formula)
227 W( is completed, the constraint gadget checks)228 W
8280 27046 MT
(whether there)
50 W( are any direct references in the formula and generates a warning if there are.  At this point)49 W
8280 28242 MT
(the user has the option of editing the formula or continuing with)
56 W( the formula as is. If the user chooses to)57 W
8280 29438 MT
(leave direct references in the formula, the constraint gadget may not)
204 W( be able to generalize it, so the)203 W
8280 30634 MT
(formula may behave strangely if it is inherited.)SH
8280 32932 MT
(The second change the constraint gadget makes)
77 W( is in copying formulas. The constraint gadget copies all)78 W
8280 34128 MT
(the links that the formula references to)
177 W( the object which is receiving the copied formula. If the links)176 W
8280 35324 MT
(should point to new objects, the user must manually change them by)
137 W( selecting the)138 W
10 /Courier AF
46404 XM
(Show All Slots)138 W
11 /Times-Roman AF
8280 36520 MT
(option in C32 and editing the appropriate links \050the names of the links that need to be modified can)
98 W( be)97 W
8280 37716 MT
(found by looking at the formula\051.)SH
12 /Times-Bold AF
8280 41400 MT
(3.4.3. Feedback)SH
11 /Times-Roman AF
8280 42596 MT
(The user can determine which constraints are attached to an object by selecting the object)
20 W( and an optional)21 W
8280 43792 MT
(second object that the object may be constrained to, and then)
65 W( selecting the)64 W
10 /Courier AF
41990 XM
(Show Constraints)64 W
11 /Times-Roman AF
51993 XM
(option.)SH
8280 44988 MT
(The appropriate constraint buttons will be)
135 W( highlighted and the offset fields set to the correct values. If)136 W
8280 46184 MT
(only one object is selected, then all constraints that the)
49 W( constraint menu can represent will be shown. For)48 W
8280 47380 MT
(example, the box constraint menu would display)
17 W( the constraints on the left, top, width, and height slots. If)18 W
8280 48576 MT
(there are two selections, a constrained object and a)
192 W( reference object, then only the constraints in the)191 W
8280 49772 MT
(constrained object that depend on the reference object are shown.)SH
ES
%%Page: 560 23
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 560)
SH( Lapidary)830 W
42928 XM
(Interactors Chapter)
1550 W( 4)SH
46800 50 6120 4486 UL
16 /Times-Bold AF
6120 8272 MT
(4. Interactors)SH
11 /Times-Roman AF
6120 10524 MT
(Lapidary provides a set of dialog boxes that allow)
138 W( a user to define new interactors or modify existing)139 W
6120 11720 MT
(ones. To create or modify an interactor,)
124 W( select the)123 W
/Courier SF
29314 XM
(Interactors)SH
/Times-Roman SF
36972 XM
(command from the Lapidary editor)123 W
6120 12916 MT
(menu. Lapidary)
663 W( will display a menu listing)
194 W( Garnet-defined and user-defined interactors that may be)195 W
6120 14112 MT
(viewed. Select)
275 W( the desired interactor and Lapidary will display the appropriate interactor dialog box.)SH
6120 16410 MT
(All interactor)
125 W( dialog boxes have a number of standard items, including a set of action buttons, a name)124 W
6120 17606 MT
(box, a)57 W
/Courier SF
9197 XM
(:start-where)SH
/Times-Roman SF
17449 XM
(field, and buttons for events. In addition, each dialog box allows the user to set)57 W
6120 18802 MT
(the most commonly changed slots associated)
58 W( with that interactor.  Other slots may be set using C32 \050see)57 W
6120 19998 MT
(section 3.3\051.)SH
6120 22296 MT
(The name field allows the user to type in a)
116 W( name for the interactor. The name is not used to name the)117 W
6120 23492 MT
(interactor, but instead is converted to a)
168 W( keyword and stored in the interactor's :known-as slot.  If the)167 W
6120 24688 MT
(interactor is saved, the user-provided name will be placed in the name parameter field for create-instance.)SH
14 /Times-Bold AF
6120 28506 MT
(4.1. Action Buttons)SH
11 /Times-Roman AF
6120 29702 MT
(The action buttons permit the following types of operations:)SH
/Symbol SF
8089 31280 MT
(\267)SH
/Times-Roman SF
8870 XM
(Create Instance:)
28 W( This operation creates an instance of the displayed interactor and, if the user)29 W
8870 32476 MT
(has modified any of the slot values, overrides)
103 W( the values inherited from this interactor with)102 W
8870 33672 MT
(the modified values.  In addition, Lapidary examines the)79 W
/Courier SF
34722 XM
(:start-where)SH
/Times-Roman SF
42997 XM
(field of the new)80 W
8870 34868 MT
(interactor and if the start-where includes an aggregadget, adds the)
426 W( interactor to the)425 W
8870 36064 MT
(aggregadget's behavior slot.)SH
/Symbol SF
8089 37958 MT
(\267)SH
/Times-Roman SF
8870 XM
(Modify: This operation stores any changes that the user has made to the interactor's)
67 W( slots in)68 W
8870 39154 MT
(the interactor.)SH
/Symbol SF
8089 41048 MT
(\267)SH
/Times-Roman SF
8870 XM
(Destroy: This operation destroys the interactor.)SH
/Symbol SF
8089 42942 MT
(\267)SH
/Times-Roman SF
8870 XM
(Save: This operation prompts the user for a file name and then writes out the interactor.)SH
/Symbol SF
8089 44836 MT
(\267)SH
/Times-Roman SF
8870 XM
(C32: This operation brings up C32)
146 W( and displays the interactor in the spreadsheet window.)145 W
8870 46032 MT
(The user can then edit any slot in the interactor.  Any)
127 W( changes the user makes will not be)128 W
8870 47228 MT
(discarded by the)106 W
/Courier SF
16671 XM
(Cancel)SH
/Times-Roman SF
21012 XM
(button. It)
487 W( is)
106 W( generally advisable to bring up the C32 menu only)105 W
/Times-Italic SF
8870 48424 MT
(after)SH
/Times-Roman SF
11305 XM
(the interactor has been created. \050the one exception to)
82 W( this rule is when C32 appears as)83 W
8870 49620 MT
(the result of pressing)
71 W( a formula button.  If the user enters a formula in the formula window,)70 W
8870 50816 MT
(the formula)
165 W( will be installed in the instance\051.  Otherwise the user will end up editing the)166 W
8870 52012 MT
(prototype for the interactor to be created, instead of the interactor itself.)
129 W( The)
531 W( C32 chapter)128 W
8870 53208 MT
(describes how)
32 W( to operate C32 and Section 3.3 describes the modifications Lapidary makes to)33 W
8870 54404 MT
(C32.)SH
/Symbol SF
8089 56298 MT
(\267)SH
/Times-Roman SF
8870 XM
(Cancel: This operation discards)
117 W( any changes the user has made to the dialog box since the)116 W
8870 57494 MT
(last create-instance or modify command.)SH
14 /Times-Bold AF
6120 61312 MT
(4.2. Events)SH
11 /Times-Roman AF
6120 62508 MT
(Lapidary allows the user to define the start, stop, and)
158 W( abort events of an interactor using event cards.)159 W
6120 63704 MT
(Each card defines one event and a list of events can be generated from)
73 W( a deck of cards.  Each interactor)72 W
6120 64900 MT
(dialog box contains buttons that pop up a window for each event that defines a start, stop or)
53 W( abort event.)54 W
6120 66096 MT
(A sample event card is shown in Figure 4-1.  Selecting)47 W
/Courier SF
31015 XM
(Delete this event)47 W
/Times-Roman SF
42651 XM
(will cause this event)
47 W( to)46 W
6120 67292 MT
(be deleted.  However, Lapidary will not)
43 W( allow you to delete an event card if it is the only one that exists.)44 W
/Courier SF
6120 68488 MT
(Add an event)70 W
/Times-Roman SF
14525 XM
(causes a new event to)
70 W( be created.)69 W
/Courier SF
30196 XM
(OK)SH
/Times-Roman SF
31860 XM
(makes the window disappear and generates the)69 W
6120 69684 MT
(event list for the desired event.)SH
6120 71982 MT
(Any combination of)24 W
/Courier SF
15328 XM
(shift)SH
/Times-Roman SF
(,)SH
/Courier SF
19203 XM
(control)SH
/Times-Roman SF
(, and)25 W
/Courier SF
26286 XM
(meta)SH
/Times-Roman SF
29226 XM
(can be selected, but if the)25 W
/Courier SF
40829 XM
(any modifier)25 W
/Times-Roman SF
49074 XM
(button is)25 W
ES
%%Page: 561 24
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 4.4)
SH( Formulas)1800 W
51386 XM
(Page 561)SH
46800 50 8280 4486 UL
11 SS 
1 1 0 1080 58100 GB 
%%BeginDocument: lapidary/event-cards.PS
%!PS-Adobe-2.0
%%Title: event-window
%%Creator: Make-PS-File -- Garnet Version 2.0
%%CreationDate: May 14, 1992, 2:29 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 282 540 509
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.78655463 0.78655463 scale

%
% Begin new window
%
0 -268 translate
gsave
0 824 595 289 ClipToRectangle
0 0 translate
gsave
21 786 550 239 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
35 768 757 68 14 0 false 0 0 0 false 0 0 0 false (Modifiers:) 12 /Courier-Bold DrawText
35 706 695 89 14 0 false 0 0 0 false 0 0 0 false (Mouse Action:) 12 /Courier-Bold DrawText
35 644 633 61 14 0 false 0 0 0 false 0 0 0 false (Keyboard:) 12 /Courier-Bold DrawText
200 768 20 20 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
195 773 20 20 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
198 770 14 14 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
156 768 757 34 14 0 false 0 0 0 false 0 0 0 false (shift) 12 /Courier DrawText
288 768 20 20 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
283 773 20 20 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
286 770 14 14 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
230 768 757 48 14 0 false 0 0 0 false 0 0 0 false (control) 12 /Courier DrawText
356 768 20 20 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
351 773 20 20 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
354 770 14 14 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
318 768 757 28 14 0 false 0 0 0 false 0 0 0 false (meta) 12 /Courier DrawText
478 768 20 20 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
473 773 20 20 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
476 770 14 14 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
386 768 757 82 14 0 false 0 0 0 false 0 0 0 false (any modifier) 12 /Courier DrawText
232.5 712.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
227.5 717.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
227.5 717.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
156 722 711 55 14 0 false 0 0 0 false 0 0 0 false (leftdown) 12 /Courier DrawText
345.5 712.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
340.5 717.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
340.5 717.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
254 722 711 70 14 0 false 0 0 0 false 0 0 0 false (middledown) 12 /Courier DrawText
450.5 712.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
445.5 717.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
445.5 717.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
367 722 711 62 14 0 false 0 0 0 false 0 0 0 false (rightdown) 12 /Courier DrawText
556.5 712.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
551.5 717.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
551.5 717.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
472 722 711 63 14 0 false 0 0 0 false 0 0 0 false (mousedown) 12 /Courier DrawText
217.5 679.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
212.5 684.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
212.5 684.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
156 689 678 40 14 0 false 0 0 0 false 0 0 0 false (leftup) 12 /Courier DrawText
315.5 679.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
310.5 684.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
310.5 684.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
239 689 678 55 14 0 false 0 0 0 false 0 0 0 false (middleup) 12 /Courier DrawText
405.5 679.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
400.5 684.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
400.5 684.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
337 689 678 47 14 0 false 0 0 0 false 0 0 0 false (rightup) 12 /Courier DrawText
496.5 679.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
491.5 684.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
491.5 684.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
427 689 678 48 14 0 false 0 0 0 false 0 0 0 false (mouseup) 12 /Courier DrawText
227.5 717.5 5.5 5.5 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
292 644 633 122 14 0 false 0 0 0 false 0 0 0 false (Specific keypress:) 12 /Courier DrawText
419 646 15 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
265.5 634.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
260.5 639.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
260.5 639.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
156 644 633 88 14 0 false 0 0 0 false 0 0 0 false (Any keypress:) 12 /Courier DrawText
457 816 51 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
452 821 51 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
455 818 45 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
471 816 805 13 14 0 false 0 0 0 false 0 0 0 false (OK) 12 /Courier DrawText
518 816 51 24 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
513 821 51 24 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
516 818 45 18 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
518 816 805 41 14 0 false 0 0 0 false 0 0 0 false (Cancel) 12 /Courier DrawText
45 594 139 34 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
35 604 139 34 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
40 599 129 24 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
62 594 583 84 14 0 false 0 0 0 false 0 0 0 false (Add an event) 12 /Courier DrawText
199 594 139 34 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
189 604 139 34 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
194 599 129 24 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
199 594 583 119 14 0 false 0 0 0 false 0 0 0 false (Delete this event) 12 /Courier DrawText
grestore

grestore

0 824 595 289 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold 
%%BoundingBox: 72 282 540 509

%%EndDocument
 GE /Times-Bold SF
8280 31652 MT
(Figure 4-1:)SH
/Times-Roman SF
14053 XM
(A sample event card deck)SH
8280 33603 MT
(selected then)
54 W( the other modifier buttons will become unselected.  The mouse actions and keyboard items)53 W
8280 34799 MT
(are all mutually exclusive,)
201 W( so selecting one will cause the previously selected item to be deselected.)202 W
8280 35995 MT
(Events like)
105 W( #\134Return can be generated by simply typing ``Return'' in the)104 W
/Courier SF
41727 XM
(Specific keypress)104 W
/Times-Roman SF
53430 XM
(box)SH
8280 37191 MT
(\050quotes are not needed\051.)SH
14 /Times-Bold AF
8280 41009 MT
(4.3. :Start Where)SH
11 /Times-Roman AF
8280 42205 MT
(Every interactor dialog box displays two commonly used start-wheres for an)
144 W( interactor and allows the)145 W
8280 43401 MT
(user to select an)
25 W( alternative one using the)24 W
/Courier SF
26863 XM
(other)SH
/Times-Roman SF
30462 XM
(button \050Figure 4-2\051.  If)24 W
/Courier SF
40846 XM
(other)SH
/Times-Roman SF
44445 XM
(is selected, a dialog box)24 W
8280 44597 MT
(will appear which lists all possible :start-where's. Once the desired start-where is selected,)
57 W( Lapidary will)58 W
8280 45793 MT
(incorporate the selected)
46 W( object in the drawing window into the start-where if it is appropriate \050which it is)45 W
8280 46989 MT
(in all cases but)9 W
/Courier SF
15098 XM
(t)SH
/Times-Roman SF
16042 XM
(and)SH
/Courier SF
17914 XM
(nil)SH
/Times-Roman SF
(\051. If the start-where requires a slot)
9 W( \050which the)10 W
/Courier SF
40134 XM
(list)SH
/Times-Roman SF
43059 XM
(start-where's do\051, Lapidary)10 W
8280 48185 MT
(will request the name of a slot.)SH
8280 50483 MT
(If the user wants a type restriction, then pressing the)64 W
/Courier SF
32165 XM
(type restriction)64 W
/Times-Roman SF
43128 XM
(button will cause)
64 W( Lapidary)63 W
8280 51679 MT
(to request a type restriction. A type restriction can be either an atom)
130 W( \050e.g., opal:text\051 or a list of items)131 W
8280 52875 MT
(\050e.g., \050list opal:text opal:rectangle\051\051. The type restriction button is)
218 W( a toggle button so if it is already)217 W
8280 54071 MT
(selected, selecting it again will cause the type)
17 W( restriction to be removed. Also, selecting a new start-where)18 W
8280 55267 MT
(will cause the type restriction to be removed.)SH
14 /Times-Bold AF
8280 59085 MT
(4.4. Formulas)SH
11 /Times-Roman AF
8280 60281 MT
(Selecting a formula)
1 W( button in any of the interactor dialog boxes causes the interactor to be displayed in the)SH
8280 61477 MT
(C32 spreadsheet window and the current value of the slot associated)
225 W( with the formula button to be)226 W
8280 62673 MT
(displayed in a C32 formula window. This value can then be edited into a formula.)
32 W( When the)31 W
/Courier SF
49602 XM
(OK)SH
/Times-Roman SF
51228 XM
(button is)31 W
8280 63869 MT
(pressed in the formula)
112 W( window, C32 disappears and the formula is batched with the other changes that)113 W
8280 65065 MT
(have been made to the interactor since the last)1 W
/Courier SF
28844 XM
(Create Instance)1 W
/Times-Roman SF
39021 XM
(or)SH
/Courier SF
40213 XM
(Modify)SH
/Times-Roman SF
44449 XM
(command. The)
276 W( formula)SH
8280 66261 MT
(is not actually installed until the)210 W
/Courier SF
23902 XM
(Create Instance)210 W
/Times-Roman SF
34497 XM
(or)SH
/Courier SF
35898 XM
(Modify)SH
/Times-Roman SF
40343 XM
(buttons are selected. If the user)211 W
8280 67457 MT
(selects)SH
/Courier SF
11652 XM
(Cancel)SH
/Times-Roman SF
16052 XM
(in the interactor dialog box, the formula will be discarded. The formula will also be)165 W
8280 68653 MT
(discarded if the user selects)SH
/Courier SF
20649 XM
(Cancel)SH
/Times-Roman SF
24884 XM
(in the C32 formula window.)SH
ES
%%Page: 562 25
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 562)
SH( Lapidary)830 W
42928 XM
(Interactors Chapter)
1550 W( 4)SH
46800 50 6120 4486 UL
14 /Times-Bold AF
6120 8138 MT
(4.5. Specific Interactors)SH
12 SS 
6120 11822 MT
(4.5.1. Choice Interactor)SH
11 /Times-Roman AF
6120 13018 MT
(The choice interactor dialog box allows the user to create either a button interactor)
113 W( or menu interactor,)114 W
6120 14214 MT
(depending on whether the)101 W
/Courier SF
18192 XM
(menu)SH
/Times-Roman SF
21208 XM
(or)SH
/Courier SF
22500 XM
(button)SH
/Times-Roman SF
26836 XM
(radio button is selected)
101 W( \050Figure 4-2\051.  The other slots that)100 W
6120 15410 MT
(can be set using this dialog box are:)SH
7 10 0 8100 62526 GB 
%%BeginDocument: lapidary/choice-inter.PS
%!PS-Adobe-2.0
%%Title: choice interactor
%%Creator: Make-PS-File -- Garnet Version 2.0
%%CreationDate: May 14, 1992, 2:30 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 136 540 656
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.8666667 0.8666667 scale

%
% Begin new window
%
0 -74 translate
gsave
0 748 540 600 ClipToRectangle
0 0 translate
gsave
10 738 716 267 28 0 false 0 0 0 false 0 0 0 false (Choice of Items Interactor) 24 /Times-BoldItalic DrawText
20 699 688 109 14 0 false 0 0 0 false 0 0 0 false (Interactor Name:) 12 /Courier-Bold DrawText
134 701 150 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
20 667 368 137 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 674 91 14 0 0 0 0 false 0 0 [] -1 1 1.00 1.00 1.00 true DrawRectangle
35 674 663 81 14 0 false 0 0 0 false 0 0 0 false (:start-where) 12 /Courier-Bold DrawText
181.5 637.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
176.5 642.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
176.5 642.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
35 647 636 125 14 0 false 0 0 0 false 0 0 0 false (Aggregate of items) 12 /Courier DrawText
202 650 125 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
132.5 595.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
127.5 600.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
127.5 600.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
35 605 594 76 14 0 false 0 0 0 false 0 0 0 false (Single item) 12 /Courier DrawText
153 608 125 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
50 627 616 12 14 0 false 0 0 0 false 0 0 0 false (or) 12 /Courier DrawText
50 585 574 12 14 0 false 0 0 0 false 0 0 0 false (or) 12 /Courier DrawText
40 562 45 26 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
35 567 45 26 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
38 564 39 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
41 561 550 33 14 0 false 0 0 0 false 0 0 0 false (Other) 12 /Courier DrawText
94 562 125 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
354 559 20 20 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
349 564 20 20 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
352 561 14 14 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
228 559 548 116 14 0 false 0 0 0 false 0 0 0 false (Type restriction:) 12 /Courier DrawText
412 733 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
407 738 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
411 734 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
414 731 720 103 14 0 false 0 0 0 false 0 0 0 false (CREATE INSTANCE) 12 /Courier DrawText
412 695 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
407 700 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
411 696 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
444 693 682 42 14 0 false 0 0 0 false 0 0 0 false (MODIFY) 12 /Courier DrawText
412 657 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
407 662 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
411 658 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
441 655 644 49 14 0 false 0 0 0 false 0 0 0 false (DESTROY) 12 /Courier DrawText
412 619 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
407 624 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
411 620 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
452 617 606 26 14 0 false 0 0 0 false 0 0 0 false (SAVE) 12 /Courier DrawText
412 581 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
407 586 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
411 582 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
420 579 568 90 14 0 false 0 0 0 false 0 0 0 false (PRINT KR NAME) 12 /Courier DrawText
412 543 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
407 548 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
411 544 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
445 541 530 40 14 0 false 0 0 0 false 0 0 0 false (CANCEL) 12 /Courier DrawText
20 514 454 51 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 521 96 14 0 0 0 0 false 0 0 [] -1 1 1.00 1.00 1.00 true DrawRectangle
35 521 510 86 14 0 false 0 0 0 false 0 0 0 false (:feedback-obj) 12 /Courier-Bold DrawText
167.5 483.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
162.5 488.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
162.5 488.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
35 493 482 111 14 0 false 0 0 0 false 0 0 0 false (Interim Feedback) 12 /Courier DrawText
188 496 125 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
338 496 60 26 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
333 501 60 26 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
336 498 54 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
339 495 484 48 14 0 false 0 0 0 false 0 0 0 false (By Demo) 12 /Courier DrawText
455.5 483.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
450.5 488.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
450.5 488.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
407 493 482 27 14 0 false 0 0 0 false 0 0 0 false (None) 12 /Courier DrawText
450.5 488.5 5.5 5.5 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
20 447 441 51 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 454 138 14 0 0 0 0 false 0 0 [] -1 1 1.00 1.00 1.00 true DrawRectangle
35 454 443 128 14 0 false 0 0 0 false 0 0 0 false (:final-feedback-obj) 12 /Courier-Bold DrawText
154.5 416.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
149.5 421.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
149.5 421.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
35 426 415 98 14 0 false 0 0 0 false 0 0 0 false (Final Feedback) 12 /Courier DrawText
175 429 125 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
325 429 60 26 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
320 434 60 26 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
323 431 54 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
326 428 417 48 14 0 false 0 0 0 false 0 0 0 false (By Demo) 12 /Courier DrawText
442.5 416.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
437.5 421.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
437.5 421.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
394 426 415 27 14 0 false 0 0 0 false 0 0 0 false (None) 12 /Courier DrawText
437.5 421.5 5.5 5.5 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
79.5 370.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
74.5 375.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
74.5 375.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
30 380 369 28 14 0 false 0 0 0 false 0 0 0 false (Menu) 12 /Courier DrawText
159.5 370.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
154.5 375.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
154.5 375.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
96 380 369 42 14 0 false 0 0 0 false 0 0 0 false (Button) 12 /Courier DrawText
74.5 375.5 5.5 5.5 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
30 348 337 102 14 0 false 0 0 0 false 0 0 0 false (Final Function:) 12 /Courier-Bold DrawText
137 350 150 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
20 316 404 109 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 323 63 14 0 0 0 0 false 0 0 [] -1 1 1.00 1.00 1.00 true DrawRectangle
35 323 312 53 14 0 false 0 0 0 false 0 0 0 false (:how-set) 12 /Courier-Bold DrawText
76.5 286.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
71.5 291.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
71.5 291.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
35 296 285 20 14 0 false 0 0 0 false 0 0 0 false (Set) 12 /Courier DrawText
147.5 286.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
142.5 291.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
142.5 291.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
93 296 285 33 14 0 false 0 0 0 false 0 0 0 false (Clear) 12 /Courier DrawText
226.5 286.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
221.5 291.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
221.5 291.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
164 296 285 41 14 0 false 0 0 0 false 0 0 0 false (Toggle) 12 /Courier DrawText
325.5 286.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
320.5 291.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
320.5 291.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
243 296 285 61 14 0 false 0 0 0 false 0 0 0 false (<formula>) 12 /Courier DrawText
112.5 253.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
107.5 258.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
107.5 258.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
35 263 252 56 14 0 false 0 0 0 false 0 0 0 false (List-Add) 12 /Courier DrawText
226.5 253.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
221.5 258.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
221.5 258.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
129 263 252 76 14 0 false 0 0 0 false 0 0 0 false (List-Toggle) 12 /Courier DrawText
340.5 253.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
335.5 258.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
335.5 258.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
243 263 252 76 14 0 false 0 0 0 false 0 0 0 false (List-Remove) 12 /Courier DrawText
71.5 291.5 5.5 5.5 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
35 236 225 87 14 0 false 0 0 0 false 0 0 0 false (increment by:) 12 /Courier DrawText
127 238 100 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
241 236 225 67 14 0 false 0 0 0 false 0 0 0 false (max value:) 12 /Courier DrawText
313 238 100 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
40 188 97 34 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
30 198 97 34 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
35 193 87 24 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
40 188 177 76 14 0 false 0 0 0 false 0 0 0 false (Start-Event) 12 /Courier DrawText
152 188 97 34 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
142 198 97 34 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
147 193 87 24 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
156 188 177 69 14 0 false 0 0 0 false 0 0 0 false (Stop-Event) 12 /Courier DrawText
264 188 97 34 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
254 198 97 34 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
259 193 87 24 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
264 188 177 77 14 0 false 0 0 0 false 0 0 0 false (Abort-Event) 12 /Courier DrawText
grestore

grestore

0 748 540 600 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold /Times-BoldItalic 
%%BoundingBox: 72 136 540 656

%%EndDocument
 GE /Times-Bold SF
6120 54758 MT
(Figure 4-2:)SH
/Times-Roman SF
11893 XM
(Choice interactor dialog box)SH
/Symbol SF
8089 56834 MT
(\267)SH
/Times-Roman SF
8870 XM
(:start-where. If the user selects either)82 W
/Courier SF
25883 XM
(aggregadget of items)83 W
/Times-Roman SF
39607 XM
(or)SH
/Courier SF
40881 XM
(single item)83 W
/Times-Roman SF
48582 XM
(and)SH
8870 58030 MT
(there is a least one selection in a drawing window \050it may be either)
85 W( a primary or secondary)84 W
8870 59226 MT
(selection\051, then start-where's with)202 W
/Courier SF
24919 XM
(:element-of)SH
/Times-Roman SF
32656 XM
(and)SH
/Courier SF
34722 XM
(:in-box)SH
/Times-Roman SF
39820 XM
(are generated with the)203 W
8870 60422 MT
(selected object.)SH
/Symbol SF
8089 62316 MT
(\267)SH
/Times-Roman SF
8870 XM
(:feedback-obj. Selecting the radio button)
81 W( associated with)80 W
/Courier SF
34666 XM
(interim feedback)80 W
/Times-Roman SF
45661 XM
(will cause)80 W
8870 63512 MT
(the selected object in the Lapidary drawing windows to become the interim feedback)
35 W( for this)36 W
8870 64708 MT
(interactor. If this object is constrained to one of the)
33 W( objects that satisfies the start-where or to)32 W
8870 65904 MT
(a component of one of these objects, Lapidary will automatically generalize the)
SH( constraints so)1 W
8870 67100 MT
(that the object can appear with any of the objects in the start-where.)SH
8870 68994 MT
(The user can also use the)74 W
/Courier SF
20614 XM
(by-demo)SH
/Times-Roman SF
25583 XM
(option to demonstrate interim feedback.)
74 W( Lapidary)
421 W( will)73 W
8870 70190 MT
(pop up an OK/Cancel)
51 W( box when an object that satisfies the start-where is selected.  The user)52 W
8870 71386 MT
(can then use the various Lapidary menus to modify this object so that it)
113 W( looks as it should)112 W
ES
%%Page: 563 26
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 4.5)
SH( Specific)
1800 W( Interactors)SH
51386 XM
(Page 563)SH
46800 50 8280 4486 UL
11 SS 
11030 7955 MT
(when the object's)10 W
/Courier SF
19093 XM
(:interim-selected)SH
/Times-Roman SF
30598 XM
(slot is set.  Once the desired)
10 W( look is achieved, the)11 W
11030 9151 MT
(user selects OK and the changes will be installed so that the object looks like its original)
34 W( self)33 W
11030 10347 MT
(when it)
222 W( is not interim selected, and will look like the by-demo copy when it is interim)223 W
11030 11543 MT
(selected.)SH
11030 13437 MT
(Lapidary implements the)
82 W( by-demo operation by comparing the values of the following slots)81 W
11030 14633 MT
(in the original object)
209 W( and the copied object:)210 W
/Courier SF
32560 XM
(:left, :top, :width, :height,)210 W
11030 15829 MT
(:visible, :draw-function, :font, :string, :line-style,)1415 W
11030 17025 MT
(:filling-style, :x1, :x2, :y1, :y2)SH
/Times-Roman SF
(.)SH
11030 18919 MT
(The last option the user can choose is)306 W
/Courier SF
30218 XM
(none)SH
/Times-Roman SF
33439 XM
(in which)
306 W( case nil will be stored in the)307 W
/Courier SF
11030 20115 MT
(:feedback-obj)SH
/Times-Roman SF
19893 XM
(slot. This will)
8 W( not undo the effects of a by-demo operation since by-demo)7 W
11030 21311 MT
(also places nil in the)SH
/Courier SF
20287 XM
(:feedback-obj)SH
/Times-Roman SF
29142 XM
(slot.)SH
/Symbol SF
10249 23205 MT
(\267)SH
/Times-Roman SF
11030 XM
(:final-feedback. The options for final feedback are identical to those for)62 W
/Courier SF
43475 XM
(:feedback-obj)SH
/Times-Roman SF
(.)SH
11030 24401 MT
(The by-demo)
74 W( changes will appear when the object's)73 W
/Courier SF
34827 XM
(:selected)SH
/Times-Roman SF
41115 XM
(slot is set to)73 W
/Courier SF
46909 XM
(t)SH
/Times-Roman SF
(. Multiple)421 W
11030 25597 MT
(final feedback objects can be created by selecting several objects)
233 W( and pressing the final)234 W
11030 26793 MT
(feedback button.  Lapidary will then bring up C32 and)
90 W( prompt the designer for a constraint)89 W
11030 27989 MT
(that determines when to use each kind of feedback object at run-time.)SH
/Symbol SF
10249 29883 MT
(\267)SH
/Times-Roman SF
11030 XM
(:final-function. The user can type in the name of a function that should be)
105 W( called when the)106 W
11030 31079 MT
(interactor completes.)SH
/Symbol SF
10249 32973 MT
(\267)SH
/Times-Roman SF
11030 XM
(:how-set. The user can set the)271 W
/Courier SF
26003 XM
(:how-set)SH
/Times-Roman SF
31829 XM
(slot by selecting a radio button or)
271 W( entering)270 W
11030 34169 MT
(numbers in the)SH
/Courier SF
17843 XM
(increment-by)SH
/Times-Roman SF
26038 XM
(and \050optionally\051)SH
/Courier SF
33370 XM
(max value)SH
/Times-Roman SF
39585 XM
(fields.)SH
12 /Times-Bold AF
8280 37853 MT
(4.5.2. Move/Grow Interactor)SH
11 /Times-Roman AF
8280 39049 MT
(The move/grow)
32 W( interactor dialog box \050Figure 4-3\051 allows the user to specify a move/grow interactor. The)33 W
8280 40245 MT
(slots that can be set using this dialog box are:)SH
/Symbol SF
10249 41823 MT
(\267)SH
/Times-Roman SF
11030 XM
(:start-where. If the user selects either)220 W
/Courier SF
28871 XM
(Object to Press Over)219 W
/Times-Roman SF
43222 XM
(or)SH
/Courier SF
44632 XM
(One of This)219 W
11030 43019 MT
(Aggregate)SH
/Times-Roman SF
17416 XM
(and there is at least one selection in a drawing window \050it may be)
171 W( either a)172 W
11030 44215 MT
(primary or secondary selection\051, then start-where's)
438 W( with :in-box and :element-of are)437 W
11030 45411 MT
(generated with the selected object.)SH
/Symbol SF
10249 47305 MT
(\267)SH
/Times-Roman SF
11030 XM
(:line-p. This slot is)
80 W( set by the)81 W
/Courier SF
24612 XM
(Line)SH
/Times-Roman SF
27608 XM
(and)SH
/Courier SF
29552 XM
(Box)SH
/Times-Roman SF
31888 XM
(buttons. If)
437 W( a formula is selected, the formula)81 W
11030 48501 MT
(should return)36 W
/Courier SF
17211 XM
(t)SH
/Times-Roman SF
18181 XM
(if the interactor is moving/growing a line, and)35 W
/Courier SF
38960 XM
(nil)SH
/Times-Roman SF
41250 XM
(if it is moving/growing a)35 W
11030 49697 MT
(box object.)SH
/Symbol SF
10249 51591 MT
(\267)SH
/Times-Roman SF
11030 XM
(:grow-p. This slot is set by the)10 W
/Courier SF
24728 XM
(Grow)SH
/Times-Roman SF
27653 XM
(and)SH
/Courier SF
29526 XM
(Move)SH
/Times-Roman SF
32451 XM
(buttons. If)
295 W( a)
10 W( formula is selected, the formula)11 W
11030 52787 MT
(should return)SH
/Courier SF
17140 XM
(t)SH
/Times-Roman SF
18075 XM
(if the interactor is growing an object, and)SH
/Courier SF
36494 XM
(nil)SH
/Times-Roman SF
38749 XM
(if it is moving an object.)SH
/Symbol SF
10249 54681 MT
(\267)SH
/Times-Roman SF
11030 XM
(:min-length. Specifies a minimum length for lines.)SH
/Symbol SF
10249 56575 MT
(\267)SH
/Times-Roman SF
11030 XM
(:min-width. Specifies a minimum width for box objects.)SH
/Symbol SF
10249 58469 MT
(\267)SH
/Times-Roman SF
11030 XM
(:min-height. Specifies a minimum height for box objects.)SH
/Symbol SF
10249 60363 MT
(\267)SH
/Times-Roman SF
11030 XM
(:obj-to-change. The user can let the move/grow)
43 W( interactor modify the object that satisfies the)42 W
11030 61559 MT
(start-where, present an example object to)
12 W( change to Lapidary or use a formula to compute the)13 W
11030 62755 MT
(object to change.  This slot would be set if the interaction should start over)
29 W( a feedback object)28 W
11030 63951 MT
(such as selection handles, but should actually move the object under the feedback object.)SH
11030 65845 MT
(If the user presents an example object to change to Lapidary by selecting an object)
206 W( and)207 W
11030 67041 MT
(pressing the)294 W
/Courier SF
17178 XM
(Change this)
294 W( object)293 W
/Times-Roman SF
30213 XM
(button, Lapidary will automatically construct a)293 W
11030 68237 MT
(formula so that the interactor changes the correct object)
74 W( at run-time. For example, in Figure)75 W
11030 69433 MT
(4-3, the user)
85 W( wants the move interactor to start over one of the selection handles, but wants)84 W
11030 70629 MT
(the object highlighted by the selection handles moved. The user can specify that)
343 W( the)344 W
11030 71825 MT
(interactor should start over the selection handles by selecting the aggregate)
148 W( containing the)147 W
ES
%%Page: 564 27
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 564)
SH( Lapidary)830 W
42928 XM
(Interactors Chapter)
1550 W( 4)SH
46800 50 6120 4486 UL
11 SS 
8870 7955 MT
(selection handles and pressing)
318 W( the)319 W
/Courier SF
25705 XM
(One of This Aggregate)319 W
/Times-Roman SF
41116 XM
(radio button in the)319 W
8870 9151 MT
(move/grow dialog box. The user can)
212 W( specify that the object highlighted by the selection)211 W
8870 10347 MT
(handles at run-time should be the object changed by)
148 W( selecting the example object that the)149 W
8870 11543 MT
(selection handles currently)
134 W( highlight and pressing the)133 W
/Courier SF
33540 XM
(Change this object)133 W
/Times-Roman SF
46094 XM
(button in)133 W
8870 12739 MT
(the move/grow dialog box.)
128 W( Occasionally)
533 W( Lapidary may not be able to determine from the)129 W
8870 13935 MT
(start-where objects which object should be changed at run-time.  In this)
103 W( case Lapidary will)102 W
8870 15131 MT
(give the user the choice of entering a formula or of having)
27 W( the example object selected as the)28 W
8870 16327 MT
(obj-to-change be the actual object changed at run-time.)SH
/Symbol SF
8089 18221 MT
(\267)SH
/Times-Roman SF
8870 XM
(:final-function. The user can)
106 W( type in the name of a function that should be called when the)105 W
8870 19417 MT
(interactor completes.)SH
/Symbol SF
8089 21311 MT
(\267)SH
/Times-Roman SF
8870 XM
(:feedback-obj. An interim feedback)
80 W( object can be created by creating the desired object and)81 W
8870 22507 MT
(pressing the interim-feedback button.  Constraints)
278 W( will be automatically attached to the)277 W
8870 23703 MT
(feedback object that cause it to move or grow appropriately, and that)
15 W( make it visible/invisible)16 W
8870 24899 MT
(at the appropriate times.  If multiple objects are selected,)
145 W( Lapidary will bring up C32 and)144 W
8870 26095 MT
(prompt the designer for a constraint that determines when)
6 W( to use each kind of feedback object)7 W
8870 27291 MT
(at run-time.)SH
/Symbol SF
8089 29185 MT
(\267)SH
/Times-Roman SF
8870 XM
(:attach-point. Controls where the mouse will attach to the object.)SH
6120 31483 MT
(The grow and)
54 W( move parameters allow the user to control which slots in the object that is being grown or)53 W
6120 32679 MT
(moved will actually be set. If a formula is entered, it must return a)
135 W( value that can be used by the slot)136 W
6120 33875 MT
(:slots-to-set \050see the Interactors chapter for more details on this slot\051.)SH
6120 36173 MT
(Example: To create an interactor that moves a box,)SH
8321 37626 MT
(1.)SH
9421 XM
(Create the box and leave it selected)SH
8321 39520 MT
(2.)SH
9421 XM
(Select interactors from the editor menu and then select move/grow)SH
8321 41414 MT
(3.)SH
9421 XM
(In :start-where click)
117 W( on ``Object to Press Over''.  This will cause the selected rectangle's)116 W
9420 42610 MT
(KR name to be displayed.)SH
8321 44504 MT
(4.)SH
9421 XM
(Press the CREATE INSTANCE action button)SH
6120 46802 MT
(To test the interactor press test button in the editor menu and drag it around.)SH
12 /Times-Bold AF
6120 50486 MT
(4.5.3. Two Point Interactor)SH
11 /Times-Roman AF
6120 51682 MT
(The two point interactor dialog box)
69 W( \050Figure 4-4\051 allows a user to create a two point interactor. The slots)70 W
6120 52878 MT
(that can be set using this dialog box are:)SH
/Symbol SF
8089 54456 MT
(\267)SH
/Times-Roman SF
8870 XM
(:start-where. If the user selects)31 W
/Courier SF
22767 XM
(Start Anywhere in Window)31 W
/Times-Roman SF
39006 XM
(then a start-where with)30 W
/Courier SF
49510 XM
(t)SH
/Times-Roman SF
8870 55652 MT
(is generated. if the user selects)177 W
/Courier SF
23645 XM
(Start in Box)178 W
/Times-Roman SF
32374 XM
(and there is at least one selection in a)178 W
8870 56848 MT
(drawing window \050it may be either a primary or secondary)
51 W( selection\051, then a start-where with)50 W
8870 58044 MT
(:in-box is generated with the selected object.)SH
/Symbol SF
8089 59938 MT
(\267)SH
/Times-Roman SF
8870 XM
(:line-p. This slot is set by the)
244 W( buttons)245 W
/Courier SF
27357 XM
(Create Line)245 W
/Times-Roman SF
35382 XM
(and)SH
/Courier SF
37490 XM
(Create Non-Line)245 W
/Times-Roman SF
(. If a)245 W
8870 61134 MT
(formula is selected, the formula should return)23 W
/Courier SF
29375 XM
(t)SH
/Times-Roman SF
30333 XM
(if the interactor is creating a)
23 W( line, and)22 W
/Courier SF
47221 XM
(nil)SH
/Times-Roman SF
49498 XM
(if)SH
8870 62330 MT
(it is creating a box object.)SH
/Symbol SF
8089 64224 MT
(\267)SH
/Times-Roman SF
8870 XM
(:min-length. Specifies a minimum length for lines.)SH
/Symbol SF
8089 66118 MT
(\267)SH
/Times-Roman SF
8870 XM
(:min-width. Specifies a minimum width for box objects.)SH
/Symbol SF
8089 68012 MT
(\267)SH
/Times-Roman SF
8870 XM
(:min-height. Specifies a minimum height for box objects.)SH
/Symbol SF
8089 69906 MT
(\267)SH
/Times-Roman SF
8870 XM
(:flip-if-change-side. Indicates whether a box may flip over when it is being created.)SH
/Symbol SF
8089 71800 MT
(\267)SH
/Times-Roman SF
8870 XM
(:abort-if-too-small. Indicates whether the operation should be aborted if the)
206 W( object is too)207 W
ES
%%Page: 565 28
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 4.5)
SH( Specific)
1800 W( Interactors)SH
51386 XM
(Page 565)SH
46800 50 8280 4486 UL
46800 50 8280 8155 UL
11 SS 
6 10 0 3000 68048 GB 
%%BeginDocument: lapidary/move-behavior-a.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: Drawing Window 2
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Jul 5, 1993, 12:07 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 188 317 423 476
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
               % cap join dash thickness fill-color => -
    EllipseDict begin
        /fill-color exch def /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /endangle exch def /startangle exch def
        /yrad exch def  /xrad exch def /y exch def /x exch def
        /savematrix mtrx currentmatrix def
        % Draw the filling
        gsave
            newpath
            x y translate
            xrad thickness sub yrad thickness sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-color FillShape
            newpath
            x y translate
            xrad thickness 2 div sub yrad thickness 2 div sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-color
            0 % line-cap
            line-join dash-pattern thickness
            StrokeShape
        grestore
    end
} def

/RoundtanglePath { % left top width height radius => -
    /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
    /right l w add def  /bottom t h sub def
    l r add t moveto                         % origin
    right t right t r sub r arcto            % top side
    right bottom right r sub bottom r arcto  % right side
    l bottom l bottom r add r arcto          % bottom side
    l t l r add t r arcto                    % left side
    16 {pop} repeat  % each arcto accumulates 4 stack parameters
} def

/RoundtangleDict 27 dict def
/DrawRoundtangle { % left top width height radius line-color
                   % cap join dash thickness fill-color => -
    gsave RoundtangleDict begin
        /fill-color exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        
        % Draw filling
        newpath
        left thickness add top thickness sub
        width thickness 2 mul sub height thickness 2 mul sub
        radius thickness sub dup 0 lt { pop 0 } if RoundtanglePath
        fill-color FillShape

        left thickness 2 div add top thickness 2 div sub
        width thickness sub height thickness sub
        radius thickness 2 div sub dup 0 lt { pop 0 } if RoundtanglePath

        % Draw border
        line-color line-cap line-join dash-pattern thickness
        StrokeShape
    end grestore
} def


/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/PolylineDict 20 dict def
/DrawPolyline { % x1 y1 {{x y ...} ...} line-color
                % join cap dash thickness fill-color => -
    gsave PolylineDict begin
        /fill-color exch def  /thickness exch def  /dash-pattern exch def
        /line-join exch def  /line-cap exch def  /line-color exch def
        % Don't draw the path of the fill if the filling-style is null.
        fill-color null eq not {
                3 copy
                newpath
                3 1 roll moveto
                { aload length 2 idiv { lineto } repeat } forall
                fill-color FillShape
                } if

        newpath
        .5 -.5 translate

        % Stroke after every sub-array to avoid a limitcheck error
        2 index 2 index moveto
        { aload length 2 sub 2 idiv { lineto } repeat
        2 copy lineto
        line-color line-cap line-join dash-pattern thickness StrokeShape
        moveto
        } forall

        currentpoint
        3 -1 roll sub abs .01 lt
        3 1 roll sub abs .01 lt and {
          0 0 rlineto closepath
        } if

        line-color line-cap line-join dash-pattern
        thickness
%       dup -1 ne { .5 add } if % fudge outline width thicker
        StrokeShape

    end grestore
} def

/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale
116 404 translate

%
% Begin new window
%
gsave
0 0 235 159 ClipToRectangle
gsave
0 0 235 159 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
0 0 translate
0 0 235 159 ClipToRectangle
gsave
16 -48 102 51 [0 0 0] 0 0 [] 1 null DrawRectangle
10 -42 13 13 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
111 -42 13 13 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
10 -92 13 13 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
111 -92 13 13 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
58 -67 102 51 [0 0 0] 0 0 [4 4] 1 null DrawRectangle
[0 0 0] 0 0 [] 1 138 -67 179 -35 DrawLine
149 -65 {
  { 143 -57 138 -67 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
138 -18 -30 82 15 false [0 0 0] [1 1 1] (interim feedback) 12 /Times-Roman DrawText
6 -130 -142 75 15 false [0 0 0] [1 1 1] (obj-to-change) 12 /Times-Roman DrawText
15 -6 -18 100 15 false [0 0 0] [1 1 1] (objects to start over) 12 /Times-Roman DrawText
[0 0 0] 0 0 [] 1 21 -92 65 -23 DrawLine
30 -87 {
  { 22 -81 21 -92 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
[0 0 0] 0 0 [] 1 111 -93 65 -23 DrawLine
110 -82 {
  { 102 -88 111 -93 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
[0 0 0] 0 0 [] 1 107 -43 65 -23 DrawLine
100 -34 {
  { 96 -44 107 -43 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
[0 0 0] 0 0 [] 1 24 -42 65 -23 DrawLine
35 -43 {
  { 31 -33 24 -42 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
[0 0 0] 0 0 [] 1 48 -99 43 -130 DrawLine
41 -108 {
  { 51 -110 48 -99 }
} [0 0 0] 0 0 [] 1 null DrawPolyline
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Times-Roman 
%%BoundingBox: 188 317 423 476

%%EndDocument
 GE 6 10 0 20400 53348 GB 
%%BeginDocument: lapidary/move-inter.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: Move/Grow Interactor
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Aug 14, 1993, 7:51 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 133 72 478 720
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
               % cap join dash thickness fill-color => -
    EllipseDict begin
        /fill-color exch def /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /endangle exch def /startangle exch def
        /yrad exch def  /xrad exch def /y exch def /x exch def
        /savematrix mtrx currentmatrix def
        % Draw the filling
        gsave
            newpath
            x y translate
            xrad thickness sub yrad thickness sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-color FillShape
            newpath
            x y translate
            xrad thickness 2 div sub yrad thickness 2 div sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-color
            0 % line-cap
            line-join dash-pattern thickness
            StrokeShape
        grestore
    end
} def

/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/DefImage { % image-name font-name w h string => -
  20 dict begin
    /ImageString exch def /ImageHeight exch def /ImageWidth exch def
    /FontName exch def
    /ImageName exch def
    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def
    /Encoding [
      /image 255 { /.notdef } repeat
    ] def
    /BuildChar { % font char => -
      pop begin
        1 0
        0 0 1 1 setcachedevice
        gsave
          ImageWidth ImageHeight false
          [ ImageWidth 0 0 ImageHeight 0 0 ]
          {ImageString} imagemask
        grestore
      end
    } def
    ImageName currentdict definefont
    FontName exch
    ImageName ImageString
  end
  def def
} def


/FillPattern { % fgR fgG fgB [bgR bgG bgB] opaque? top font => -
  50 dict begin gsave
    /font exch def
    /top exch def
    /opaque? exch def
    /w font /ImageWidth get def
    /h font /ImageHeight get def
    font [w 0 0 h 0 0] makefont setfont
    pathbbox
    /y1 exch def /x1 exch def
    /y0 exch def /x0 exch def
    clip
    opaque? {
      gsave
        setrgbcolor
        fill
      grestore
    } if
    newpath
    setrgbcolor
    /y0 y0 top sub h div floor h mul top add cvi def
    /x0 x0 w div floor w mul cvi def
    x0 y0 translate
    /W x1 x0 sub w div ceiling cvi 1 add def
    /H y1 y0 sub h div ceiling cvi def
    /s W string def
    H {
      0 0 moveto
      s show
      0 h translate
    } repeat
  grestore end
  newpath
} def


/PolylineDict 20 dict def
/DrawPolyline { % x1 y1 {{x y ...} ...} line-color
                % join cap dash thickness fill-color => -
    gsave PolylineDict begin
        /fill-color exch def  /thickness exch def  /dash-pattern exch def
        /line-join exch def  /line-cap exch def  /line-color exch def
        % Don't draw the path of the fill if the filling-style is null.
        fill-color null eq not {
                3 copy
                newpath
                3 1 roll moveto
                { aload length 2 idiv { lineto } repeat } forall
                fill-color FillShape
                } if

        newpath
        .5 -.5 translate

        % Stroke after every sub-array to avoid a limitcheck error
        2 index 2 index moveto
        { aload length 2 sub 2 idiv { lineto } repeat
        2 copy lineto
        line-color line-cap line-join dash-pattern thickness StrokeShape
        moveto
        } forall

        currentpoint
        3 -1 roll sub abs .01 lt
        3 1 roll sub abs .01 lt and {
          0 0 rlineto closepath
        } if

        line-color line-cap line-join dash-pattern
        thickness
%       dup -1 ne { .5 add } if % fudge outline width thicker
        StrokeShape

    end grestore
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawGenericWindowFrame { % label left top w h
                          % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def

/image-1 /image-1-font 4 4 <
00 00 00 00>
DefImage


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.61 0.61 scale
100 1059 translate

%
% Begin new window
%
gsave
0 0 564 1059 ClipToRectangle
gsave
0 0 564 1059 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
2 -23 translate
(Move/Grow Interactor) 0 0 560 1034 2 23 2 2 DrawGenericWindowFrame
0 0 560 1034 ClipToRectangle
gsave
540 -40 20 954 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
540 0 20 20 [0 0 0] 0 0 [] 1 null DrawRectangle
550 -3 {
  { 550 -3 557 -10 553 -10 553 -17 547 -17 547 -10 543 -10 }
} [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawPolyline
540 -1014 20 20 [0 0 0] 0 0 [] 1 null DrawRectangle
550 -1031 {
  { 550 -1031 557 -1024 553 -1024 553 -1017 547 -1017 547 -1024 543 -1024 }
} [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawPolyline
540 -20 20 20 [0 0 0] 0 0 [] 1 null DrawRectangle
550 -24 {
  { 550 -24 557 -31 543 -31 }
} [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawPolyline
550 -28 {
  { 550 -28 557 -35 543 -35 }
} [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawPolyline
540 -994 20 20 [0 0 0] 0 0 [] 1 null DrawRectangle
550 -1010 {
  { 550 -1010 557 -1003 543 -1003 }
} [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawPolyline
550 -1006 {
  { 550 -1006 557 -999 543 -999 }
} [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawPolyline
541 -40 18 18 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
grestore


%
% Begin new window
%
gsave
0 0 translate
() 0 0 540 1034 0 0 0 0 DrawGenericWindowFrame
0 0 540 1034 ClipToRectangle
gsave
grestore


%
% Begin new window
%
gsave
0 0 translate
() 0 0 539 1039 0 0 0 0 DrawGenericWindowFrame
0 0 539 1039 ClipToRectangle
gsave
10 -10 -32 229 28 false [0 0 0] [1 1 1] (Move/Grow Interactor) 24 /Times-BoldItalic DrawText
20 -49 -60 109 14 false [0 0 0] [1 1 1] (Interactor Name:) 12 /Courier-Bold DrawText
140 -49 -60 77 14 false [0 0 0] [1 1 1] (MYMOVEINTER) 12 /Courier DrawText
134 -47 150 18 [0 0 0] 0 0 [] 1 null DrawRectangle
20 -81 368 137 [0 0 0] 0 0 [] 1 null DrawRectangle
30 -74 91 14 [0 0 0] 0 0 [] -1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
35 -74 -85 81 14 false [0 0 0] [1 1 1] (:start-where) 12 /Courier-Bold DrawText
194.5 -110.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
189.5 -105.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
189.5 -105.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
35 -101 -112 138 14 false [0 0 0] [1 1 1] (Object to Press Over) 12 /Courier DrawText
215 -98 160 20 [0 0 0] 0 0 [] 1 null DrawRectangle
201.5 -152.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
196.5 -147.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
196.5 -147.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
35 -143 -154 145 14 false [0 0 0] [1 1 1] (One of This Aggregate) 12 /Courier DrawText
196.5 -147.5 5.5 5.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
222 -140 160 20 [0 0 0] 0 0 [] 1 null DrawRectangle
225 -142 -153 146 14 false [0 0 0] [1 1 1] (BOX-SELECTION-HANDLES) 12 /Courier DrawText
50 -121 -132 12 14 false [0 0 0] [1 1 1] (or) 12 /Courier DrawText
50 -163 -174 12 14 false [0 0 0] [1 1 1] (or) 12 /Courier DrawText
40 -186 45 26 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
35 -181 45 26 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
38 -184 39 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
41 -187 -198 33 14 false [0 0 0] [1 1 1] (Other) 12 /Courier DrawText
94 -186 125 20 [0 0 0] 0 0 [] 1 null DrawRectangle
354 -189 20 20 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
349 -184 20 20 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
352 -187 14 14 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
228 -189 -200 116 14 false [0 0 0] [1 1 1] (Type restriction:) 12 /Courier DrawText
412 -15 117 28 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
407 -10 117 28 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
411 -14 109 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
414 -17 -28 103 14 false [0 0 0] [1 1 1] (CREATE INSTANCE) 12 /Courier DrawText
412 -53 117 28 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
407 -48 117 28 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
411 -52 109 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
444 -55 -66 42 14 false [0 0 0] [1 1 1] (MODIFY) 12 /Courier DrawText
412 -91 117 28 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
407 -86 117 28 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
411 -90 109 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
441 -93 -104 49 14 false [0 0 0] [1 1 1] (DESTROY) 12 /Courier DrawText
412 -129 117 28 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
407 -124 117 28 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
411 -128 109 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
452 -131 -142 26 14 false [0 0 0] [1 1 1] (SAVE) 12 /Courier DrawText
412 -167 117 28 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
407 -162 117 28 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
411 -166 109 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
456 -169 -180 19 14 false [0 0 0] [1 1 1] (C32) 12 /Courier DrawText
412 -205 117 28 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
407 -200 117 28 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
411 -204 109 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
445 -207 -218 40 14 false [0 0 0] [1 1 1] (CANCEL) 12 /Courier DrawText
78.5 -243.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
73.5 -238.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
73.5 -238.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
30 -234 -245 27 14 false [0 0 0] [1 1 1] (Line) 12 /Courier DrawText
137.5 -243.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
132.5 -238.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
132.5 -238.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
95 -234 -245 21 14 false [0 0 0] [1 1 1] (Box) 12 /Courier DrawText
236.5 -243.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
231.5 -238.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
231.5 -238.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
154 -234 -245 61 14 false [0 0 0] [1 1 1] (<Formula>) 12 /Courier DrawText
132.5 -238.5 5.5 5.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
78.5 -280.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
73.5 -275.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
73.5 -275.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
30 -271 -282 27 14 false [0 0 0] [1 1 1] (Grow) 12 /Courier DrawText
143.5 -280.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
138.5 -275.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
138.5 -275.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
95 -271 -282 27 14 false [0 0 0] [1 1 1] (Move) 12 /Courier DrawText
242.5 -280.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
237.5 -275.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
237.5 -275.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
160 -271 -282 61 14 false [0 0 0] [1 1 1] (<Formula>) 12 /Courier DrawText
138.5 -275.5 5.5 5.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
%20 -301 213 327 [0 0 0] 0 0 [] 1 [.5 dup dup] DrawRectangle
20 -301 213 327 [0 0 0] 0 0 [] 1 null DrawRectangle
30 -311 -322 104 14 false [0 0 0] [1 1 1] (Grow Parameters) 12 /Courier-Bold DrawText
211.5 -360.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
206.5 -355.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
206.5 -355.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
107 -351 -362 83 14 false [0 0 0] [1 1 1] (Change Width) 12 /Courier DrawText
211.5 -393.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
206.5 -388.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
206.5 -388.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
100 -384 -395 90 14 false [0 0 0] [1 1 1] (Change Height) 12 /Courier DrawText
211.5 -426.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
206.5 -421.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
206.5 -421.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
30 -417 -428 160 14 false [0 0 0] [1 1 1] (Change Width and Height) 12 /Courier DrawText
211.5 -459.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
206.5 -454.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
206.5 -454.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
129 -450 -461 61 14 false [0 0 0] [1 1 1] (<Formula>) 12 /Courier DrawText
206.5 -421.5 5.5 5.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
30 -490 -501 82 14 false [0 0 0] [1 1 1] (Growing Line) 12 /Courier DrawText
50 -515 -526 70 14 false [0 0 0] [1 1 1] (Min-Length) 12 /Courier DrawText
125 -513 50 18 [0 0 0] 0 0 [] 1 null DrawRectangle
30 -550 -561 110 14 false [0 0 0] [1 1 1] (Growing Non-Line) 12 /Courier DrawText
50 -575 -586 77 14 false [0 0 0] [1 1 1] (Min-Width  ) 12 /Courier DrawText
138 -575 -586 5 14 false [0 0 0] [1 1 1] (0) 12 /Courier DrawText
132 -573 50 18 [0 0 0] 0 0 [] 1 null DrawRectangle
50 -602 -613 70 14 false [0 0 0] [1 1 1] (Min-Height) 12 /Courier DrawText
131 -602 -613 5 14 false [0 0 0] [1 1 1] (0) 12 /Courier DrawText
125 -600 50 18 [0 0 0] 0 0 [] 1 null DrawRectangle
20 -301 213 327 [0 0 0] 0 0 [] 1 null DrawRectangle
262 -311 -322 105 14 false [0 0 0] [1 1 1] (Move Parameters) 12 /Courier-Bold DrawText
414.5 -360.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
409.5 -355.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
409.5 -355.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
317 -351 -362 76 14 false [0 0 0] [1 1 1] (Change Left) 12 /Courier DrawText
414.5 -393.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
409.5 -388.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
409.5 -388.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
325 -384 -395 68 14 false [0 0 0] [1 1 1] (Change Top) 12 /Courier DrawText
414.5 -426.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
409.5 -421.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
409.5 -421.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
262 -417 -428 131 14 false [0 0 0] [1 1 1] (Change Left and Top) 12 /Courier DrawText
414.5 -459.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
409.5 -454.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
409.5 -454.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
332 -450 -461 61 14 false [0 0 0] [1 1 1] (<Formula>) 12 /Courier DrawText
409.5 -421.5 5.5 5.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
252 -301 184 180 [0 0 0] 0 0 [] 1 null DrawRectangle
252 -497 216 114 [0 0 0] 0 0 [] 1 null DrawRectangle
262 -490 105 14 [0 0 0] 0 0 [] -1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
267 -490 -501 95 14 false [0 0 0] [1 1 1] (:obj-to-change) 12 /Courier-Bold DrawText
441.5 -526.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
436.5 -521.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
436.5 -521.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
267 -517 -528 153 14 false [0 0 0] [1 1 1] (Result of :start-where) 12 /Courier DrawText
441.5 -559.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
436.5 -554.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
436.5 -554.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
295 -550 -561 125 14 false [0 0 0] [1 1 1] (Change this object) 12 /Courier DrawText
441.5 -592.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
436.5 -587.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
436.5 -587.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
359 -583 -594 61 14 false [0 0 0] [1 1 1] (<Formula>) 12 /Courier DrawText
436.5 -554.5 5.5 5.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
30 -639 -650 102 14 false [0 0 0] [1 1 1] (Final Function:) 12 /Courier-Bold DrawText
137 -637 150 18 [0 0 0] 0 0 [] 1 null DrawRectangle
20 -671 456 81 [0 0 0] 0 0 [] 1 null DrawRectangle
30 -664 96 14 [0 0 0] 0 0 [] -1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
35 -664 -675 86 14 false [0 0 0] [1 1 1] (:feedback-obj) 12 /Courier-Bold DrawText
167.5 -700.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
162.5 -695.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
162.5 -695.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
35 -691 -702 111 14 false [0 0 0] [1 1 1] (Interim Feedback) 12 /Courier DrawText
162.5 -695.5 5.5 5.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
188 -688 125 20 [0 0 0] 0 0 [] 1 null DrawRectangle
191 -690 -701 112 14 false [0 0 0] [1 1 1] (DASHED-LINE-RECT) 12 /Courier DrawText
448.5 -700.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
443.5 -695.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
443.5 -695.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
323 -691 -702 104 14 false [0 0 0] [1 1 1] (Change Original) 12 /Courier DrawText
448.5 -733.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
443.5 -728.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
443.5 -728.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
366 -724 -735 61 14 false [0 0 0] [1 1 1] (<Formula>) 12 /Courier DrawText
20 -768 341 208 [0 0 0] 0 0 [] 1 null DrawRectangle
30 -761 98 14 [0 0 0] 0 0 [] -1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
35 -761 -772 88 14 false [0 0 0] [1 1 1] (:attach-point) 12 /Courier-Bold DrawText
51 -797 112 112 [0 0 0] 0 0 [] 1 null DrawRectangle
51.5 -797.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
46.5 -792.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
46.5 -792.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
105.5 -797.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
100.5 -792.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
100.5 -792.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
159.5 -797.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
154.5 -792.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
154.5 -792.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
51.5 -851.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
46.5 -846.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
46.5 -846.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
105.5 -851.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
100.5 -846.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
100.5 -846.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
159.5 -851.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
154.5 -846.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
154.5 -846.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
51.5 -905.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
46.5 -900.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
46.5 -900.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
105.5 -905.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
100.5 -900.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
100.5 -900.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
159.5 -905.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
154.5 -900.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
154.5 -900.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
[0 0 0] 0 0 [] 1 332 -894 232 -794 DrawLine
235.5 -797.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
230.5 -792.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
230.5 -792.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
285.5 -847.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
280.5 -842.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
280.5 -842.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
335.5 -897.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
330.5 -892.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
330.5 -892.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
66.5 -958.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
61.5 -953.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
61.5 -953.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
87 -951 -962 91 14 false [0 0 0] [1 1 1] (Nearest Point) 12 /Courier DrawText
232.5 -958.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
227.5 -953.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
227.5 -953.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
253 -951 -962 61 14 false [0 0 0] [1 1 1] (<Formula>) 12 /Courier DrawText
61.5 -953.5 5.5 5.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
40 -995 97 34 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
30 -985 97 34 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
35 -990 87 24 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
40 -995 -1006 76 14 false [0 0 0] [1 1 1] (Start-Event) 12 /Courier DrawText
152 -995 97 34 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
142 -985 97 34 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
147 -990 87 24 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
156 -995 -1006 69 14 false [0 0 0] [1 1 1] (Stop-Event) 12 /Courier DrawText
264 -995 97 34 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
254 -985 97 34 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
259 -990 87 24 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
264 -995 -1006 77 14 false [0 0 0] [1 1 1] (Abort-Event) 12 /Courier DrawText
grestore

grestore

grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold /Times-BoldItalic Helvetica-Bold 
%%BoundingBox: 133 72 478 720

%%EndDocument
 GE 18630 50780 MT
(\050a\051)SH
37080 XM
(\050b\051)SH
/Times-Bold SF
8280 53728 MT
(Figure 4-3:)SH
/Times-Roman SF
14586 XM
(\050a\051 The various parts for a move behavior; and \050b\051 the dialog box)
258 W( for specifying the)259 W
14053 54924 MT
(move/grow interactor.)
32 W( The)
338 W( user can now directly select the obj-to-change and Lapidary will)31 W
14053 56120 MT
(create a formula that automatically selects the correct object to change at run-time.)SH
46800 50 8280 58072 UL
11030 59823 MT
(small or whether an object of the minimum size should be created.)SH
/Symbol SF
10249 61717 MT
(\267)SH
/Times-Roman SF
11030 XM
(:feedback-obj. An interim feedback object can be created by creating the)
81 W( desired object and)80 W
11030 62913 MT
(pressing the interim-feedback button.  Constraints will)
277 W( be automatically attached to the)278 W
11030 64109 MT
(feedback object that cause it to sweep out as the mouse cursor is moved, and that)
126 W( make it)125 W
11030 65305 MT
(visible/invisible at the appropriate times.  If multiple objects are selected, then)
49 W( Lapidary will)50 W
11030 66501 MT
(bring up C32 and prompt the designer)
35 W( for a constraint that determines when to use each kind)34 W
11030 67697 MT
(of feedback object at run-time.  If)
164 W( the standard feedback option is selected, a box or line)165 W
11030 68893 MT
(feedback object is automatically created according to whether a line or box is being created.)SH
/Symbol SF
10249 70787 MT
(\267)SH
/Times-Roman SF
11030 XM
(:final-function. The user can)
106 W( type in the name of a function that should be called when the)105 W
11030 71983 MT
(interactor completes.)SH
ES
%%Page: 566 29
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 566)
SH( Lapidary)830 W
42928 XM
(Interactors Chapter)
1550 W( 4)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(Example: To create a two-point interactor with line feedback)SH
6120 10253 MT
(1\051 select the interactors option from)37 W
/Courier SF
22348 XM
(other)SH
/Times-Roman SF
25960 XM
(in the editor menu and then)
37 W( select two point interactor in the)38 W
6120 11449 MT
(menu that pops up)SH
6120 13747 MT
(2\051 click on Start Anywhere in Window)SH
6120 16045 MT
(3\051 click on Create Line)SH
6120 18343 MT
(4\051 click on Standard Feedback)SH
6120 20641 MT
(5\051 click on CREATE INSTANCE)SH
6120 22939 MT
(To test this interactor, enter test mode, press down)
2 W( on the left mouse button, and sweep out a line.  No line)1 W
6120 24135 MT
(will be created because a final function was not provided.)SH
8 10 0 5040 74851 GB 
%%BeginDocument: lapidary/TwoPoint.PS
%!PS-Adobe-2.0
%%Title: two point interactor
%%Creator: Make-PS-File -- Garnet Version 2.0
%%CreationDate: May 14, 1992, 4:57 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 172 540 619
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.7488 0.7488 scale

%
% Begin new window
%
0 -134 translate
gsave
0 865 625 597 ClipToRectangle
0 0 translate
gsave
10 855 833 213 28 0 false 0 0 0 false 0 0 0 false (Two Point Interactor) 24 /Times-BoldItalic DrawText
20 816 805 109 14 0 false 0 0 0 false 0 0 0 false (Interactor Name:) 12 /Courier-Bold DrawText
134 818 150 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
20 784 368 137 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 791 91 14 0 0 0 0 false 0 0 [] -1 1 1.00 1.00 1.00 true DrawRectangle
35 791 780 81 14 0 false 0 0 0 false 0 0 0 false (:start-where) 12 /Courier-Bold DrawText
223.5 754.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
218.5 759.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
218.5 759.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
35 764 753 167 14 0 false 0 0 0 false 0 0 0 false (Start Anywhere in Window) 12 /Courier DrawText
139.5 712.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
134.5 717.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
134.5 717.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
35 722 711 83 14 0 false 0 0 0 false 0 0 0 false (Start in Box) 12 /Courier DrawText
160 725 125 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
50 744 733 12 14 0 false 0 0 0 false 0 0 0 false (or) 12 /Courier DrawText
50 702 691 12 14 0 false 0 0 0 false 0 0 0 false (or) 12 /Courier DrawText
40 679 45 26 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
35 684 45 26 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
38 681 39 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
41 678 667 33 14 0 false 0 0 0 false 0 0 0 false (Other) 12 /Courier DrawText
94 679 125 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
354 676 20 20 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
349 681 20 20 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
352 678 14 14 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
228 676 665 116 14 0 false 0 0 0 false 0 0 0 false (Type restriction:) 12 /Courier DrawText
488 850 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
483 855 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
487 851 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
490 848 837 103 14 0 false 0 0 0 false 0 0 0 false (CREATE INSTANCE) 12 /Courier DrawText
488 812 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
483 817 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
487 813 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
520 810 799 42 14 0 false 0 0 0 false 0 0 0 false (MODIFY) 12 /Courier DrawText
488 774 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
483 779 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
487 775 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
517 772 761 49 14 0 false 0 0 0 false 0 0 0 false (DESTROY) 12 /Courier DrawText
488 736 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
483 741 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
487 737 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
528 734 723 26 14 0 false 0 0 0 false 0 0 0 false (SAVE) 12 /Courier DrawText
488 698 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
483 703 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
487 699 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
496 696 685 90 14 0 false 0 0 0 false 0 0 0 false (PRINT KR NAME) 12 /Courier DrawText
488 660 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
483 665 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
487 661 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
521 658 647 40 14 0 false 0 0 0 false 0 0 0 false (CANCEL) 12 /Courier DrawText
111.5 621.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
106.5 626.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
106.5 626.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
15 631 620 75 14 0 false 0 0 0 false 0 0 0 false (Create Line) 12 /Courier DrawText
252.5 621.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
247.5 626.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
247.5 626.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
128 631 620 103 14 0 false 0 0 0 false 0 0 0 false (Create Non-Line) 12 /Courier DrawText
351.5 621.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
346.5 626.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
346.5 626.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
269 631 620 61 14 0 false 0 0 0 false 0 0 0 false (<Formula>) 12 /Courier DrawText
247.5 626.5 5.5 5.5 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
20 601 215 117 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
35 586 575 132 14 0 false 0 0 0 false 0 0 0 false (Non-Line Parameters) 12 /Courier DrawText
35 566 555 63 14 0 false 0 0 0 false 0 0 0 false (Min-Width) 12 /Courier DrawText
103 568 100 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
35 544 533 70 14 0 false 0 0 0 false 0 0 0 false (Min-Height) 12 /Courier DrawText
110 546 100 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
135 519 20 20 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
130 524 20 20 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
133 521 14 14 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
35 519 508 90 14 0 false 0 0 0 false 0 0 0 false (May Flip Over) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 2 147 508 133 521 DrawLine
0 0 0 0 false 0 0 [] 2 147 521 133 508 DrawLine
254 601 215 62 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
269 586 575 104 14 0 false 0 0 0 false 0 0 0 false (Line Parameters) 12 /Courier DrawText
269 566 555 70 14 0 false 0 0 0 false 0 0 0 false (Min-Length) 12 /Courier DrawText
344 568 100 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
177.5 448.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
172.5 453.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
172.5 453.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
30 458 447 126 14 0 false 0 0 0 false 0 0 0 false (Abort if Too Small) 12 /Courier DrawText
374.5 448.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
369.5 453.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
369.5 453.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
194 458 447 159 14 0 false 0 0 0 false 0 0 0 false (or Increase to Min Size) 12 /Courier DrawText
369.5 453.5 5.5 5.5 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
20 421 470 66 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 428 96 14 0 0 0 0 false 0 0 [] -1 1 1.00 1.00 1.00 true DrawRectangle
35 428 417 86 14 0 false 0 0 0 false 0 0 0 false (:feedback-obj) 12 /Courier-Bold DrawText
167.5 401.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
162.5 406.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
162.5 406.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
35 411 400 111 14 0 false 0 0 0 false 0 0 0 false (Interim Feedback) 12 /Courier DrawText
188 414 125 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
467.5 401.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
462.5 406.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
462.5 406.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
328 411 400 118 14 0 false 0 0 0 false 0 0 0 false (Standard Feedback) 12 /Courier DrawText
376.5 374.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
371.5 379.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
371.5 379.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
328 384 373 27 14 0 false 0 0 0 false 0 0 0 false (None) 12 /Courier DrawText
371.5 379.5 5.5 5.5 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
20 344 333 102 14 0 false 0 0 0 false 0 0 0 false (Final Function:) 12 /Courier DrawText
127 346 75 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
40 309 97 34 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
30 319 97 34 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
35 314 87 24 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
40 309 298 76 14 0 false 0 0 0 false 0 0 0 false (Start-Event) 12 /Courier DrawText
152 309 97 34 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
142 319 97 34 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
147 314 87 24 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
156 309 298 69 14 0 false 0 0 0 false 0 0 0 false (Stop-Event) 12 /Courier DrawText
264 309 97 34 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
254 319 97 34 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
259 314 87 24 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
264 309 298 77 14 0 false 0 0 0 false 0 0 0 false (Abort-Event) 12 /Courier DrawText
grestore

grestore

0 865 625 597 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold /Times-BoldItalic 
%%BoundingBox: 72 172 540 619

%%EndDocument
 GE /Times-Bold SF
6120 62843 MT
(Figure 4-4:)SH
/Times-Roman SF
11893 XM
(Two point interactor dialog box)SH
12 /Times-Bold AF
6120 66527 MT
(4.5.4. Text Interactor)SH
11 /Times-Roman AF
6120 67723 MT
(The text interactor dialog box \050Figure 4-5\051 allows the user to create or)
24 W( modify a text interactor and to edit)25 W
6120 68919 MT
(the following slots:)SH
/Symbol SF
8089 70497 MT
(\267)SH
/Times-Roman SF
8870 XM
(:start-where. If the user selects either)220 W
/Courier SF
26711 XM
(object to press over)219 W
/Times-Roman SF
41062 XM
(or)SH
/Courier SF
42472 XM
(one of this)219 W
8870 71693 MT
(aggregadget)SH
/Times-Roman SF
16493 XM
(and there is at least one)
88 W( selection in a drawing window \050it may be either a)89 W
ES
%%Page: 567 30
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 4.5)
SH( Specific)
1800 W( Interactors)SH
51386 XM
(Page 567)SH
46800 50 8280 4486 UL
11 SS 
7 10 0 10260 52210 GB 
%%BeginDocument: lapidary/text-inter.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: text interactor
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Sep 22, 1993, 2:07 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 149 540 643
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
               % cap join dash thickness fill-color => -
    EllipseDict begin
        /fill-color exch def /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /endangle exch def /startangle exch def
        /yrad exch def  /xrad exch def /y exch def /x exch def
        /savematrix mtrx currentmatrix def
        % Draw the filling
        gsave
            newpath
            x y translate
            xrad thickness sub yrad thickness sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-color FillShape
            newpath
            x y translate
            xrad thickness 2 div sub yrad thickness 2 div sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-color
            0 % line-cap
            line-join dash-pattern thickness
            StrokeShape
        grestore
    end
} def

/DefImage { % image-name font-name w h string => -
  20 dict begin
    /ImageString exch def /ImageHeight exch def /ImageWidth exch def
    /FontName exch def
    /ImageName exch def
    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def
    /Encoding [
      /image 255 { /.notdef } repeat
    ] def
    /BuildChar { % font char => -
      pop begin
        1 0
        0 0 1 1 setcachedevice
        gsave
          ImageWidth ImageHeight false
          [ ImageWidth 0 0 ImageHeight 0 0 ]
          {ImageString} imagemask
        grestore
      end
    } def
    ImageName currentdict definefont
    FontName exch
    ImageName ImageString
  end
  def def
} def


/FillPattern { % fgR fgG fgB [bgR bgG bgB] opaque? top font => -
  50 dict begin gsave
    /font exch def
    /top exch def
    /opaque? exch def
    /w font /ImageWidth get def
    /h font /ImageHeight get def
    font [w 0 0 h 0 0] makefont setfont
    pathbbox
    /y1 exch def /x1 exch def
    /y0 exch def /x0 exch def
    clip
    opaque? {
      gsave
        setrgbcolor
        fill
      grestore
    } if
    newpath
    setrgbcolor
    /y0 y0 top sub h div floor h mul top add cvi def
    /x0 x0 w div floor w mul cvi def
    x0 y0 translate
    /W x1 x0 sub w div ceiling cvi 1 add def
    /H y1 y0 sub h div ceiling cvi def
    /s W string def
    H {
      0 0 moveto
      s show
      0 h translate
    } repeat
  grestore end
  newpath
} def


/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawGenericWindowFrame { % label left top w h
                          % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def

/image-1 /image-1-font 4 4 <
00 00 00 00>
DefImage


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.87 0.87 scale
0 657 translate

%
% Begin new window
%
gsave
0 0 538 568 ClipToRectangle
gsave
0 0 538 568 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
2 -23 translate
(text interactor) 0 0 534 543 2 23 2 2 DrawGenericWindowFrame
0 0 534 543 ClipToRectangle
gsave
15 -5 -27 154 28 false [0 0 0] [1 1 1] (Text Interactor) 24 /Times-BoldItalic DrawText
15 -44 -55 109 14 false [0 0 0] [1 1 1] (Interactor Name:) 12 /Courier-Bold DrawText
129 -42 150 18 [0 0 0] 0 0 [] 1 null DrawRectangle
407 -10 117 28 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
402 -5 117 28 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
406 -9 109 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
409 -12 -23 103 14 false [0 0 0] [1 1 1] (CREATE INSTANCE) 12 /Courier DrawText
407 -48 117 28 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
402 -43 117 28 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
406 -47 109 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
439 -50 -61 42 14 false [0 0 0] [1 1 1] (MODIFY) 12 /Courier DrawText
407 -86 117 28 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
402 -81 117 28 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
406 -85 109 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
436 -88 -99 49 14 false [0 0 0] [1 1 1] (DESTROY) 12 /Courier DrawText
407 -124 117 28 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
402 -119 117 28 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
406 -123 109 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
447 -126 -137 26 14 false [0 0 0] [1 1 1] (SAVE) 12 /Courier DrawText
407 -162 117 28 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
402 -157 117 28 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
406 -161 109 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
451 -164 -175 19 14 false [0 0 0] [1 1 1] (C32) 12 /Courier DrawText
407 -200 117 28 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
402 -195 117 28 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
406 -199 109 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
440 -202 -213 40 14 false [0 0 0] [1 1 1] (CANCEL) 12 /Courier DrawText
15 -76 368 137 [0 0 0] 0 0 [] 1 null DrawRectangle
25 -69 91 14 [0 0 0] 0 0 [] -1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
30 -69 -80 81 14 false [0 0 0] [1 1 1] (:start-where) 12 /Courier-Bold DrawText
218.5 -105.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
213.5 -100.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
213.5 -100.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
30 -96 -107 167 14 false [0 0 0] [1 1 1] (Start Anywhere in Window) 12 /Courier DrawText
196.5 -147.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
191.5 -142.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
191.5 -142.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
30 -138 -149 145 14 false [0 0 0] [1 1 1] (One of this aggregate) 12 /Courier DrawText
217 -135 125 20 [0 0 0] 0 0 [] 1 null DrawRectangle
45 -116 -127 12 14 false [0 0 0] [1 1 1] (or) 12 /Courier DrawText
45 -158 -169 12 14 false [0 0 0] [1 1 1] (or) 12 /Courier DrawText
35 -181 45 26 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
30 -176 45 26 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
33 -179 39 20 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
36 -182 -193 33 14 false [0 0 0] [1 1 1] (Other) 12 /Courier DrawText
89 -181 125 20 [0 0 0] 0 0 [] 1 null DrawRectangle
349 -184 20 20 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
344 -179 20 20 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
347 -182 14 14 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
223 -184 -195 116 14 false [0 0 0] [1 1 1] (Type restriction:) 12 /Courier DrawText
15 -229 342 124 [0 0 0] 0 0 [] 1 null DrawRectangle
25 -222 126 14 [0 0 0] 0 0 [] -1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
30 -222 -233 116 14 false [0 0 0] [1 1 1] (:object-to-change) 12 /Courier-Bold DrawText
191.5 -255.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
186.5 -250.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
186.5 -250.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
25 -246 -257 145 14 false [0 0 0] [1 1 1] (result of start-where) 12 /Courier DrawText
191.5 -293.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
186.5 -288.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
186.5 -288.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
35 -284 -295 125 14 false [0 0 0] [1 1 1] (change this object) 12 /Courier DrawText
191.5 -331.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
186.5 -326.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
186.5 -326.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
67 -322 -333 61 14 false [0 0 0] [1 1 1] (<formula>) 12 /Courier DrawText
186.5 -250.5 5.5 5.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
212 -281 125 20 [0 0 0] 0 0 [] 1 null DrawRectangle
15 -369 379 48 [0 0 0] 0 0 [] 1 null DrawRectangle
25 -362 96 14 [0 0 0] 0 0 [] -1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
30 -362 -373 86 14 false [0 0 0] [1 1 1] (:feedback-obj) 12 /Courier-Bold DrawText
162.5 -398.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
157.5 -393.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
157.5 -393.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
30 -389 -400 111 14 false [0 0 0] [1 1 1] (Interim Feedback) 12 /Courier DrawText
183 -386 125 20 [0 0 0] 0 0 [] 1 null DrawRectangle
366.5 -398.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
361.5 -393.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
361.5 -393.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
318 -389 -400 27 14 false [0 0 0] [1 1 1] (None) 12 /Courier DrawText
361.5 -393.5 5.5 5.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
15 -433 -444 102 14 false [0 0 0] [1 1 1] (Cursor appears:) 12 /Courier-Bold DrawText
243.5 -442.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
238.5 -437.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
238.5 -437.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
131 -433 -444 91 14 false [0 0 0] [1 1 1] (where pressed) 12 /Courier DrawText
392.5 -442.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
387.5 -437.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
387.5 -437.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawEllipse
260 -433 -444 111 14 false [0 0 0] [1 1 1] (at end of string) 12 /Courier DrawText
238.5 -437.5 5.5 5.5 0 360 [0 0 0] 0 0 [] -1 [0 0 0] DrawEllipse
15 -465 -476 102 14 false [0 0 0] [1 1 1] (Final Function:) 12 /Courier-Bold DrawText
122 -463 150 18 [0 0 0] 0 0 [] 1 null DrawRectangle
25 -500 97 34 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
15 -490 97 34 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
20 -495 87 24 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
25 -500 -511 76 14 false [0 0 0] [1 1 1] (Start-Event) 12 /Courier DrawText
137 -500 97 34 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
127 -490 97 34 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
132 -495 87 24 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
141 -500 -511 69 14 false [0 0 0] [1 1 1] (Stop-Event) 12 /Courier DrawText
249 -500 97 34 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
239 -490 97 34 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
244 -495 87 24 [0 0 0] 0 0 [] 1 [ 1 1 1 1 1 1 true 0 image-1-font ] DrawRectangle
249 -500 -511 77 14 false [0 0 0] [1 1 1] (Abort-Event) 12 /Courier DrawText
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold /Times-BoldItalic Helvetica-Bold 
%%BoundingBox: 72 149 540 643

%%EndDocument
 GE /Times-Bold SF
8280 43532 MT
(Figure 4-5:)SH
/Times-Roman SF
14053 XM
(Text interactor dialog box)SH
11030 45483 MT
(primary or secondary selection\051, then start-wheres with)111 W
/Courier SF
36363 XM
(:in-box)SH
/Times-Roman SF
41369 XM
(and)SH
/Courier SF
43343 XM
(:element-of)SH
/Times-Roman SF
50988 XM
(are)SH
11030 46679 MT
(generated with the selected object.)SH
/Symbol SF
10249 48573 MT
(\267)SH
/Times-Roman SF
11030 XM
(:obj-to-change. The)
80 W( user can either let the text interactor modify the object that satisfies the)81 W
11030 49769 MT
(start-where or use a formula to compute the object to change.  Lapidary can construct a)196 W
11030 50965 MT
(formula for this slot if necessary \050see section 4.5.2\051.)SH
/Symbol SF
10249 52859 MT
(\267)SH
/Times-Roman SF
11030 XM
(:feedback-obj. An interim feedback object can be created by creating a text object and)264 W
11030 54055 MT
(pressing the interim-feedback button.  Constraints)
278 W( will be automatically attached to the)277 W
11030 55251 MT
(feedback object that cause it to appear at the selected text object)
385 W( and that make it)386 W
11030 56447 MT
(visible/invisible at the)
50 W( appropriate times.  If multiple objects are selected, then Lapidary will)49 W
11030 57643 MT
(bring up C32 and prompt the designer for a constraint that)
34 W( determines when to use each kind)35 W
11030 58839 MT
(of feedback object at run-time.)SH
/Symbol SF
10249 60733 MT
(\267)SH
/Times-Roman SF
11030 XM
(:cursor-where-press. This slot is set by the buttons)173 W
/Courier SF
34807 XM
(where pressed)173 W
/Times-Roman SF
44008 XM
(and)SH
/Courier SF
46044 XM
(at end of)173 W
11030 61929 MT
(string)SH
/Times-Roman SF
(. If)201 W
/Courier SF
16949 XM
(where pressed)201 W
/Times-Roman SF
26206 XM
(is selected, the text editing cursor will appear under)
201 W( the)202 W
11030 63125 MT
(mouse cursor. If)213 W
/Courier SF
19121 XM
(at end of)
213 W( string)212 W
/Times-Roman SF
30806 XM
(is selected, the text editing cursor will always)212 W
11030 64321 MT
(appear at the end of the string when editing starts.)SH
/Symbol SF
10249 66215 MT
(\267)SH
/Times-Roman SF
11030 XM
(:final-function. The user can type in the name of a function that should be)
105 W( called when the)106 W
11030 67411 MT
(interactor completes.)SH
ES
%%Page: 568 31
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 568)
SH( Lapidary)830 W
42928 XM
(Interactors Chapter)
1550 W( 4)SH
46800 50 6120 4486 UL
12 /Times-Bold AF
6120 8004 MT
(4.5.5. Angle Interactor)SH
11 /Times-Roman AF
6120 9200 MT
(The angle interactor dialog box \050Figure 4-6\051 allows the user to create)
26 W( and modify an angle interactor. The)25 W
6120 10396 MT
(slots that can be set by this dialog box are:)SH
/Symbol SF
8089 11974 MT
(\267)SH
/Times-Roman SF
8870 XM
(:start-where. If the user selects)292 W
/Courier SF
24072 XM
(object to)
292 W( press over)293 W
/Times-Roman SF
38718 XM
(and there is a least one)293 W
8870 13170 MT
(selection in a drawing window \050it may be either a primary or secondary)
139 W( selection\051, then a)138 W
8870 14366 MT
(start-where with)360 W
/Courier SF
17042 XM
(:in-box)SH
/Times-Roman SF
22297 XM
(is generated. If the user selects)360 W
/Courier SF
38230 XM
(start anywhere in)360 W
8870 15562 MT
(window)SH
/Times-Roman SF
(, then a start-where of)SH
/Courier SF
22724 XM
(t)SH
/Times-Roman SF
23659 XM
(is generated.)SH
/Symbol SF
8089 17456 MT
(\267)SH
/Times-Roman SF
8870 XM
(:obj-to-change. The user can either let the angle interactor modify)
29 W( the object that satisfies the)28 W
8870 18652 MT
(start-where or use a formula to compute the object to change.)SH
/Symbol SF
8089 20546 MT
(\267)SH
/Times-Roman SF
8870 XM
(:feedback-obj. An interim feedback object can)
80 W( be created by creating an object, selecting it,)81 W
8870 21742 MT
(and pushing the interim)
166 W( feedback button.  The :angle slot of the object will be set as the)165 W
8870 22938 MT
(interactor is operated and)
80 W( the object will be made visible/invisible as appropriate.  To make)81 W
8870 24134 MT
(the feedback object or the object that gets the final angle change in)
6 W( response to changes in the)5 W
8870 25330 MT
(:angle slot, custom)
60 W( constraints must be created for the position and size slots.  See the angle)61 W
8870 26526 MT
(interactor section in the Interactors chapter for sample constraints.  If)
151 W( multiple objects are)150 W
8870 27722 MT
(selected, then Lapidary will bring up C32 and prompt the designer for a constraint)
229 W( that)230 W
8870 28918 MT
(determines when to use each kind of feedback object at run-time.)SH
/Symbol SF
8089 30812 MT
(\267)SH
/Times-Roman SF
8870 XM
(:final-function. The user can)
106 W( type in the name of a function that should be called when the)105 W
8870 32008 MT
(interactor completes.)SH
/Symbol SF
8089 33902 MT
(\267)SH
/Times-Roman SF
8870 XM
(:center-of-rotation. This is the center of rotation for the interaction.  The user can either enter)27 W
8870 35098 MT
(a list of)118 W
/Courier SF
12799 XM
(\050x,y\051)SH
/Times-Roman SF
(, enter a formula that returns a list of)117 W
/Courier SF
33524 XM
(\050x,y\051)SH
/Times-Roman SF
37216 XM
(or select one of the standard)117 W
8870 36294 MT
(locations for the center of rotation by selecting the appropriate button.)SH
ES
%%Page: 569 32
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 4.5)
SH( Specific)
1800 W( Interactors)SH
51386 XM
(Page 569)SH
46800 50 8280 4486 UL
11 SS 
7 10 0 10260 55710 GB 
%%BeginDocument: lapidary/Angle.PS
%!PS-Adobe-2.0
%%Title: angle interactor
%%Creator: Make-PS-File -- Garnet Version 2.0
%%CreationDate: May 14, 1992, 4:53 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 99 540 693
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.8587156 0.8587156 scale

%
% Begin new window
%
0 -32 translate
gsave
0 755 545 692 ClipToRectangle
0 0 translate
gsave
10 745 723 169 28 0 false 0 0 0 false 0 0 0 false (Angle Interactor) 24 /Times-BoldItalic DrawText
20 706 695 109 14 0 false 0 0 0 false 0 0 0 false (Interactor Name:) 12 /Courier-Bold DrawText
134 708 150 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
20 674 368 137 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 681 91 14 0 0 0 0 false 0 0 [] -1 1 1.00 1.00 1.00 true DrawRectangle
35 681 670 81 14 0 false 0 0 0 false 0 0 0 false (:start-where) 12 /Courier-Bold DrawText
194.5 644.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
189.5 649.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
189.5 649.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
35 654 643 138 14 0 false 0 0 0 false 0 0 0 false (Object to Press Over) 12 /Courier DrawText
215 657 125 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
223.5 602.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
218.5 607.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
218.5 607.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
35 612 601 167 14 0 false 0 0 0 false 0 0 0 false (Start Anywhere in Window) 12 /Courier DrawText
50 634 623 12 14 0 false 0 0 0 false 0 0 0 false (or) 12 /Courier DrawText
50 592 581 12 14 0 false 0 0 0 false 0 0 0 false (or) 12 /Courier DrawText
40 569 45 26 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
35 574 45 26 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
38 571 39 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
41 568 557 33 14 0 false 0 0 0 false 0 0 0 false (Other) 12 /Courier DrawText
94 569 125 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
354 566 20 20 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
349 571 20 20 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
352 568 14 14 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
228 566 555 116 14 0 false 0 0 0 false 0 0 0 false (Type restriction:) 12 /Courier DrawText
412 740 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
407 745 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
411 741 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
414 738 727 103 14 0 false 0 0 0 false 0 0 0 false (CREATE INSTANCE) 12 /Courier DrawText
412 702 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
407 707 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
411 703 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
444 700 689 42 14 0 false 0 0 0 false 0 0 0 false (MODIFY) 12 /Courier DrawText
412 664 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
407 669 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
411 665 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
441 662 651 49 14 0 false 0 0 0 false 0 0 0 false (DESTROY) 12 /Courier DrawText
412 626 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
407 631 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
411 627 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
452 624 613 26 14 0 false 0 0 0 false 0 0 0 false (SAVE) 12 /Courier DrawText
412 588 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
407 593 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
411 589 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
420 586 575 90 14 0 false 0 0 0 false 0 0 0 false (PRINT KR NAME) 12 /Courier DrawText
412 550 117 28 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
407 555 117 28 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
411 551 109 20 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
445 548 537 40 14 0 false 0 0 0 false 0 0 0 false (CANCEL) 12 /Courier DrawText
30 521 216 81 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
40 528 105 14 0 0 0 0 false 0 0 [] -1 1 1.00 1.00 1.00 true DrawRectangle
45 528 517 95 14 0 false 0 0 0 false 0 0 0 false (:obj-to-change) 12 /Courier-Bold DrawText
219.5 491.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
214.5 496.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
214.5 496.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
45 501 490 153 14 0 false 0 0 0 false 0 0 0 false (Result of :start-where) 12 /Courier DrawText
219.5 458.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
214.5 463.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
214.5 463.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
137 468 457 61 14 0 false 0 0 0 false 0 0 0 false (<Formula>) 12 /Courier DrawText
30 424 379 48 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
40 431 96 14 0 0 0 0 false 0 0 [] -1 1 1.00 1.00 1.00 true DrawRectangle
45 431 420 86 14 0 false 0 0 0 false 0 0 0 false (:feedback-obj) 12 /Courier-Bold DrawText
177.5 394.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
172.5 399.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
172.5 399.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
45 404 393 111 14 0 false 0 0 0 false 0 0 0 false (Interim Feedback) 12 /Courier DrawText
198 407 125 20 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
381.5 394.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
376.5 399.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
376.5 399.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
333 404 393 27 14 0 false 0 0 0 false 0 0 0 false (None) 12 /Courier DrawText
376.5 399.5 5.5 5.5 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
30 365 354 102 14 0 false 0 0 0 false 0 0 0 false (Final Function:) 12 /Courier-Bold DrawText
137 367 150 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
20 333 341 208 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
30 340 140 14 0 0 0 0 false 0 0 [] -1 1 1.00 1.00 1.00 true DrawRectangle
35 340 329 130 14 0 false 0 0 0 false 0 0 0 false (:center-of-rotation) 12 /Courier-Bold DrawText
51 304 112 112 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
51.5 303.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
46.5 308.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
46.5 308.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
105.5 303.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
100.5 308.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
100.5 308.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
159.5 303.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
154.5 308.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
154.5 308.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
51.5 249.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
46.5 254.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
46.5 254.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
105.5 249.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
100.5 254.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
100.5 254.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
159.5 249.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
154.5 254.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
154.5 254.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
51.5 195.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
46.5 200.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
46.5 200.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
105.5 195.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
100.5 200.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
100.5 200.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
159.5 195.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
154.5 200.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
154.5 200.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
0 0 0 0 false 0 0 [] 1 332 207 232 307 DrawLine
235.5 303.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
230.5 308.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
230.5 308.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
285.5 253.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
280.5 258.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
280.5 258.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
335.5 203.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
330.5 208.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
330.5 208.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
35 157 146 7 14 0 false 0 0 0 false 0 0 0 false (X) 12 /Courier DrawText
47 159 30 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
86 157 146 7 14 0 false 0 0 0 false 0 0 0 false (Y) 12 /Courier DrawText
98 159 30 18 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
262.5 142.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawEllipse
257.5 147.5 11.5 11.5 0 360 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawEllipse
257.5 147.5 8.5 8.5 0 360 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawEllipse
283 150 139 61 14 0 false 0 0 0 false 0 0 0 false (<Formula>) 12 /Courier DrawText
40 106 97 34 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
30 116 97 34 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
35 111 87 24 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
40 106 95 76 14 0 false 0 0 0 false 0 0 0 false (Start-Event) 12 /Courier DrawText
152 106 97 34 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
142 116 97 34 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
147 111 87 24 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
156 106 95 69 14 0 false 0 0 0 false 0 0 0 false (Stop-Event) 12 /Courier DrawText
264 106 97 34 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRectangle
254 116 97 34 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
259 111 87 24 0 0 0 0 false 0 0 [] 1 1 1.00 1.00 1.00 true DrawRectangle
264 106 95 77 14 0 false 0 0 0 false 0 0 0 false (Abort-Event) 12 /Courier DrawText
grestore

grestore

0 755 545 692 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold /Times-BoldItalic 
%%BoundingBox: 72 99 540 693

%%EndDocument
 GE /Times-Bold SF
8280 50532 MT
(Figure 4-6:)SH
/Times-Roman SF
14053 XM
(Angle interactor dialog box)SH
ES
%%Page: 570 33
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 570)
SH( Lapidary)830 W
35898 XM
(Getting Applications to Run)
SH( Chapter)
1550 W( 5)SH
46800 50 6120 4486 UL
16 /Times-Bold AF
6120 8272 MT
(5. Getting Applications to Run)SH
11 /Times-Roman AF
6120 10524 MT
(Lapidary-generated files consist of a set of create-instance calls.  The)
83 W( objects created are stored in a list)84 W
6120 11720 MT
(and assigned)
320 W( to the variable *Garnet-Objects-Just-Created*.  The top of a Lapidary-generated file)319 W
6120 12916 MT
(contains code to)
72 W( load the lapidary-functions.lisp file, which provides functionality to support the created)73 W
6120 14112 MT
(objects.)SH
ES
%%Page: 571 34
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Index)SH
51386 XM
(Page 571)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(Index)SH
8 /Times-Roman AF
8280 11525 MT
(Add gadget)
SH( 545)400 W
23880 XM
(Run Lapidary)
SH( 539)400 W
8280 12449 MT
(Aggregadget, make)
SH( 551)400 W
8280 13373 MT
(Aggregadget, selection)
SH( 540)400 W
23880 XM
(Save 545)400 W
8280 14297 MT
(Aggrelist 539)400 W
23880 XM
(Secondary select covered object)
SH( 542)400 W
8280 15221 MT
(Arrange 551)400 W
23880 XM
(Secondary selection)
SH( 540,)
400 W( 542)SH
23880 16145 MT
(Secondary selection, add to)
SH( 543)400 W
8280 17069 MT
(Bitmap 539)400 W
23880 XM
(Secondary selection, deselect)
SH( 542)400 W
8280 17993 MT
(Box constraints)
SH( 552)400 W
23880 XM
(Selecting objects)
SH( 540)400 W
8280 18917 MT
(Box-constraint-do-go 557)400 W
23880 XM
(Send to back)
SH( 551)400 W
8280 19841 MT
(Bring to front)
SH( 551)400 W
23880 XM
(Show-box-constraint-menu 557)400 W
8280 20765 MT
(Build 552)400 W
23880 XM
(Show-line-constraint-menu 557)400 W
23880 21689 MT
(Start Lapidary)
SH( 539)400 W
8280 22613 MT
(C32 552)400 W
23880 XM
(Stop 546)400 W
8280 23537 MT
(Choice interactor)
SH( 562)400 W
8280 24461 MT
(Circle 539)400 W
23880 XM
(Test 552)400 W
8280 25385 MT
(Clear workspace)
SH( 552)400 W
23880 XM
(Text 539)400 W
8280 26309 MT
(Constraint-gadget 556)400 W
23880 XM
(Text interactor)
SH( 566)400 W
8280 27233 MT
(Constraints 552,)
400 W( 553)SH
23880 XM
(Text properties)
SH( 547)400 W
8280 28157 MT
(Create object)
SH( 543)400 W
23880 XM
(Text, edit)
SH( 543)400 W
23880 29081 MT
(Two point interactor)
SH( 564)400 W
8280 30005 MT
(Delete object)
SH( 546)400 W
8280 30929 MT
(Delete window)
SH( 546)400 W
23880 XM
(Ungroup 552)400 W
8280 31853 MT
(Draw function)
SH( 547)400 W
23880 32777 MT
(Window 539)400 W
8280 33701 MT
(Edit 546)400 W
8280 34625 MT
(Events 560)400 W
8280 35549 MT
(Exit 546)400 W
8280 37397 MT
(Filling style)
SH( 546)400 W
8280 38321 MT
(Formulas 561)400 W
8280 40169 MT
(Grow 543)400 W
8280 42017 MT
(Install-links 558)400 W
8280 42941 MT
(Interactors 552,)
400 W( 560)SH
8280 44789 MT
(Line 539)400 W
8280 45713 MT
(Line constraints)
SH( 552)400 W
8280 46637 MT
(Line style)
SH( 547)400 W
8280 47561 MT
(Line-constraint-do-go 557)400 W
8280 48485 MT
(Link slots)
SH( 558)400 W
8280 49409 MT
(List properties)
SH( 547)400 W
8280 51257 MT
(Make copy)
SH( 543,)
400 W( 546)SH
8280 52181 MT
(Make instance)
SH( 543,)
400 W( 546)SH
8280 53105 MT
(Mouse 542)400 W
8280 54029 MT
(Move 543)400 W
8280 54953 MT
(Move/grow interactor)
SH( 563)400 W
8280 55877 MT
(Multi-text 539)400 W
8280 57725 MT
(Name object)
SH( 547)400 W
8280 59573 MT
(Other, menu selection)
SH( 552)400 W
8280 61421 MT
(Parameters 548)400 W
8280 62345 MT
(Primary select covered object)
SH( 542)400 W
8280 63269 MT
(Primary selection)
SH( 540,)
400 W( 542)SH
8280 64193 MT
(Primary Selection, add to)
SH( 542)400 W
8280 65117 MT
(Primary selection, deselect)
SH( 542)400 W
8280 66041 MT
(Properties 546)400 W
8280 67889 MT
(Quit 546)400 W
8280 69737 MT
(Rectangle 539)400 W
8280 70661 MT
(Resize 543)400 W
8280 71585 MT
(Roundtangle 539)400 W
ES
%%Page: 572 35
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 572)
SH( Lapidary)830 W
50643 XM
(Index)SH
46800 50 6120 4486 UL
ES
%%Page: i 36
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Lapidary)SH
47914 XM
(Table of Contents)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
25591 8272 MT
(Table of Contents)SH
12 SS 
8280 9796 MT
(1. Getting Started)SH
53280 XM
(539)SH
10 SS 
9780 11186 MT
(1.1. Object Creation)SH
53580 XM
(539)SH
9780 12266 MT
(1.2. Selecting Objects)SH
53580 XM
(540)SH
9780 13346 MT
(1.3. Mouse-Based Commands)SH
53580 XM
(542)SH
12 SS 
8280 14870 MT
(2. Editor Menu Commands)SH
53280 XM
(545)SH
10 SS 
9780 16260 MT
(2.1. File)SH
53580 XM
(545)SH
9780 17340 MT
(2.2. Edit)SH
53580 XM
(546)SH
9780 18420 MT
(2.3. Properties)SH
53580 XM
(546)SH
9780 19500 MT
(2.4. Arrange)SH
53580 XM
(551)SH
9780 20580 MT
(2.5. Constraints)SH
53580 XM
(552)SH
9780 21660 MT
(2.6. Other)SH
53580 XM
(552)SH
9780 22740 MT
(2.7. Test and Build Radio Buttons)SH
53580 XM
(552)SH
12 SS 
8280 24264 MT
(3. Creating Constraints)SH
53280 XM
(553)SH
10 SS 
9780 25654 MT
(3.1. Box Constraints)SH
53580 XM
(553)SH
9780 26734 MT
(3.2. Line Constraints)SH
53580 XM
(555)SH
9780 27814 MT
(3.3. Custom Constraints)SH
53580 XM
(556)SH
9780 28894 MT
(3.4. The Constraint Gadget)SH
53580 XM
(556)SH
11780 29974 MT
(3.4.1. Programming Interface)SH
53580 XM
(556)SH
13780 31054 MT
(3.4.1.1. Slots of the Constraint Gadget)SH
53580 XM
(557)SH
13780 32134 MT
(3.4.1.2. Exported Functions)SH
53580 XM
(557)SH
13780 33214 MT
(3.4.1.3. Programming with Links)SH
53580 XM
(558)SH
11780 34294 MT
(3.4.2. Custom Constraints)SH
53580 XM
(559)SH
11780 35374 MT
(3.4.3. Feedback)SH
53580 XM
(559)SH
12 SS 
8280 36898 MT
(4. Interactors)SH
53280 XM
(560)SH
10 SS 
9780 38288 MT
(4.1. Action Buttons)SH
53580 XM
(560)SH
9780 39368 MT
(4.2. Events)SH
53580 XM
(560)SH
9780 40448 MT
(4.3. :Start Where)SH
53580 XM
(561)SH
9780 41528 MT
(4.4. Formulas)SH
53580 XM
(561)SH
9780 42608 MT
(4.5. Specific Interactors)SH
53580 XM
(562)SH
11780 43688 MT
(4.5.1. Choice Interactor)SH
53580 XM
(562)SH
11780 44768 MT
(4.5.2. Move/Grow Interactor)SH
53580 XM
(563)SH
11780 45848 MT
(4.5.3. Two Point Interactor)SH
53580 XM
(564)SH
11780 46928 MT
(4.5.4. Text Interactor)SH
53580 XM
(566)SH
11780 48008 MT
(4.5.5. Angle Interactor)SH
53580 XM
(568)SH
12 SS 
8280 49532 MT
(5. Getting Applications to Run)SH
53280 XM
(570)SH
8280 51056 MT
(Index)SH
53280 XM
(571)SH
ES
%%Trailer
%%Pages: 36
%%DocumentFonts: Times-Roman Times-Bold Symbol Courier Times-Italic
