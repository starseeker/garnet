%!PS-Adobe-2.0
%%Title: aggregadgets/aggregadgets-manual.mss
%%DocumentFonts: (atend)
%%Creator: Andrew Mickish and Scribe 7(1700)
%%CreationDate: 12 December 1994 15:28
%%Pages: (atend)
%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq 
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath translate
    100.0 -100.0 scale pop /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
    div dup scale 100.0 -100.0 scale
    /showpage {} def
    /letter {} def
    /lettersmall {} def
    /note {} def
    } bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
   {dup FontMapDict exch known{FontMapDict exch get} if
   original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
/RC {100.0 -100.0 scale
612.0 0.0 translate
-90.0 rotate
.01 -.01 scale} bind def
/URC {100.0 -100.0 scale
90.0 rotate
-612.0 0.0 translate
.01 -.01 scale} bind def
/RCC {100.0 -100.0 scale
0.0 -792.0 translate 90.0 rotate
.01 -.01 scale} bind def
/URCC {100.0 -100.0 scale
-90.0 rotate 0.0 792.0 translate
.01 -.01 scale} bind def
%%EndProlog
%%Page: 0 1
BS
0 SI
11 SS 
1 1 0 8280 7200 GB 
%%BeginDocument: single-sided.ps
%!PS-Adobe-2.0
%
%  This PostScript code turns off double-sided printing,
%  which is desirable since we want to be able to move the
%  Tables of Contents by hand after the manuals are printed.
%
statusdict begin
   false setduplexmode
end

%%EndDocument
 GE 16 /Times-Bold AF
22994 18976 MT
(Aggregadgets, Aggrelists,)SH
26370 20672 MT
(& Aggregraphs)SH
25393 22368 MT
(Reference Manual)SH
11 SS 
27753 24760 MT
(Andrew Mickish)SH
26562 25956 MT
(Roger B. Dannenberg)SH
27569 27152 MT
(Philippe Marchal)SH
28516 28348 MT
(David Kosbie)SH
27905 29544 MT
(A. Bryan Loyall)SH
/Times-Roman SF
28183 31470 MT
(December 1994)SH
/Times-Bold SF
29634 39617 MT
(Abstract)SH
/Times-Roman SF
8280 41369 MT
(Aggregadgets and aggrelists are)
89 W( objects used to define natural hierarchies of other objects in the Garnet)88 W
8280 42665 MT
(system. They)
609 W( allow the interface designer to group graphical objects)
167 W( and associated behaviors into a)168 W
8280 43961 MT
(single prototype object by declaring the structure of the components.)
29 W( Aggrelists)
332 W( are particularly useful in)28 W
8280 45257 MT
(the creation of menu-type objects, whose components are a sequence of)
53 W( similar items corresponding to a)54 W
8280 46553 MT
(list of elements.  Aggrelists will automatically maintain)
271 W( the layout of the graphical list of objects.)270 W
8280 47849 MT
(Aggregraphs are similarly used to create and maintain graph structures.)SH
21010 53567 MT
(Copyright)SH
/Symbol SF
25747 XM
(\323)SH
/Times-Roman SF
26891 XM
(1994 - Carnegie Mellon University)SH
8280 60350 MT
(This research was sponsored by NCCOSC under Contract No.  N66001-94-C-6037, Arpa Order)
207 W( No.)208 W
8280 61646 MT
(B326. The)
381 W( views and conclusions contained in this document)
53 W( are those of the authors and should not be)52 W
8280 62942 MT
(interpreted as representing the official policies, either expressed or implied, of NCCOSC or)
192 W( the U.S.)193 W
8280 64238 MT
(Government.)SH
ES
%%Page: 297 2
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.2)
SH( Aggregadgets)1800 W
51386 XM
(Page 297)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(1. Aggregadgets)SH
14 SS 
8280 13146 MT
(1.1. Accessing Aggregadgets and Aggrelists)SH
11 /Times-Roman AF
8280 14342 MT
(The aggregadgets and aggrelists files are automatically)
109 W( loaded when the file)108 W
10 /Courier AF
43163 XM
(garnet-loader.lisp)SH
11 /Times-Roman AF
54346 XM
(is)SH
8280 15538 MT
(used to load Garnet.  The)53 W
10 /Courier AF
19991 XM
(garnet-loader)SH
11 /Times-Roman AF
28119 XM
(file uses one loader file for both)
53 W( aggregadgets and aggrelists)54 W
8280 16734 MT
(called)SH
10 /Courier AF
11211 XM
(aggregadgets-loader.lisp)SH
11 /Times-Roman AF
(. Loading)
335 W( this file causes the KR, Opal, and Interactors files to)
30 W( be)29 W
8280 17930 MT
(loaded also.)SH
8280 20228 MT
(Aggregadgets and aggrelists reside in the)31 W
10 /Courier AF
26855 XM
(Opal)SH
11 /Times-Roman AF
29562 XM
(package. All)
339 W( identifiers in this manual are exported from)32 W
8280 21424 MT
(the)SH
10 /Courier AF
9901 XM
(Opal)SH
11 /Times-Roman AF
12578 XM
(package unless another package name is explicitly given.)
2 W( These)
277 W( identifiers can be referenced by)1 W
8280 22620 MT
(using the)SH
10 /Courier AF
12558 XM
(opal)SH
11 /Times-Roman AF
15233 XM
(prefix, e.g.)SH
10 /Courier AF
20272 XM
(opal:aggregadget)SH
11 /Times-Roman AF
(; the package name may be dropped if the line)SH
8 /Courier AF
10200 23785 MT
(\050use-package "OPAL"\051)SH
11 /Times-Roman AF
8280 25206 MT
(is executed before referring to any object in that package.)SH
14 /Times-Bold AF
8280 29024 MT
(1.2. Aggregadgets)SH
11 /Times-Roman AF
8280 30220 MT
(During the construction of a complicated Garnet interface, the designer will frequently)
164 W( be required to)165 W
8280 31416 MT
(arrange sets of objects into groups that are easy to manipulate.  These sets)
369 W( may have intricate)368 W
8280 32612 MT
(dependencies among the objects, or possess a hierarchical structure that suggests a further subgrouping)
20 W( of)21 W
8280 33808 MT
(the individual objects.  Interactors may)
200 W( also be associated with the objects that should intuitively be)199 W
8280 35004 MT
(defined along with the objects themselves.)SH
8280 37302 MT
(Aggregadgets provide the)
144 W( designer with a straightforward method for the definition and use of sets of)145 W
8280 38498 MT
(Garnet objects and interactors.  When an aggregadget is)
58 W( supplied with a list of object definitions, Garnet)57 W
8280 39694 MT
(will internally create instances of those objects and add them to the aggregadget)
97 W( as components.  If the)98 W
8280 40890 MT
(objects are given names, Garnet will create)
81 W( slots in the aggregadget which point to the objects, granting)80 W
8280 42086 MT
(easy access to the components.  Interactors that manipulate the)
110 W( components of the aggregadget may be)111 W
8280 43282 MT
(similarly defined.)SH
8280 45580 MT
(By creating instances of aggregadgets, the designer actually groups the)
134 W( objects and interactors under a)133 W
8280 46776 MT
(single prototype \050class\051 name.)
36 W( The)
349 W( defined prototype may be used repeatedly to create more instances of)37 W
8280 47972 MT
(the defined group.  To illustrate this feature of aggregadgets, consider the schemata shown below:)SH
8 /Courier AF
10200 49137 MT
(\050create-instance 'MY-GROUP opal:aggregadget)SH
11640 50002 MT
(\050:parts)SH
15480 50867 MT
(...\051)SH
/Times-Italic SF
20760 XM
(; some group of graphical objects)SH
/Courier SF
11640 51732 MT
(\050:interactors)SH
15480 52597 MT
(...\051\051)SH
/Times-Italic SF
20760 XM
(; some group of interactors)SH
/Courier SF
10200 54327 MT
(\050create-instance 'GROUP-1 MY-GROUP\051)SH
10200 56057 MT
(\050create-instance 'GROUP-2 MY-GROUP)SH
11640 56922 MT
(...\051)SH
/Times-Italic SF
20760 XM
(; definition of more slots)SH
11 /Times-Roman AF
8280 59220 MT
(The schema MY-GROUP defines a set of associated graphical objects)
7 W( and interactors using an instance of)6 W
8280 60416 MT
(the)SH
10 /Courier AF
9983 XM
(opal:aggregadget)SH
11 /Times-Roman AF
19942 XM
(object. The)
443 W( schemata)84 W
10 /Courier AF
30143 XM
(group-1)SH
11 /Times-Roman AF
34702 XM
(and)SH
10 /Courier AF
36649 XM
(group-2)SH
11 /Times-Roman AF
41208 XM
(are instances of)
84 W( the)85 W
10 /Courier AF
50280 XM
(my-group)SH
11 /Times-Roman AF
8280 61612 MT
(prototype which)
130 W( inherit all of the parts and behaviors defined in the prototype.  The)129 W
10 /Courier AF
47178 XM
(group-2)SH
11 /Times-Roman AF
51782 XM
(schema)SH
8280 62808 MT
(additionally defines new slots in the aggregadget for some special purpose.)SH
12 /Times-Bold AF
8280 66492 MT
(1.2.1. How to Use Aggregadgets)SH
11 /Times-Roman AF
8280 67688 MT
(In order to group a set of objects together as components of)
39 W( an aggregadget, the designer must define the)40 W
8280 68884 MT
(objects in the)SH
10 /Courier AF
14421 XM
(:parts)SH
11 /Times-Roman AF
18296 XM
(slot of the aggregadget.)SH
8280 71182 MT
(The syntax of the)4 W
10 /Courier AF
16238 XM
(:parts)SH
11 /Times-Roman AF
20117 XM
(slot is a backquoted list)
4 W( of lists, where each inner list defines one component of)3 W
ES
%%Page: 298 3
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 298)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(the aggregadget.)
86 W( The)
449 W( definition of each component includes a keyword that will be used as a name for)87 W
6120 9151 MT
(that part \050or NIL if the part is to be unnamed\051,)
45 W( the prototype of that part, and a set of slot definitions that)44 W
6120 10347 MT
(customize the component from the prototype.)SH
6120 12645 MT
(The aggregadget will)
97 W( internally convert this list of parts into components of the aggregadget, with each)98 W
6120 13841 MT
(part named by the keyword provided \050or unnamed, if the keyword is NIL\051.)SH
6120 16139 MT
(Everything inside the backquote that should be evaluated immediately must be preceded by a)
142 W( comma.)141 W
6120 17335 MT
(Usually the)
225 W( following will need commas:  the prototype of the component, variable names, calls to)226 W
10 /Courier AF
6120 18531 MT
(formula)SH
11 /Times-Roman AF
10595 XM
(and)SH
10 /Courier AF
12458 XM
(o-formula)SH
11 /Times-Roman AF
(, etc.)SH
6120 20829 MT
(After an aggregadget is created, the designer should not refer to)
64 W( the)63 W
10 /Courier AF
36785 XM
(:parts)SH
11 /Times-Roman AF
40723 XM
(slot. Each)
401 W( component may)63 W
6120 22025 MT
(be accessed by name as a slot of the aggregadget.  Additionally, all components are listed)
275 W( in the)276 W
10 /Courier AF
6120 23221 MT
(:components)SH
11 /Times-Roman AF
13100 XM
(slot just)
105 W( as in aggregates.)
104 W( As)
1241 W( with aggregates, components are listed in display order,)104 W
6120 24417 MT
(that is,)SH
/Times-Italic SF
9329 XM
(from back to front)SH
/Times-Roman SF
(.)SH
6120 26715 MT
(A short example of an aggregadget definition is shown in figure 1-1, and the)
5 W( picture of this aggregadget is)6 W
6120 27911 MT
(in figure 1-2.)SH
8 /Courier AF
8040 29606 MT
(\050create-instance 'CHECK-MARK opal:aggregadget)SH
9480 30471 MT
(\050:parts)SH
9960 31336 MT
(`\050\050:left-line ,opal:line)SH
16680 32201 MT
(\050:x1 70\051)SH
16680 33066 MT
(\050:y1 45\051)SH
16680 33931 MT
(\050:x2 95\051)SH
16680 34796 MT
(\050:y2 70\051\051)SH
10920 35661 MT
(\050:right-line ,opal:line)SH
17160 36526 MT
(\050:x1 95\051)SH
17160 37391 MT
(\050:y1 70\051)SH
17160 38256 MT
(\050:x2 120\051)SH
17160 39121 MT
(\050:y2 30\051\051\051\051\051)SH
11 /Times-Bold AF
6120 40873 MT
(Figure 1-1:)SH
/Times-Roman SF
11893 XM
(A simple CHECK-MARK aggregadget.)SH
75 100 0 6570 75519 GB 
%%BeginDocument: aggregadgets/agg-check-mark.ps
%!PS-Adobe-2.0
%%Title: Opal 3
%%Creator: Make-PS-File -- Garnet Version 2.0.alpha
%%CreationDate: Apr 28, 1992, 5:24 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 206 346 406 446
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
134 -274 translate
gsave
0 648 200 100 ClipToRectangle
0 0 translate
gsave
0 0 0 0 false 0 0 [] 1 95 578 70 603 DrawLine
0 0 0 0 false 0 0 [] 1 120 618 95 578 DrawLine
grestore

grestore

0 648 200 100 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 206 346 406 446

%%EndDocument
 GE /Times-Bold SF
6120 52517 MT
(Figure 1-2:)SH
/Times-Roman SF
11893 XM
(The picture of the CHECK-MARK aggregadget.)SH
6120 54815 MT
(Of course, the designer may define other slots in the aggregadget besides the)291 W
10 /Courier AF
43928 XM
(:parts)SH
11 /Times-Roman AF
48093 XM
(slot. One)855 W
6120 56011 MT
(convenient programming style involves the definition of several slots in the)
82 W( top-level aggregadget \050such)83 W
6120 57207 MT
(as)SH
10 /Courier AF
7368 XM
(:left)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
10975 XM
(:top)SH
11 /Times-Roman AF
(, etc.\051 with formulas in several components that refer to these values, thereby allowing a)56 W
6120 58403 MT
(change in one top-level slot to propagate to all dependent slots in the components.  Slots of components)68 W
6120 59599 MT
(may also contain formulas that refer to other components \050see section 1.2.6\051.)SH
12 /Times-Bold AF
6120 63283 MT
(1.2.2. Named Components)SH
11 /Times-Roman AF
6120 64479 MT
(When keywords are given in the)3 W
10 /Courier AF
20676 XM
(:parts)SH
11 /Times-Roman AF
24554 XM
(list that correspond)
3 W( to each component, those keywords are used)2 W
6120 65675 MT
(as names for)
13 W( the components.  In figure 1-1, the names are)14 W
10 /Courier AF
32308 XM
(:left-line)SH
11 /Times-Roman AF
38597 XM
(and)SH
10 /Courier AF
40474 XM
(:right-line)SH
11 /Times-Roman AF
(. Since)
303 W( these)14 W
6120 66871 MT
(names were supplied, the slots)404 W
10 /Courier AF
21826 XM
(:left-line)SH
11 /Times-Roman AF
28505 XM
(and)SH
10 /Courier AF
30772 XM
(:right-line)SH
11 /Times-Roman AF
38050 XM
(are set in the CHECK-MARK)403 W
6120 68067 MT
(aggregadget with the components themselves as values.  That is,)212 W
10 /Courier AF
36894 XM
(\050gv CHECK-MARK :left-line\051)213 W
11 /Times-Roman AF
6120 69263 MT
(yields the actual component that was created from the)SH
10 /Courier AF
30097 XM
(:parts)SH
11 /Times-Roman AF
33972 XM
(description.)SH
6120 71561 MT
(The slot)4 W
10 /Courier AF
9978 XM
(:known-as)SH
11 /Times-Roman AF
15657 XM
(in the component is also set with the)
4 W( name of the component.  In the example above,)3 W
ES
%%Page: 299 4
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.2)
SH( Aggregadgets)1800 W
51386 XM
(Page 299)SH
46800 50 8280 4486 UL
/Courier SF
8280 7955 MT
(\050gv CHECK-MARK :left-line :known-as\051)17 W
11 /Times-Roman AF
30223 XM
(yields)SH
10 /Courier AF
33143 XM
(:left-line)SH
11 /Times-Roman AF
(. Another)
309 W( way to look at these slots)18 W
8280 9151 MT
(and objects is shown in figures 1-3 and 1-4.)SH
8280 11449 MT
(When adding a new component to)
135 W( an aggregadget, you can set the)134 W
10 /Courier AF
39306 XM
(:known-as)SH
11 /Times-Roman AF
45115 XM
(slot of the component)134 W
8280 12645 MT
(with a keyword name, which will be used in the top-level aggregadget as a)
49 W( slot name that points directly)50 W
8280 13841 MT
(to the new component.  The)
257 W( example at the end of section 1.2.4 illustrates the idea of setting the)256 W
10 /Courier AF
8280 15037 MT
(:known-as)SH
11 /Times-Roman AF
13955 XM
(slot.)SH
46800 50 8280 17188 UL
8 /Times-Bold AF
10200 18718 MT
(lisp>)SH
/Courier SF
12336 XM
(\050ps CHECK-MARK\051)SH
10200 20448 MT
({#k<CHECK-MARK>)SH
11160 21313 MT
(:RIGHT-LINE = #k<KR-DEBUG:RIGHT-LINE-226>)SH
11160 22178 MT
(:LEFT-LINE = #k<KR-DEBUG:LEFT-LINE-220>)SH
11160 23043 MT
(:COMPONENTS = #k<KR-DEBUG:LEFT-LINE-220> #k<KR-DEBUG:RIGHT-LINE-226>)SH
11160 23908 MT
(...)SH
11160 24773 MT
(:PARTS = \050\050:LEFT-LINE #k<OPAL:LINE>)SH
21720 25638 MT
(\050:X1 70\051 \050:Y1 45\051 \050:X2 95\051 \050:Y2 70\051\051)SH
15960 26503 MT
(\050:RIGHT-LINE #k<OPAL:LINE>)SH
22200 27368 MT
(\050:X1 95\051 \050:Y1 70\051 \050:X2 120\051 \050:Y2 30\051\051\051)SH
11160 28233 MT
(...)SH
11160 29098 MT
(:IS-A = #k<OPAL:AGGREGADGET>)SH
10200 29963 MT
(})SH
10200 30828 MT
(NIL)SH
/Times-Bold SF
10200 31693 MT
(lisp>)SH
11 SS 
8280 33445 MT
(Figure 1-3:)SH
/Times-Roman SF
14053 XM
(The printout of the CHECK-MARK aggregadget.)SH
46800 50 8280 35596 UL
8 /Times-Bold AF
10200 37128 MT
(lisp>)SH
/Courier SF
12336 XM
(\050ps \050gv CHECK-MARK :right-line\051\051)SH
10200 38858 MT
({#k<KR-DEBUG:RIGHT-LINE-226>)SH
11160 39723 MT
(:PARENT =  #k<CHECK-MARK>)SH
11160 40588 MT
(:KNOWN-AS =  :RIGHT-LINE)SH
11160 41453 MT
(...)SH
11160 42318 MT
(:Y2 =  30)SH
11160 43183 MT
(:X2 =  120)SH
11160 44048 MT
(:Y1 =  70)SH
11160 44913 MT
(:X1 =  95)SH
11160 45778 MT
(:IS-A =  #k<OPAL:LINE>)SH
10200 46643 MT
(})SH
10200 47508 MT
(NIL)SH
/Times-Bold SF
10200 48373 MT
(lisp>)SH
11 SS 
8280 50990 MT
(Figure 1-4:)SH
/Times-Roman SF
14053 XM
(The)SH
10 /Courier AF
16038 XM
(:right-line)SH
11 /Times-Roman AF
22913 XM
(component of CHECK-MARK.)SH
46800 50 8280 52942 UL
8280 55040 MT
(As shown in figure 1-3, CHECK-MARK has two components:)
16 W( RIGHT-LINE-226)
308 W( which is a line created)17 W
8280 56236 MT
(according to the definition)
25 W( of)24 W
10 /Courier AF
21508 XM
(:right-line)SH
11 /Times-Roman AF
28407 XM
(in the)24 W
10 /Courier AF
31205 XM
(:parts)SH
11 /Times-Roman AF
35104 XM
(slot of the CHECK-MARK aggregadget, and)24 W
8280 57432 MT
(LEFT-LINE-220 corresponding to the definition of)
376 W( the)377 W
10 /Courier AF
35383 XM
(:left-line)SH
11 /Times-Roman AF
42035 XM
(part. The)
1029 W( CHECK-MARK)377 W
8280 58628 MT
(aggregadget also has two slots,)157 W
10 /Courier AF
22995 XM
(:right-line)SH
11 /Times-Roman AF
30027 XM
(and)SH
10 /Courier AF
32047 XM
(:left-line)SH
11 /Times-Roman AF
(, whose values are the corresponding)157 W
8280 59824 MT
(components.)SH
ES
%%Page: 300 5
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 300)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
12 /Times-Bold AF
6120 8004 MT
(1.2.3. Destroying Aggregadgets)SH
10 /Courier AF
6120 9200 MT
(opal:Destroy)SH
11 /Times-Italic AF
13595 XM
(gadget)SH
/Times-Roman SF
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
10 /Courier AF
6120 11498 MT
(opal:Destroy-Me)SH
11 /Times-Italic AF
15395 XM
(gadget)SH
/Times-Roman SF
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
6120 13796 MT
(The)SH
10 /Courier AF
8153 XM
(destroy)SH
11 /Times-Roman AF
12677 XM
(method destroys an aggregadget or aggrelist and its instances.  To destroy a gadget means)49 W
6120 14992 MT
(to destroy its interactors, components, and item-prototype-object as well)
25 W( as the gadget schema itself.  The)24 W
10 /Courier AF
6120 16188 MT
(destroy-me)SH
11 /Times-Roman AF
12457 XM
(method for aggregadgets and aggrelists destroys the prototype but)
62 W( not its instances.)63 W
/Times-BoldItalic SF
50416 XM
(Note:)SH
/Times-Roman SF
6120 17384 MT
(users of gadgets should call)SH
10 /Courier AF
18553 XM
(destroy)SH
11 /Times-Roman AF
(; implementors of subclasses should override)SH
10 /Courier AF
42855 XM
(destroy-me)SH
11 /Times-Roman AF
(.)SH
12 /Times-Bold AF
6120 21068 MT
(1.2.4. Constants and Aggregadgets)SH
11 /Times-Roman AF
6120 22264 MT
(The ability to define constant slots is an advanced feature of Garnet that is discussed in detail in the)
66 W( KR)65 W
6120 23460 MT
(manual. However,)
275 W( the aggregadgets use some of the features of constant slots by default.)SH
6120 25758 MT
(All aggregadgets created with an initial)185 W
10 /Courier AF
24825 XM
(:parts)SH
11 /Times-Roman AF
28886 XM
(list have constant)186 W
10 /Courier AF
37357 XM
(:components)SH
11 /Times-Roman AF
(. That)
647 W( is, after the)186 W
6120 26954 MT
(aggregadget has been created with all of its parts, the)9 W
10 /Courier AF
29819 XM
(:components)SH
11 /Times-Roman AF
36703 XM
(slot becomes)
9 W( constant automatically,)8 W
6120 28150 MT
(and the components of the aggregadget are not normally modifiable.  Also, the)71 W
10 /Courier AF
41959 XM
(:known-as)SH
11 /Times-Roman AF
47706 XM
(slot of each)72 W
6120 29346 MT
(part and the slot in the aggregadget corresponding to the name of each part)
138 W( is constant.  By declaring)137 W
6120 30542 MT
(these slots constant, Garnet is able to)
91 W( automatically get rid of the greatest number of formulas possible,)92 W
6120 31738 MT
(thereby freeing up memory for other objects.)SH
6120 34036 MT
(For example, given the following instance of an)SH
10 /Courier AF
27473 XM
(aggregadget)SH
11 /Times-Roman AF
(,)SH
8 /Courier AF
8040 35201 MT
(\050create-instance 'MY-AGG opal:aggregadget)SH
9000 36066 MT
(\050:parts)SH
9480 36931 MT
(`\050\050:obj1 ,opal:rectangle)SH
13800 37796 MT
(\050:left 20\051 \050:top 40\051\051)SH
10440 38661 MT
(\050:obj2 ,opal:circle)SH
13800 39526 MT
(\050:left 50\051 \050:top 10\051\051\051\051\051)SH
11 /Times-Roman AF
6120 40947 MT
(the slots)50 W
10 /Courier AF
10132 XM
(:components)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
17332 XM
(:obj1)SH
11 /Times-Roman AF
(, and)50 W
10 /Courier AF
22845 XM
(:obj2)SH
11 /Times-Roman AF
26169 XM
(will be constant in MY-AGG.  The result is that you cannot)49 W
6120 42143 MT
(remove components or add new components to this aggregadget)
417 W( without disabling the constant)418 W
6120 43339 MT
(mechanism.)SH
6120 45637 MT
(If you really want to add)
502 W( another component to the aggregadget, you could use the macro)501 W
10 /Courier AF
6120 46833 MT
(with-constants-disabled)SH
11 /Times-Roman AF
(, which is described in the KR Manual:)SH
8 /Courier AF
8040 47998 MT
(\050with-constants-disabled)SH
9000 48863 MT
(\050opal:add-component MY-AGG \050create-instance NIL opal:roundtangle)SH
22920 49728 MT
(\050:known-as :obj3\051)SH
/Times-Italic SF
32040 XM
(; will become a constant slot)SH
/Courier SF
22920 50593 MT
(\050:left 40\051 \050:top 20\051\051\051\051)SH
11 /Times-Roman AF
6120 52014 MT
(Adding components to a constant aggregadget is)
286 W( discouraged because the aggregadget's dimension)287 W
6120 53210 MT
(formulas that were)
28 W( already thrown away \050if they were evaluated\051 will not be updated with the dimensions)27 W
6120 54406 MT
(of the new components.  That is, if OBJ3 in the example above is outside)
27 W( of the original bounding box of)28 W
6120 55602 MT
(MY-AGG \050calculated by the formulas in MY-AGG's)92 W
10 /Courier AF
30557 XM
(:left)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
34199 XM
(:top)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
37240 XM
(:width)SH
11 /Times-Roman AF
(, and)91 W
10 /Courier AF
43435 XM
(:height)SH
11 /Times-Roman AF
48001 XM
(slots\051, then)91 W
6120 56798 MT
(Opal will fail to display)
221 W( the new component correctly because it only updates the area enclosed by)222 W
6120 57994 MT
(MY-AGG's bounding box.)SH
6120 60292 MT
(A better)
58 W( solution than forcibly adding components is to create a non-constant aggregadget to begin with.)57 W
6120 61488 MT
(Since only aggregadgets that are created)
227 W( with a)228 W
10 /Courier AF
28951 XM
(:parts)SH
11 /Times-Roman AF
33054 XM
(slot are constant, you should start with an)228 W
6120 62684 MT
(aggregadget without a)87 W
10 /Courier AF
16430 XM
(:parts)SH
11 /Times-Roman AF
20392 XM
(list, and add your components using)87 W
10 /Courier AF
37077 XM
(add-component)SH
11 /Times-Roman AF
(. Thus,)
448 W( the better)86 W
6120 63880 MT
(way to build the aggregadet above is:)SH
ES
%%Page: 301 6
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.2)
SH( Aggregadgets)1800 W
51386 XM
(Page 301)SH
46800 50 8280 4486 UL
8 /Courier AF
10200 7699 MT
(\050create-instance 'MY-AGG opal:aggregadget\051)SH
10200 8564 MT
(\050opal:add-components MY-AGG \050create-instance NIL opal:rectangle)SH
24600 9429 MT
(\050:known-as :obj1\051)SH
24600 10294 MT
(\050:left 20\051 \050:top 40\051\051)SH
23640 11159 MT
(\050create-instance NIL opal:circle)SH
24600 12024 MT
(\050:known-as :obj2\051)SH
24600 12889 MT
(\050:left 50\051 \050:top 10\051\051\051)SH
/Times-Italic SF
10200 13754 MT
(; Then later...)SH
/Courier SF
10200 14619 MT
(\050opal:add-component MY-AGG \050create-instance NIL opal:roundtangle)SH
24120 15484 MT
(\050:known-as :obj3\051)SH
24120 16349 MT
(\050:left 40\051 \050:top 20\051\051\051)SH
11 /Times-Roman AF
8280 17770 MT
(Note that you will have to supply your own)262 W
10 /Courier AF
30039 XM
(:known-as)SH
11 /Times-Roman AF
35976 XM
(slots in the components if you want the)263 W
8280 18966 MT
(aggregadet to have slots referring to those components.)SH
12 /Times-Bold AF
8280 22650 MT
(1.2.5. Implementation of Aggregadgets)SH
11 /Times-Roman AF
8280 23846 MT
(An aggregadget is an instance of the prototype)322 W
10 /Courier AF
31626 XM
(opal:aggregate)SH
11 /Times-Roman AF
(, with an initialize method that)322 W
8280 25042 MT
(interprets the)111 W
10 /Courier AF
14550 XM
(:parts)SH
11 /Times-Roman AF
18536 XM
(slot and provides other functions.  This)
111 W( initialize method performs the following)112 W
8280 26238 MT
(tasks:)SH
/Symbol SF
10249 27816 MT
(\267)SH
/Times-Roman SF
11030 XM
(an instance of every part is created,)SH
/Symbol SF
10249 29710 MT
(\267)SH
/Times-Roman SF
11030 XM
(all these instances are added \050with)SH
10 /Courier AF
26362 XM
(add-component)SH
11 /Times-Roman AF
(\051 as the components of the aggregadget,)SH
/Symbol SF
10249 31604 MT
(\267)SH
/Times-Roman SF
11030 XM
(for each part, a slot is created in the aggregate. The name)
45 W( of this slot is the name of the part,)44 W
11030 32800 MT
(and its value is the instance of the corresponding part.)SH
/Symbol SF
10249 34694 MT
(\267)SH
/Times-Roman SF
11030 XM
(The slot)SH
10 /Courier AF
14880 XM
(:known-as)SH
11 /Times-Roman AF
20555 XM
(in the part is set with the part's name.)SH
/Symbol SF
10249 36588 MT
(\267)SH
/Times-Roman SF
11030 XM
(In some cases \050described in detail later\051, some or all of)
281 W( the structure of the prototype)282 W
11030 37784 MT
(aggregadget is inherited by the new instance.)SH
12 /Times-Bold AF
8280 41468 MT
(1.2.6. Dependencies Among Components)SH
11 /Times-Roman AF
8280 42664 MT
(Aggregadgets are designed to facilitate the definition of dependencies among)
51 W( their components.  When a)50 W
8280 43860 MT
(slot of one component depends on the value of a slot in)
32 W( another component of the same aggregadget, that)33 W
8280 45056 MT
(dependency is expressed using a formula.)SH
8280 47354 MT
(The aggregadget is considered the parent of the components, and)
82 W( the components are all siblings within)81 W
8280 48550 MT
(the aggregadget.  Thus, the)57 W
10 /Courier AF
20752 XM
(:parent)SH
11 /Times-Roman AF
25284 XM
(slot of each component can be used to)
57 W( travel up the hierarchy, and)58 W
8280 49746 MT
(the slot names of the aggregadget and its components can be used to travel down.)SH
8280 52044 MT
(Consider the)
112 W( following modification to the CHECK-MARK schema defined in section 1.2.1.  In figure)111 W
8280 53240 MT
(1-1, the)139 W
10 /Courier AF
12193 XM
(:x1)SH
11 /Times-Roman AF
14407 XM
(and)SH
10 /Courier AF
16409 XM
(:y1)SH
11 /Times-Roman AF
18623 XM
(slots of the)139 W
10 /Courier AF
24143 XM
(:right-line)SH
11 /Times-Roman AF
31157 XM
(object are the)
139 W( same as the)140 W
10 /Courier AF
43539 XM
(:x2)SH
11 /Times-Roman AF
45754 XM
(and)SH
10 /Courier AF
47757 XM
(:y2)SH
11 /Times-Roman AF
49972 XM
(slots of the)140 W
10 /Courier AF
8280 54436 MT
(:left-line)SH
11 /Times-Roman AF
14591 XM
(object so that the two lines meet at a common point.  Rather than explicitly repeating these)35 W
8280 55632 MT
(coordinates in)
112 W( the)113 W
10 /Courier AF
16713 XM
(:right-line)SH
11 /Times-Roman AF
23701 XM
(object, dependencies can be defined in the)113 W
10 /Courier AF
43366 XM
(:right-line)SH
11 /Times-Roman AF
50354 XM
(object that)113 W
8280 56828 MT
(cause its origin to always be the terminus of the)103 W
10 /Courier AF
30572 XM
(:left-line)SH
11 /Times-Roman AF
(. Figure)
480 W( 1-5 shows the definition of this)102 W
8280 58024 MT
(modified schema.)SH
8 /Courier AF
10200 59719 MT
(\050create-instance 'MODIFIED-CHECK-MARK opal:aggregadget)SH
11640 60584 MT
(\050:parts)SH
12120 61449 MT
(`\050\050:left-line ,opal:line)SH
18840 62314 MT
(\050:x1 70\051)SH
18840 63179 MT
(\050:y1 45\051)SH
18840 64044 MT
(\050:x2 95\051)SH
18840 64909 MT
(\050:y2 70\051\051)SH
13080 65774 MT
(\050:right-line ,opal:line)SH
19320 66639 MT
(\050:x1 ,\050o-formula \050gvl :parent :left-line :x2\051\051\051)SH
19320 67504 MT
(\050:y1 ,\050o-formula \050gvl :parent :left-line :y2\051\051\051)SH
19320 68369 MT
(\050:x2 120\051)SH
19320 69234 MT
(\050:y2 30\051\051\051\051\051)SH
11 /Times-Bold AF
8280 70986 MT
(Figure 1-5:)SH
/Times-Roman SF
14053 XM
(A modified CHECK-MARK schema.)SH
ES
%%Page: 302 7
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 302)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(Commas must precede the calls to)80 W
10 /Courier AF
21936 XM
(o-formula)SH
11 /Times-Roman AF
27691 XM
(and the references to the)80 W
10 /Courier AF
39114 XM
(opal:line)SH
11 /Times-Roman AF
44869 XM
(prototype because)80 W
6120 9151 MT
(these items must be evaluated immediately.  Without commas, the)68 W
10 /Courier AF
36252 XM
(o-formula)SH
11 /Times-Roman AF
41995 XM
(call, for example, would)68 W
6120 10347 MT
(be interpreted as a quoted list due to the backquoted)SH
10 /Courier AF
29274 XM
(:parts)SH
11 /Times-Roman AF
33149 XM
(list.)SH
6120 12645 MT
(The macro)176 W
10 /Courier AF
11480 XM
(gvl-sibling)SH
11 /Times-Roman AF
18531 XM
(is provided)
176 W( to abbreviate references between the sibling components of an)177 W
6120 13841 MT
(aggregadget:)SH
10 /Courier AF
6120 16139 MT
(opal:Gvl-Sibling)SH
11 /Times-Italic AF
15995 XM
(sibling-name)SH
10 /Courier AF
22014 XM
(&rest)SH
11 /Times-Italic AF
25289 XM
(slots)SH
/Times-Roman SF
49256 XM
([)SH
/Times-Italic SF
(Macro)SH
/Times-Roman SF
(])SH
6120 18437 MT
(For example, the)SH
10 /Courier AF
13818 XM
(:x1)SH
11 /Times-Roman AF
15893 XM
(slot of the)SH
10 /Courier AF
20568 XM
(:right-line)SH
11 /Times-Roman AF
27443 XM
(object in figure 1-5 may be given the equivalent value)SH
8 /Courier AF
8040 19602 MT
(,\050o-formula \050opal:gvl-sibling :left-line :x2\051\051)SH
12 /Times-Bold AF
6120 23286 MT
(1.2.7. Multi-level Aggregadgets)SH
11 /Times-Roman AF
6120 24482 MT
(Aggregadgets can be used to define more complicated objects with a)
123 W( multi-level hierarchical structure.)122 W
6120 25678 MT
(Consider the picture of a check-box shown in figure 1-6.)SH
75 100 0 6570 60324 GB 
%%BeginDocument: aggregadgets/agg-check-box.PS
%!PS-Adobe-2.0
%%Title: Opal 3
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 2, 1992, 2:06 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 206 346 406 446
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub
          width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
134 -274 translate
gsave
0 648 200 100 ClipToRectangle
0 0 translate
gsave
75 623 50 50 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
0 0 0 0 false 0 0 [] 1 95 578 80 598 DrawLine
0 0 0 0 false 0 0 [] 1 120 618 95 578 DrawLine
grestore

grestore

0 648 200 100 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 206 346 406 446

%%EndDocument
 GE /Times-Bold SF
6120 36126 MT
(Figure 1-6:)SH
/Times-Roman SF
11893 XM
(A picture of a check-box.)SH
6120 38424 MT
(The check-box can)
124 W( be considered a hierarchy of objects:  the CHECK-MARK object defined in figure)125 W
6120 39620 MT
(1-1, and a box.  This hierarchy is illustrated in figure 1-7.)SH
8 /Courier AF
21960 41315 MT
(check-box)SH
22920 42180 MT
(/ \134)480 W
22440 43045 MT
(/ \134)1440 W
21480 43910 MT
(box check-mark)480 W
25320 44775 MT
(/ \134)480 W
24840 45640 MT
(/ \134)1440 W
21480 46505 MT
(left-line right-line)960 W
11 /Times-Bold AF
6120 48257 MT
(Figure 1-7:)SH
/Times-Roman SF
11893 XM
(The hierarchical structure of a check-box.)SH
6120 50555 MT
(The CHECK-BOX hierarchy is implemented through aggregadgets in figure 1-8.  Although the)
33 W( CHECK-)32 W
6120 51751 MT
(BOX schema defines the)80 W
10 /Courier AF
17680 XM
(:box)SH
11 /Times-Roman AF
20435 XM
(component explicitly, the details of the)80 W
10 /Courier AF
38360 XM
(:mark)SH
11 /Times-Roman AF
41715 XM
(object have)
80 W( been defined)81 W
6120 52947 MT
(elsewhere in the CHECK-MARK schema \050see figure 1-1\051.  The aggregadget definition for the)
77 W( CHECK-)76 W
6120 54143 MT
(MARK part)
48 W( could have been written out explicitly, as in the more complicated CHECK-BOX schema of)49 W
6120 55339 MT
(figure 1.9.1.)
58 W( However,)
390 W( the CHECK-BOX definition presented here uses a modular approach that allows)57 W
6120 56535 MT
(the reuse of the CHECK-MARK schema in other applications.)SH
8 /Courier AF
8040 58230 MT
(\050create-instance 'CHECK-BOX opal:aggregadget)SH
9480 59095 MT
(\050:parts)SH
9960 59960 MT
(`\050\050:box ,opal:rectangle)SH
13800 60825 MT
(\050:left 75\051)SH
13800 61690 MT
(\050:top 25\051)SH
13800 62555 MT
(\050:width 50\051)SH
13800 63420 MT
(\050:height 50\051\051)SH
10920 64285 MT
(\050:mark ,CHECK-MARK\051\051\051\051)SH
11 /Times-Bold AF
6120 66037 MT
(Figure 1-8:)SH
/Times-Roman SF
11893 XM
(The definition of a check-box.)SH
6120 68335 MT
(See section 1.9.2 for another example of a modularized multi-level aggregadget, and see section 1.4.1)
33 W( for)34 W
6120 69531 MT
(information about inheriting structure from other multi-level aggregadgets.)SH
ES
%%Page: 303 8
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.2)
SH( Aggregadgets)1800 W
51386 XM
(Page 303)SH
46800 50 8280 4486 UL
12 /Times-Bold AF
8280 8004 MT
(1.2.8. Nested Part Expressions for Aggregadgets)SH
11 /Times-Roman AF
8280 9200 MT
(Recall that parts are specified in a)SH
10 /Courier AF
23459 XM
(:parts)SH
11 /Times-Roman AF
27334 XM
(slot and that the syntax for a part is)SH
9 SS 
23572 10714 MT
(*)SH
11 SS 
10480 11077 MT
(\050)SH
/Times-Italic SF
(name prototype)SH
/Times-Roman SF
17994 XM
({)SH
/Times-Italic SF
(slot value)275 W
/Times-Roman SF
(})SH
24022 XM
(\051)SH
8280 12729 MT
(where)SH
/Times-Italic SF
11242 XM
(name)SH
/Times-Roman SF
13900 XM
(is either a keyword or NIL,)SH
/Times-Italic SF
26147 XM
(prototype)SH
/Times-Roman SF
30638 XM
(is a prototype for the part, and)SH
/Times-Italic SF
44200 XM
(slots)SH
/Times-Roman SF
46493 XM
(is a list of local slot)SH
8280 13925 MT
(definitions. If)652 W
/Times-Italic SF
15384 XM
(prototype)SH
/Times-Roman SF
20064 XM
(is an aggregadget, then)189 W
/Times-Italic SF
31235 XM
(slots)SH
/Times-Roman SF
33717 XM
(may contain another parts slot; thus, an entire)189 W
8280 15121 MT
(aggregadget tree can be specified by nested)SH
10 /Courier AF
27671 XM
(:parts)SH
11 /Times-Roman AF
31546 XM
(slots.)SH
8280 17419 MT
(For example, figure 1-9 implements)
65 W( a box containing an X. Notice how the)64 W
10 /Courier AF
42505 XM
(:mark)SH
11 /Times-Roman AF
45844 XM
(part of X-BOX is an)64 W
8280 18615 MT
(aggregadget containing its own parts.)SH
75 100 0 8730 52886 GB 
%%BeginDocument: aggregadgets/xbox-fig.PS
%!PS-Adobe-2.0
%%Title: Opal 6
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 2, 1992, 2:26 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 241 351 371 441
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
169 -279 translate
gsave
0 648 130 90 ClipToRectangle
0 0 translate
gsave
40 628 50 50 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
0 0 0 0 false 0 0 [] 1 75 593 55 613 DrawLine
0 0 0 0 false 0 0 [] 1 55 593 75 613 DrawLine
grestore

grestore

0 648 130 90 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 241 351 371 441

%%EndDocument
 GE 8 /Courier AF
10200 28423 MT
(;;; compute vertical position in :box according to a proportion)SH
10200 29288 MT
(\050defun vert-prop \050frac\051)SH
11160 30153 MT
(\050+ \050gvl :parent :parent :box :top\051)SH
12600 31018 MT
(\050round \050* \050gvl :parent :parent :box :height\051)SH
17400 31883 MT
(frac\051\051\051\051)SH
10200 33613 MT
(;;; compute horizontal position in :box according to a proportion)SH
10200 34478 MT
(\050defun horiz-prop \050frac\051)SH
11160 35343 MT
(\050+ \050gvl :parent :parent :box :left\051)SH
12600 36208 MT
(\050round \050* \050gvl :parent :parent :box :width\051)SH
17400 37073 MT
(frac\051\051\051\051)SH
10200 38803 MT
(\050create-instance 'X-BOX opal:aggregadget)SH
11640 39668 MT
(\050:left 20\051)SH
11640 40533 MT
(\050:top 20\051)SH
11640 41398 MT
(\050:width 50\051)SH
11640 42263 MT
(\050:height 50\051)SH
11640 43128 MT
(\050:parts)SH
12120 43993 MT
(`\050\050:box ,opal:rectangle)SH
15960 44858 MT
(\050:left ,\050o-formula \050gvl :parent :left\051\051\051)SH
15960 45723 MT
(\050:top ,\050o-formula)
480 W( \050gvl :parent :top\051\051\051)SH
15960 46588 MT
(\050:width ,\050o-formula)
480 W( \050gvl :parent :width\051\051\051)SH
15960 47453 MT
(\050:height ,\050o-formula \050gvl :parent :height\051\051\051\051)SH
13080 48318 MT
(\050:mark ,opal:aggregadget)SH
16440 49183 MT
(\050:parts)SH
16920 50048 MT
(\050\050:line1 ,opal:line)SH
21240 50913 MT
(\050:x1 ,\050o-formula \050horiz-prop 0.3\051\051\051)SH
21240 51778 MT
(\050:y1 ,\050o-formula \050vert-prop 0.3\051\051\051)SH
21240 52643 MT
(\050:x2 ,\050o-formula \050horiz-prop 0.7\051\051\051)SH
21240 53508 MT
(\050:y2 ,\050o-formula \050vert-prop 0.7\051\051\051\051)SH
17400 54373 MT
(\050:line2 ,opal:line)SH
21240 55238 MT
(\050:x1 ,\050o-formula \050horiz-prop 0.7\051\051\051)SH
21240 56103 MT
(\050:y1 ,\050o-formula \050vert-prop 0.3\051\051\051)SH
21240 56968 MT
(\050:x2 ,\050o-formula \050horiz-prop 0.3\051\051\051)SH
21240 57833 MT
(\050:y2 ,\050o-formula \050vert-prop 0.7\051\051\051\051\051\051\051\051\051\051\051)SH
11 /Times-Bold AF
8280 60450 MT
(Figure 1-9:)SH
/Times-Roman SF
14053 XM
(A box with an X, illustrating nested parts.)SH
ES
%%Page: 304 9
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 304)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
12 /Times-Bold AF
6120 8004 MT
(1.2.9. Creating a Part with a Function)SH
11 /Times-Roman AF
6120 9200 MT
(Instead of defining a prototype as a part, the designer may specify a function which will be called in order)10 W
6120 10396 MT
(to generate the part.  This feature can be useful)
288 W( when you plan to create several instances of an)287 W
6120 11592 MT
(aggregadget that are similar, but with different objects)
59 W( as parts.  For example, the aggregadgets in figure)60 W
6120 12788 MT
(1-10 all have the same prototype.)SH
75 100 0 6570 50225 GB 
%%BeginDocument: aggregadgets/single-part-fn.ps
%!PS-Adobe-2.0
%%Title: Opal 19
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jul 6, 1992, 1:09 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 186 336 426 456
%%%Pages: 1
%%EndComments


/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def
        /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub
          width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
114 -264 translate
gsave
0 648 240 120 ClipToRectangle
0 0 translate
gsave
10 628 60 80 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
40.0 588.0 15.0 15.0 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
90 628 60 80 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
105 603 30 30 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
170 628 60 80 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
190 602 578 21 29 0 false 0 0 0 false 0 0 0 false (W) 24 /Helvetica-Bold DrawText
grestore

grestore

0 648 240 120 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Helvetica-Bold 
%%BoundingBox: 186 336 426 456

%%EndDocument
 GE /Times-Bold SF
6120 26777 MT
(Figure 1-10:)SH
/Times-Roman SF
12443 XM
(Aggregadgets that generate a part through a function.)SH
6120 28728 MT
(The syntax for generating a part with a)
83 W( function is to specify a function within the)82 W
10 /Courier AF
43729 XM
(:parts)SH
11 /Times-Roman AF
47686 XM
(list where a)82 W
6120 29924 MT
(prototype for the part would usually go.  The function must take one argument, which is the aggregadget)45 W
6120 31120 MT
(whose part is being generated.  Slots of the aggregadget may be accessed at any time inside the function.)SH
6120 33418 MT
(The purpose of the function is to return an object that)
155 W( will be a component of the aggregadget.  You)154 W
6120 34614 MT
(should not add the part to the aggregadget yourself in the function.)
139 W( However,)
554 W( you must be careful to)140 W
1406 50 9468 34814 UL
6120 35810 MT
(always return an object that can be used directly as a)
24 W( component.  For example, the)23 W
10 /Courier AF
43334 XM
(opal:circle)SH
11 /Times-Roman AF
50232 XM
(object)SH
6120 37006 MT
(would not be a suitable object to return,)
144 W( since it is the prototype of many other objects.  Instead, you)145 W
6120 38202 MT
(would return an instance of)SH
10 /Courier AF
18429 XM
(opal:circle)SH
11 /Times-Roman AF
(.)SH
3604 50 13359 38402 UL
6120 40500 MT
(Additionally, you must be careful to consider the case where the object)
50 W( to be used has already been used)49 W
6120 41696 MT
(before. That)
513 W( is, if you wanted the function to return a rectangle more than)
119 W( once, the function must be)120 W
6120 42892 MT
(smart enough to return a particular rectangle the first time, and)
1 W( return a different rectangle the second time)SH
6120 44088 MT
(and every time thereafter.  Usually it is sufficient to look at the)10 W
10 /Courier AF
34170 XM
(:parent)SH
11 /Times-Roman AF
38656 XM
(slot of the object to check if it is)11 W
6120 45284 MT
(already part of another aggregadget.)
91 W( The)
456 W( following code, which generates the figure in 1-10, takes this)90 W
6120 46480 MT
(multiple usage of an object into consideration.)SH
ES
%%Page: 305 10
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.2)
SH( Aggregadgets)1800 W
51386 XM
(Page 305)SH
46800 50 8280 4486 UL
8 /Courier AF
10200 7699 MT
(\050defun Get-Label \050agg\051)SH
11160 8564 MT
(\050let* \050\050item \050gv agg :item\051\051)SH
/Times-Italic SF
14520 9429 MT
(;; Item may be an object or a string)SH
/Courier SF
14520 10294 MT
(\050new-label \050if \050schema-p item\051)SH
21720 11159 MT
(\050if \050gv item :parent\051)SH
/Times-Italic SF
23640 12024 MT
(;; The item has been used already --)SH
23640 12889 MT
(;; Use it as a prototype)SH
/Courier SF
23640 13754 MT
(\050create-instance NIL item\051)SH
/Times-Italic SF
23640 14619 MT
(;; Use the item itself)SH
/Courier SF
23640 15484 MT
(item\051)SH
21720 16349 MT
(\050create-instance NIL opal:text)SH
22680 17214 MT
(\050:string item\051)SH
22680 18079 MT
(\050:font \050opal:get-standard-font)SH
26520 18944 MT
(:sans-serif :bold :very-large\051\051\051\051\051\051)SH
12120 19809 MT
(\050s-value new-label :left \050o-formula \050opal:gv-center-x-is-center-of \050gvl :parent\051\051\051\051)SH
12120 20674 MT
(\050s-value new-label :top \050o-formula \050opal:gv-center-y-is-center-of \050gvl :parent\051\051\051\051)SH
12120 21539 MT
(new-label\051\051)SH
10200 23269 MT
(\050create-instance 'AGG-PROTO opal:aggregadget)SH
11160 24134 MT
(\050:item "Text"\051)SH
11160 24999 MT
(\050:top 20\051 \050:width 60\051 \050:height 80\051)SH
11160 25864 MT
(\050:parts)SH
11640 26729 MT
(`\050\050:frame ,opal:rectangle)SH
16440 27594 MT
(\050:left ,\050o-formula \050gvl :parent :left\051\051\051)SH
16440 28459 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
16440 29324 MT
(\050:width ,\050o-formula \050gvl :parent :width\051\051\051)SH
16440 30189 MT
(\050:height ,\050o-formula \050gvl :parent :height\051\051\051\051)SH
12600 31054 MT
(\050:label ,#'Get-Label\051\051\051\051)SH
10200 32784 MT
(\050create-instance 'CIRCLE-LABEL opal:circle)SH
11160 33649 MT
(\050:width 30\051 \050:height 30\051)SH
11160 34514 MT
(\050:line-style NIL\051)SH
11160 35379 MT
(\050:filling-style opal:black-fill\051\051)SH
10200 37109 MT
(\050create-instance 'SQUARE-LABEL opal:rectangle)SH
11160 37974 MT
(\050:width 30\051 \050:height 30\051)SH
11160 38839 MT
(\050:line-style NIL\051)SH
11160 39704 MT
(\050:filling-style opal:black-fill\051\051)SH
10200 41434 MT
(\050create-instance 'AGG1 AGG-PROTO)SH
11160 42299 MT
(\050:left 10\051)SH
11160 43164 MT
(\050:item CIRCLE-LABEL\051\051)SH
10200 44894 MT
(\050create-instance 'AGG2 AGG-PROTO)SH
11160 45759 MT
(\050:left 90\051)SH
11160 46624 MT
(\050:item SQUARE-LABEL\051\051)SH
10200 48354 MT
(\050create-instance 'AGG3 AGG-PROTO)SH
11160 49219 MT
(\050:left 170\051)SH
11160 50084 MT
(\050:item "W"\051\051)SH
11 /Times-Roman AF
8280 52382 MT
(Some of the functionality provided by a part-generating function is overlapped by)
209 W( the customization)210 W
8280 53578 MT
(syntax for aggregadget instances described in section 1.4.2.  For example, the labels in figure)
50 W( 1-10 could)49 W
8280 54774 MT
(have been customized from the prototype by supplying prototypes)
234 W( in the local)235 W
10 /Courier AF
45674 XM
(:parts)SH
11 /Times-Roman AF
49784 XM
(list of each)235 W
8280 55970 MT
(instance. However,)
709 W( for some applications using)
217 W( aggrelists, this feature is indespensable \050see section)216 W
8280 57166 MT
(1.5.2.7\051.)SH
ES
%%Page: 306 11
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 306)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
12 /Times-Bold AF
6120 8004 MT
(1.2.10. Creating All of the Parts with a Function)SH
11 /Times-Roman AF
6120 9200 MT
(As an alternative to supplying a list of component definitions in the)208 W
10 /Courier AF
38558 XM
(:parts)SH
11 /Times-Roman AF
42641 XM
(slot, the designer)
208 W( may)209 W
6120 10396 MT
(instead specify)
64 W( a function which will generate the parts of the aggregadget during its initialization.  This)63 W
6120 11592 MT
(feature is useful when the components of)
229 W( the aggregadget are related in some respect that is easily)230 W
6120 12788 MT
(described by a function procedure, as in figure 1-11.)SH
75 100 0 6570 49850 GB 
%%BeginDocument: aggregadgets/agg-multi-line.ps
%!PS-Adobe-2.0
%%Title: Opal 13
%%Creator: Make-PS-File -- Garnet Version 2.0.alpha
%%CreationDate: Apr 28, 1992, 5:36 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 191 341 421 451
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
119 -269 translate
gsave
0 648 230 110 ClipToRectangle
0 0 translate
gsave
0 0 0 0 false 0 0 [] 1 100 548 10 638 DrawLine
0 0 0 0 false 0 0 [] 1 100 638 10 548 DrawLine
0 0 0 0 false 0 0 [] 1 55 548 55 638 DrawLine
0 0 0 0 false 0 0 [] 1 100 593 10 593 DrawLine
0 0 0 0 false 0 0 [] 1 170 638 120 548 DrawLine
0 0 0 0 false 0 0 [] 1 220 548 170 638 DrawLine
0 0 0 0 false 0 0 [] 1 150 548 220 548 DrawLine
grestore

grestore

0 648 230 110 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 191 341 421 451

%%EndDocument
 GE /Times-Bold SF
6120 26027 MT
(Figure 1-11:)SH
/Times-Roman SF
12443 XM
(The multi-line picture.)SH
6120 27978 MT
(This feature of aggregadgets is not usually used since, in most)
316 W( cases, aggrelists supply the same)315 W
6120 29174 MT
(functionality. When)
719 W( all the components of an aggregadget are instances)
222 W( of the same prototype, the)223 W
6120 30370 MT
(designer should consider implementing an itemized aggrelist, discussed in chapter 1.5.)SH
6120 32668 MT
(The function may be specified)
136 W( in the)135 W
10 /Courier AF
23472 XM
(:parts)SH
11 /Times-Roman AF
27482 XM
(slot as either a previously defined function or a lambda)135 W
6120 33864 MT
(expression. The)
379 W( function must)
52 W( take one parameter:  the aggregadget whose parts are being created.  The)53 W
6120 35060 MT
(function must return a list of the created)
69 W( parts \050e.g., a list of instances of)68 W
10 /Courier AF
39037 XM
(opal:line)SH
11 /Times-Roman AF
(\051 and, optionally, a)68 W
6120 36256 MT
(list of the names of the parts.  If supplied, the names must be keywords)
18 W( which will become slot names for)19 W
6120 37452 MT
(the aggregadget, providing access to the individual)
62 W( components \050see section 1.2.6\051.  \050)61 W
/Times-BoldItalic SF
(Note:)SH
/Times-Roman SF
47148 XM
(The standard)61 W
6120 38648 MT
(lisp function)SH
10 /Courier AF
11926 XM
(values)SH
11 /Times-Roman AF
15801 XM
(may be used to return two arguments from the generating function.\051)SH
6120 40946 MT
(Figure 1-12 shows how to create)
64 W( an aggregadget made of multiple lines, with the end-points of the lines)65 W
6120 42142 MT
(given in the special slot)SH
10 /Courier AF
16783 XM
(:line-end-points)SH
11 /Times-Roman AF
(. The)
275 W( figure creates the object on the left of figure 1-11.)SH
8 /Courier AF
8040 43837 MT
(\050create-instance 'MULTI-LINE opal:aggregadget)SH
9480 44702 MT
(\050:parts)SH
9960 45567 MT
(`\050,#'\050lambda \050self\051)SH
13320 46432 MT
(\050let \050\050lines NIL\051\051)SH
14280 47297 MT
(\050dolist \050line-ends \050gv self :lines-end-points\051\051)SH
15240 48162 MT
(\050setf lines \050cons \050create-instance NIL opal:line)SH
24840 49027 MT
(\050:x1 \050first line-ends\051\051)SH
24840 49892 MT
(\050:y1 \050second line-ends\051\051)SH
24840 50757 MT
(\050:x2 \050third line-ends\051\051)SH
24840 51622 MT
(\050:y2 \050fourth line-ends\051\051\051)SH
23880 52487 MT
(lines\051\051\051)SH
14280 53352 MT
(\050reverse lines\051\051\051\051\051)SH
9480 54217 MT
(\050:lines-end-points '\050\05010 10 100 100\051)SH
19560 55082 MT
(\05010 100 100 10\051)SH
19560 55947 MT
(\05055 10 55 100\051)SH
19560 56812 MT
(\05010 55 100 55\051\051\051\051)SH
11 /Times-Bold AF
6120 59760 MT
(Figure 1-12:)SH
/Times-Roman SF
12443 XM
(An aggregadget with a function to create the parts.)SH
6120 62058 MT
(Figure 1-13)
84 W( shows how to create the same aggregadgets as in figure 1-11, but with a separately defined)83 W
6120 63254 MT
(function rather than a lambda expression.  In addition, this function returns the list of)
105 W( the names of the)106 W
6120 64450 MT
(parts. Two)
445 W( instances of the aggregadget are created, with only one of these instances having names for)85 W
6120 65646 MT
(the lines.)SH
6120 67944 MT
(It should be noted that the use of a function to create parts is)25 W
/Times-Italic SF
33290 XM
(not)SH
/Times-Roman SF
34996 XM
(inherited. If)
325 W( the)25 W
10 /Courier AF
42457 XM
(:parts)SH
11 /Times-Roman AF
46357 XM
(slot is omitted,)26 W
6120 69140 MT
(then the)
210 W( actual parts \050not the function that created the parts\051 are inherited from the prototype.  It is)209 W
6120 70336 MT
(possible to override the)4 W
10 /Courier AF
16706 XM
(:initialize)SH
11 /Times-Roman AF
23585 XM
(method to obtain a different)
4 W( instantiation convention, but probably)5 W
6120 71532 MT
(it is simplest just always to specify the)SH
10 /Courier AF
23354 XM
(:parts)SH
11 /Times-Roman AF
27229 XM
(slot indicating the function that creates parts.)SH
ES
%%Page: 307 12
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.3)
SH( Interactors)
1800 W( in Aggregadgets)SH
51386 XM
(Page 307)SH
46800 50 8280 4486 UL
8 /Courier AF
10200 7699 MT
(\050defun Make-Lines \050lines-agg\051)SH
11160 8564 MT
(\050let \050\050lines NIL\051\051)SH
12120 9429 MT
(\050dolist \050line-ends \050gv lines-agg :lines-end-points\051\051)SH
13080 10294 MT
(\050setf lines \050cons \050create-instance NIL opal:line)SH
23160 11159 MT
(\050:x1 \050first line-ends\051\051)SH
23160 12024 MT
(\050:y1 \050second line-ends\051\051)SH
23160 12889 MT
(\050:x2 \050third line-ends\051\051)SH
23160 13754 MT
(\050:y2 \050fourth line-ends\051\051\051)SH
21720 14619 MT
(lines\051\051\051)SH
12120 15484 MT
(\050values \050reverse lines\051 \050gv lines-agg :lines-names\051\051\051\051)SH
10200 17214 MT
(\050create-instance 'MY-MULTI-LINE1 opal:aggregadget)SH
11640 18079 MT
(\050:parts `\050,#'Make-Lines\051\051)SH
11640 18944 MT
(\050:lines-end-points '\050\05010 10 100 100\051)SH
21720 19809 MT
(\05010 100 100 10\051)SH
21720 20674 MT
(\05055 10 55 100\051)SH
21720 21539 MT
(\05010 55 100 55\051\051\051)SH
11640 22404 MT
(\050:lines-names)SH
12120 23269 MT
('\050:down-diagonal :up-diagonal :vertical :horizontal\051\051\051)SH
10200 24999 MT
(\050create-instance 'MY-MULTI-LINE2 opal:aggregadget)SH
11640 25864 MT
(\050:parts `\050,#'Make-Lines\051\051)SH
11640 26729 MT
(\050:lines-end-points '\050\050120 100 170 10\051)SH
21720 27594 MT
(\050170 10 220 100\051)SH
21720 28459 MT
(\050220 100 150 100\051\051\051\051)SH
11 /Times-Bold AF
8280 31407 MT
(Figure 1-13:)SH
/Times-Roman SF
14603 XM
(An aggregadget with a function to create named parts.)SH
14 /Times-Bold AF
8280 35225 MT
(1.3. Interactors in Aggregadgets)SH
11 /Times-Roman AF
8280 36421 MT
(Interactors may be grouped in aggregadgets in precisely the same way that objects are grouped.  The slot)40 W
10 /Courier AF
8280 37617 MT
(:interactors)SH
11 /Times-Roman AF
15791 XM
(is analogous to)
36 W( the)37 W
10 /Courier AF
24431 XM
(:parts)SH
11 /Times-Roman AF
28343 XM
(slot, and may contain a list of interactor definitions that will)37 W
8280 38813 MT
(be attached to the aggregadget.)SH
8280 41111 MT
(As with the)38 W
10 /Courier AF
13741 XM
(:parts)SH
11 /Times-Roman AF
17653 XM
(slot,)SH
10 /Courier AF
19830 XM
(:interactors)SH
11 /Times-Roman AF
27342 XM
(must contain a backquoted list of lists with commas preceding)37 W
8280 42307 MT
(everything that should be evaluated immediately\320prototypes, function)
214 W( calls, variable references, etc.)215 W
8280 43503 MT
(The name of)
32 W( a function that generates a set of interactors can also be given with the same parameters and)31 W
8280 44699 MT
(functionality as the)SH
10 /Courier AF
16987 XM
(:parts)SH
11 /Times-Roman AF
20862 XM
(function described in section 1.2.10.)SH
8280 46997 MT
(If a keyword is supplied)
99 W( as the name for an interactor, then a slot with that name will be automatically)100 W
8280 48193 MT
(created in the aggregadget, and the value of that slot will be the interactor.)
22 W( For)
318 W( example, in figure 1-14, a)21 W
8280 49389 MT
(slot called)104 W
10 /Courier AF
13254 XM
(:text-inter)SH
11 /Times-Roman AF
20233 XM
(will be created in the aggregadget to)
104 W( refer to the text interactor.  The system)105 W
8280 50585 MT
(will also add to the aggregadget a)47 W
10 /Courier AF
23668 XM
(:behaviors)SH
11 /Times-Roman AF
29990 XM
(slot, containing a list of)
47 W( pointers to the interactors.  This)46 W
8280 51781 MT
(slot is analogous to the)SH
10 /Courier AF
18639 XM
(:components)SH
11 /Times-Roman AF
25514 XM
(slot for graphical objects.)SH
8280 54079 MT
(Each interactor will be given a new)158 W
10 /Courier AF
25237 XM
(:operates-on)SH
11 /Times-Roman AF
32870 XM
(slot which is analogous to the)158 W
10 /Courier AF
47140 XM
(:parent)SH
11 /Times-Roman AF
51774 XM
(slot for)159 W
8280 55275 MT
(component objects.  The)152 W
10 /Courier AF
19977 XM
(:operates-on)SH
11 /Times-Roman AF
27604 XM
(slot contains a pointer to the aggregadget that the interactor)151 W
8280 56471 MT
(belongs to.  This slot should be used when referring to the aggregadget from within interactors.)SH
8280 58769 MT
(In order to activate any interactor in Garnet, its)111 W
10 /Courier AF
30231 XM
(:window)SH
11 /Times-Roman AF
34817 XM
(slot must contain a pointer to)
111 W( the window in)112 W
8280 59965 MT
(which the interactor operates.  In most cases, the window for the interactor)
32 W( will be found in the)31 W
10 /Courier AF
50880 XM
(:window)SH
11 /Times-Roman AF
8280 61161 MT
(slot of the aggregadget, which is internally maintained by aggregates.  Hence, the following slot definition)SH
8280 62357 MT
(should be included in all interactors defined in an aggregadget:)SH
8 /Courier AF
10200 63522 MT
(\050:window ,\050o-formula \050gv-local :self :operates-on :window\051\051\051)SH
11 /Times-BoldItalic AF
8280 64948 MT
(Note:)SH
/Times-Roman SF
11228 XM
(in this formula,)168 W
10 /Courier AF
18760 XM
(gv-local)SH
11 /Times-Roman AF
24003 XM
(is used to follow local links)168 W
10 /Courier AF
37417 XM
(:operates-on)SH
11 /Times-Roman AF
45060 XM
(and)SH
10 /Courier AF
47091 XM
(:window)SH
11 /Times-Roman AF
(. Using)611 W
10 /Courier AF
8280 66144 MT
(gv-local)SH
11 /Times-Roman AF
13444 XM
(instead of)89 W
10 /Courier AF
18204 XM
(gv)SH
11 /Times-Roman AF
19768 XM
(or)SH
10 /Courier AF
21048 XM
(gvl)SH
11 /Times-Roman AF
23212 XM
(when referring to these slots helps avoid accidental references to these)90 W
8280 67340 MT
(slots in the aggregdagets' prototype.  Most values for)
83 W( the)82 W
10 /Courier AF
34433 XM
(:window)SH
11 /Times-Roman AF
38990 XM
(slots of aggregadget interactors will)82 W
8280 68536 MT
(resemble this formula.)SH
8280 70834 MT
(The interactors are independent of the parts, and either feature may be used with or without the)
128 W( other.)129 W
ES
%%Page: 308 13
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 308)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(When using both parts and interactors,)
62 W( any object may refer to any other using the methods described in)61 W
6120 9151 MT
(section 1.2.6.)SH
6120 11449 MT
(Figure 1-14 shows how)
74 W( to create a ``framed-text'' aggregadget that allows the input and display of text.)75 W
6120 12645 MT
(This aggregadget is made of)
178 W( two parts, a frame \050a rectangle\051 and a text object, and one interactor \050a)177 W
6120 13841 MT
(text-interactor\051. Figure)
567 W( 1-15 is a partial printout of the FRAMED-TEXT aggregadget with its)
146 W( built-in)147 W
6120 15037 MT
(interactor, illustrating the slots created by the system.  A picture of the aggregadget is shown)
117 W( in figure)116 W
6120 16233 MT
(1-16.)SH
46800 50 6120 18384 UL
8 /Courier AF
8040 19349 MT
(\050create-instance 'FRAMED-TEXT opal:aggregadget)SH
9480 20214 MT
(\050:left 0\051)SH
/Times-Italic SF
16680 XM
(; Set these slots to determine)SH
/Courier SF
9480 21079 MT
(\050:top 0\051)SH
/Times-Italic SF
16680 XM
(; the position of the aggregadget.)SH
/Courier SF
9480 21944 MT
(\050:parts)SH
9960 22809 MT
(`\050\050:frame ,opal:rectangle)SH
12840 23674 MT
(\050:left ,\050o-formula \050gvl :parent :left\051\051\051)SH
12840 24539 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
12840 25404 MT
(\050:width ,\050o-formula \050+ \050gvl :parent :text :width\051 4\051\051\051)SH
12840 26269 MT
(\050:height ,\050o-formula \050+ \050gvl :parent :text :height\051 4\051\051\051\051)SH
10920 27134 MT
(\050:text ,opal:text)SH
12840 27999 MT
(\050:left ,\050o-formula \050+ \050gvl :parent :left\051 2\051\051\051)SH
12840 28864 MT
(\050:top ,\050o-formula \050+ \050gvl :parent :top\051 2\051\051\051)SH
12840 29729 MT
(\050:cursor-index NIL\051)SH
12840 30594 MT
(\050:string ""\051\051\051\051)SH
9480 31459 MT
(\050:interactors)SH
/Times-Italic SF
10440 32324 MT
(; Press on the text object \050inside the frame\051 to edit the string)SH
/Courier SF
9960 33189 MT
(`\050\050:text-inter ,inter:text-interactor)SH
12840 34054 MT
(\050:window ,\050o-formula \050gv-local :self :operates-on :window\051\051\051)SH
12840 34919 MT
(\050:feedback-obj NIL\051)SH
12840 35784 MT
(\050:start-where ,\050o-formula)SH
20520 36649 MT
(\050list :in \050gvl :operates-on :text\051\051\051\051)SH
12840 37514 MT
(\050:abort-event #\134control-\134g\051)SH
12840 38379 MT
(\050:stop-event \050:leftdown #\134RETURN\051\051\051\051\051\051)SH
11 /Times-Bold AF
6120 40131 MT
(Figure 1-14:)SH
/Times-Roman SF
12443 XM
(Definition of an aggregadget with a built-in interactor.)SH
46800 50 6120 42282 UL
8 /Times-Bold AF
8040 43814 MT
(lisp>)SH
/Courier SF
10176 XM
(\050ps FRAMED-TEXT\051)SH
8040 44679 MT
({#k<FRAMED-TEXT>)SH
9000 45544 MT
(...)SH
9000 46409 MT
(:COMPONENTS =  #k<KR-DEBUG:FRAME-205> #k<KR-DEBUG:TEXT-207>)SH
9000 47274 MT
(:FRAME =  #k<KR-DEBUG:FRAME-205>)SH
9000 48139 MT
(:TEXT =  #k<KR-DEBUG:TEXT-207>)SH
9000 49004 MT
(:BEHAVIORS =  #k<KR-DEBUG:TEXT-INTER-214>)SH
9000 49869 MT
(:TEXT-INTER =  #k<KR-DEBUG:TEXT-INTER-214>)SH
9000 50734 MT
(...)SH
9000 51599 MT
(:IS-A =  #k<OPAL:AGGREGADGET>)SH
8040 52464 MT
(})SH
8040 53329 MT
(NIL)SH
/Times-Bold SF
8040 54194 MT
(lisp>)SH
/Courier SF
10176 XM
(\050ps \050gv FRAMED-TEXT :text-inter\051\051)SH
8040 55924 MT
({#k<KR-DEBUG:TEXT-INTER-214>)SH
9000 56789 MT
(...)SH
9000 57654 MT
(:OPERATES-ON =  #k<FRAMED-TEXT>)SH
9000 58519 MT
(...)SH
9000 59384 MT
(:IS-A =  #k<INTERACTORS:TEXT-INTERACTOR>)SH
8040 60249 MT
(})SH
8040 61114 MT
(NIL)SH
/Times-Bold SF
8040 61979 MT
(lisp>)SH
11 SS 
6120 64596 MT
(Figure 1-15:)SH
/Times-Roman SF
12443 XM
(The printouts of an aggregadget and its attached interactor.)SH
ES
%%Page: 309 14
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.4)
SH( Instances)
1800 W( of Aggregadgets)SH
51386 XM
(Page 309)SH
46800 50 8280 4486 UL
11 SS 
75 100 0 8730 39150 GB 
%%BeginDocument: aggregadgets/framed-text-pix.PS
%!PS-Adobe-2.0
%%Title: Opal 12
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 2, 1992, 2:44 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 221 366 391 426
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
149 -294 translate
gsave
0 648 170 60 ClipToRectangle
0 0 translate
gsave
20 628 123 23 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
22 626 611 119 19 0 false 0 0 0 false 0 0 0 false (Framed Text) 18 /Courier DrawText
grestore

grestore

0 648 170 60 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 221 366 391 426

%%EndDocument
 GE /Times-Bold SF
8280 13452 MT
(Figure 1-16:)SH
/Times-Roman SF
14603 XM
(A picture of the FRAMED-TEXT aggregadget.)SH
14 /Times-Bold AF
8280 17270 MT
(1.4. Instances of Aggregadgets)SH
11 /Times-Roman AF
8280 18466 MT
(The preceding chapter discussed)
63 W( the use of the)64 W
10 /Courier AF
29557 XM
(:parts)SH
11 /Times-Roman AF
33496 XM
(slot to define the structure of new aggregadgets.)64 W
8280 19662 MT
(Once an aggregadget is created, the structure will be inherited by instances.  The)11 W
10 /Courier AF
44168 XM
(:parts)SH
11 /Times-Roman AF
48054 XM
(slot can)
11 W( be used)10 W
8280 20858 MT
(to extend or override this default structure.)SH
12 /Times-Bold AF
8280 24542 MT
(1.4.1. Default Instances of Aggregadgets)SH
11 /Times-Roman AF
8280 25738 MT
(By default, when)
61 W( an instance of an aggregadget is created, an instance of each component and interactor)62 W
8280 26934 MT
(is also created.  Figure 1-17 illustrates)
13 W( an aggregadget on the left and its instance on the right.  Notice that)12 W
8280 28130 MT
(each object within the prototype aggregadget serves as a prototype for each corresponding)
92 W( object in the)93 W
8280 29326 MT
(instance aggregadget.  The structure)
176 W( of the instance aggregate matches the structure of the prototype,)175 W
8280 30522 MT
(including ``external'' references to objects not in either aggregate, as illustrated by the reference from C)66 W
8280 31718 MT
(to D. Since D is external to the aggregate, there is no D', and the reference to D is inherited by C'.)SH
75 100 0 8692 71539 GB 
%%BeginDocument: aggregadgets/instance-fig.ps
%!PS-Adobe-2.0
%%Title: Opal 10
%%Creator: Make-PS-File -- Garnet Version 2.0.alpha
%%CreationDate: Apr 28, 1992, 7:03 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 128 277 485 515
%%%Pages: 1
%%EndComments


/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RoundtanglePath
   {    % stack: left, top, width, height, radius
        /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
        /right l w add def  /bottom t h sub def
          l r add t moveto                         % origin
          right t right t r sub r arcto            % top side
          right bottom right r sub bottom r arcto  % right side
          l bottom l bottom r add r arcto          % bottom side
          l t l r add t r arcto                    % left side
          16 {pop} repeat  % each arcto accumulates 4 stack parameters
   } def

/RoundtangleDict 27 dict def
/DrawRoundtangle
   {    % stack: left, top, width, height, radius, line-halftone,
        %        line-red, line-green, line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        
        RoundtangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub  width thickness sub  height thickness sub
          radius thickness sub RoundtanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height radius thickness-by-2 sub RoundtanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
56 -205 translate
gsave
0 648 357 238 ClipToRectangle
0 0 translate
gsave
11 612 155 111 22 0 0 0 0 true 0 0 [] 1 -1 0 0 0 false DrawRoundtangle
43.5 532.0 22.5 20.0 0 360 0 0 0 0 true 0 0 [] 1 -1 0 0 0 false DrawEllipse
37 544 524 13 25 0 false 0 0 0 true 0 0 0 false (B) 24 /Courier-Bold DrawText
133.5 532.0 22.5 20.0 0 360 0 0 0 0 true 0 0 [] 1 -1 0 0 0 false DrawEllipse
127 544 524 13 25 0 false 0 0 0 true 0 0 0 false (C) 24 /Courier-Bold DrawText
88.5 582.0 22.5 20.0 0 360 0 0 0 0 true 0 0 [] 1 -1 0 0 0 false DrawEllipse
82 594 574 14 25 0 false 0 0 0 true 0 0 0 false (A) 24 /Courier-Bold DrawText
0 0 0 0 true 0 0 [] 4 75 568 56 548 DrawLine
0 0 0 0 true 0 0 [] 4 102 569 120 548 DrawLine
193 531 155 111 22 0 0 0 0 true 0 0 [] 1 -1 0 0 0 false DrawRoundtangle
225.5 451.0 22.5 20.0 0 360 0 0 0 0 true 0 0 [] 1 -1 0 0 0 false DrawEllipse
217 463 443 23 25 0 false 0 0 0 true 0 0 0 false (B') 24 /Courier-Bold DrawText
315.5 451.0 22.5 20.0 0 360 0 0 0 0 true 0 0 [] 1 -1 0 0 0 false DrawEllipse
306 463 443 23 25 0 false 0 0 0 true 0 0 0 false (C') 24 /Courier-Bold DrawText
270.5 501.0 22.5 20.0 0 360 0 0 0 0 true 0 0 [] 1 -1 0 0 0 false DrawEllipse
262 513 493 24 25 0 false 0 0 0 true 0 0 0 false (A') 24 /Courier-Bold DrawText
0 0 0 0 true 0 0 [] 4 257 487 238 467 DrawLine
0 0 0 0 true 0 0 [] 4 284 488 302 467 DrawLine
0 0 0 0 false 0 0 [10 10] 2 73 516 206 460 DrawLine
71 511 64 520 75 521 71 511 8 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawPolyline
0 0 0 0 false 0 0 [10 10] 2 159 516 295 458 DrawLine
157 511 150 520 161 521 157 511 8 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawPolyline
0 0 0 0 false 0 0 [10 10] 2 119 571 255 513 DrawLine
117 566 110 575 121 576 117 566 8 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawPolyline
0 0 0 0 false 0 0 [3 3] 2 194 596 146 548 DrawLine
190 600 201 603 198 592 190 600 8 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawPolyline
219.5 618.0 22.0 19.5 0 360 0 0 0 0 true 0 0 [] 1 -1 0 0 0 false DrawEllipse
213 630 610 14 25 0 false 0 0 0 true 0 0 0 false (D) 24 /Courier-Bold DrawText
grestore

grestore

0 648 357 238 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier-Bold 
%%BoundingBox: 128 277 485 515

%%EndDocument
 GE /Times-Bold SF
8280 52516 MT
(Figure 1-17:)SH
/Times-Roman SF
14603 XM
(A prototype aggregate and one instance.  The dashed lines go from instances to their)236 W
14603 53712 MT
(prototypes, solid lines join children to parents, and the dotted line from)
32 W( C to D represents a)33 W
14603 54908 MT
(formula dependence which is inherited by C'.)SH
8280 57206 MT
(When creating instances, it is)
64 W( possible to override slots and parts of the prototype aggregadget, provided)63 W
8280 58402 MT
(that these slots were not declared constant in the prototype.)SH
12 /Times-Bold AF
8280 62086 MT
(1.4.2. Overriding Slots and Structure)SH
11 /Times-Roman AF
8280 63282 MT
(Just as instances of KR objects)
116 W( can override slots with local values, aggregadgets can override slots or)117 W
8280 64478 MT
(even entire parts \050objects\051 with local values.  The)26 W
10 /Courier AF
30444 XM
(:parts)SH
11 /Times-Roman AF
34345 XM
(and)SH
10 /Courier AF
36234 XM
(:interactors)SH
11 /Times-Roman AF
43735 XM
(syntax is used to)
26 W( override)25 W
8280 65674 MT
(details of an aggregadget when constructing an instance.)SH
8280 67972 MT
(When creating an instance of)
45 W( an aggregadget that already has components, there are several variations of)46 W
8280 69168 MT
(the)SH
10 /Courier AF
9951 XM
(:parts)SH
11 /Times-Roman AF
13878 XM
(syntax that can be used to inherit components.  As illustrated in these examples, if)51 W
/Times-Italic SF
51028 XM
(any)SH
/Times-Roman SF
52942 XM
(parts)SH
8280 70364 MT
(are listed in a)SH
10 /Courier AF
14450 XM
(:parts)SH
11 /Times-Roman AF
18325 XM
(list, then)SH
/Times-Italic SF
22390 XM
(all)SH
/Times-Roman SF
23827 XM
(parts should be listed.  This is explained further in section 1.4.5:)SH
10480 71817 MT
(1.)SH
11580 XM
(If the entire)181 W
10 /Courier AF
17528 XM
(:parts)SH
11 /Times-Roman AF
21584 XM
(slot is omitted, then the components are instantiated)
181 W( in the default)182 W
ES
%%Page: 310 15
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 310)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
11 SS 
9420 7955 MT
(manner described above.  For example,)SH
8 /Courier AF
11340 9120 MT
(\050create-instance 'NEW-X-BOX X-BOX \050:left 100\051\051)SH
11 /Times-Roman AF
9420 10541 MT
(will instantiate the)SH
10 /Courier AF
17823 XM
(:box)SH
11 /Times-Roman AF
20498 XM
(and)SH
10 /Courier AF
22361 XM
(:mark)SH
11 /Times-Roman AF
25636 XM
(parts of)SH
10 /Courier AF
29240 XM
(x-box)SH
11 /Times-Roman AF
32515 XM
(by default.)SH
8320 12435 MT
(2.)SH
9420 XM
(Any element in the list of)
128 W( parts may be a keyword rather than a list.  The keyword must)127 W
9420 13631 MT
(name a component of the prototype, and an instance of that component is created.  Parts are)27 W
9420 14827 MT
(always added in the order they are)
146 W( listed, regardless of their order in the prototype.  For)145 W
9420 16023 MT
(example:)SH
8 /Courier AF
11340 17188 MT
(\050:parts `\050:shadow :box :feedback\051\051)SH
11 /Times-Roman AF
8320 19082 MT
(3.)SH
9420 XM
(Any element in the list of parts may be a list of the)
14 W( form)15 W
10 /Courier AF
34608 XM
(\050)SH
/Times-Italic SF
(name)SH
/Courier SF
37989 XM
(:omit\051)SH
11 /Times-Roman AF
(, where)15 W
/Times-Italic SF
45130 XM
(name)SH
/Times-Roman SF
47802 XM
(is the)15 W
9420 20278 MT
(name of)
75 W( a component in the prototype, and)74 W
10 /Courier AF
29166 XM
(:omit)SH
11 /Times-Roman AF
32515 XM
(indicates that an instance of that part is)74 W
9420 21474 MT
(not included in the instance aggregadget.  For example:)SH
8 /Courier AF
11340 22639 MT
(\050:parts `\050\050:shadow :omit\051)SH
16140 23504 MT
(:box)SH
16140 24369 MT
(:feedback\051\051)SH
11 /Times-Roman AF
8320 26263 MT
(4.)SH
9420 XM
(Any element in the list of parts may be a list of the form)113 W
10 /Courier AF
35992 XM
(\050)SH
/Times-Italic SF
(name)SH
/Courier SF
39472 XM
(:modify)SH
/Times-Italic SF
44386 XM
(slots)SH
/Courier SF
(\051)SH
11 /Times-Roman AF
(, where)114 W
/Times-Italic SF
9420 27459 MT
(name)SH
/Times-Roman SF
12124 XM
(is the part name,)47 W
10 /Courier AF
19857 XM
(:modify)SH
11 /Times-Roman AF
24379 XM
(means to use the default prototype, and)47 W
/Times-Italic SF
42241 XM
(slots)SH
/Times-Roman SF
44580 XM
(is a standard)46 W
9420 28655 MT
(list of slot)
117 W( names and values which override slots inherited from the prototype.  Only the)118 W
9420 29851 MT
(changed slots need to be listed; the others are inherited from the prototype.  [Note:  this)
79 W( is)78 W
9420 31047 MT
(different from the)43 W
10 /Courier AF
17642 XM
(:parts)SH
11 /Times-Roman AF
21560 XM
(slot, where you must list all the)
43 W( parts if you are changing any of)44 W
9420 32243 MT
(them.] If)
331 W( the object is an aggregadget, then one of the slots)
28 W( may be a)27 W
10 /Courier AF
40470 XM
(:parts)SH
11 /Times-Roman AF
44372 XM
(list to further)27 W
9420 33439 MT
(specify components.  For example:)SH
8 /Courier AF
11340 34604 MT
(\050:parts `\050\050:shadow :modify \050:offset 5\051\051)SH
16140 35469 MT
(:box)SH
16140 36334 MT
(:feedback\051\051)SH
11 /Times-Roman AF
8320 38228 MT
(5.)SH
9420 XM
(Any element of the list of parts may be a list of)
235 W( the form)236 W
10 /Courier AF
37763 XM
(\050)SH
/Times-Italic SF
(name prototype slots)586 W
/Courier SF
(\051)SH
11 /Times-Roman AF
(, as)236 W
9420 39424 MT
(described in section 1.2.1.  This indicates that)
200 W( the part should be added to the instance)199 W
9420 40620 MT
(aggregadget. If)459 W
/Times-Italic SF
16902 XM
(name)SH
/Times-Roman SF
19651 XM
(names an existing component in the aggregadget, then the new part)92 W
9420 41816 MT
(will override the part that would otherwise be inherited.)SH
12 /Times-Bold AF
6120 45500 MT
(1.4.3. Simulated Multiple Inheritance)SH
11 /Times-Roman AF
6120 46696 MT
(In some cases, it is desirable to inherit particular slots from a default prototype object, but to override the)34 W
6120 47892 MT
(actual prototype.  For example, one might want)
91 W( to change rectangles in a prototype into circles but still)92 W
6120 49088 MT
(inherit the)36 W
10 /Courier AF
10958 XM
(:top)SH
11 /Times-Roman AF
13669 XM
(and)SH
10 /Courier AF
15568 XM
(:left)SH
11 /Times-Roman AF
18879 XM
(slots. Alternatively,)
347 W( one might want to replace)
36 W( a number box with a dial but)35 W
6120 50284 MT
(still inherit a)SH
10 /Courier AF
11957 XM
(:color)SH
11 /Times-Roman AF
15832 XM
(slot from the prototype number box.)SH
6120 52582 MT
(The)SH
10 /Courier AF
8347 XM
(:parts)SH
11 /Times-Roman AF
12464 XM
(syntax has)
242 W( a special variation to accomplish this form of multiple inheritance.  If the)243 W
6120 53778 MT
(keyword)SH
10 /Courier AF
10268 XM
(:inherit)SH
11 /Times-Roman AF
15368 XM
(occurs at the top level)
25 W( in the)24 W
/Times-Italic SF
28217 XM
(slots)SH
/Times-Roman SF
30534 XM
(list, then the next element of)24 W
/Times-Italic SF
43479 XM
(slots)SH
/Times-Roman SF
45796 XM
(must be a list of)24 W
6120 54974 MT
(slot names.  All the slots not mentioned in the)6 W
10 /Courier AF
26624 XM
(:inherit)SH
11 /Times-Roman AF
31706 XM
(clause are inherited from the new prototype \050the)7 W
6120 56170 MT
(circle in the example below\051.  For example:)SH
8 /Courier AF
8040 57335 MT
(\050:parts `\050\050:shadow ,opal:circle)SH
13800 58200 MT
(\050:offset 5\051)SH
13800 59065 MT
(:inherit \050:left :top :width :height :filling-style\051\051)SH
12840 59930 MT
(:box)SH
12840 60795 MT
(:feedback\051\051)SH
12 /Times-Bold AF
6120 64479 MT
(1.4.4. Instance Examples)SH
11 /Times-Roman AF
6120 65675 MT
(Figure 1-18 illustrates how to override and inherit parts from an aggregadget.)
25 W( The)
324 W( prototype aggregadget)24 W
6120 66871 MT
(is the)16 W
10 /Courier AF
8780 XM
(x-box)SH
11 /Times-Roman AF
12071 XM
(aggregadget shown in figure 1-9.  In the instance named CIRCLE-X-BOX, a)
16 W( circle has been)17 W
6120 68067 MT
(inserted between the box and the ``X'' mark, and the box has a gray fill.)SH
6120 70365 MT
(In figure 1-19, the CIRCLE-X-BOX aggregadget is further modified by replacing the ``X'' with a circle.)SH
ES
%%Page: 311 16
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.4)
SH( Instances)
1800 W( of Aggregadgets)SH
51386 XM
(Page 311)SH
46800 50 8280 4486 UL
11 SS 
75 100 0 8730 40275 GB 
%%BeginDocument: aggregadgets/circle-xbox-fig.PS
%!PS-Adobe-2.0
%%Title: Opal 1
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 2, 1992, 4:21 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 241 351 371 441
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
169 -279 translate
gsave
0 648 130 90 ClipToRectangle
0 0 translate
gsave
40 628 50 50 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
65.0 603.0 23.0 23.0 0 360 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawEllipse
0 0 0 0 false 0 0 [] 1 75 593 55 613 DrawLine
0 0 0 0 false 0 0 [] 1 55 593 75 613 DrawLine
grestore

grestore

0 648 130 90 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 241 351 371 441

%%EndDocument
 GE 8 /Courier AF
10200 15812 MT
(\050create-instance 'CIRCLE-X-BOX X-BOX)SH
11640 16677 MT
(\050:left 150\051)SH
11640 17542 MT
(\050:top 160\051)SH
11640 18407 MT
(\050:parts)SH
12120 19272 MT
(`\050\050:box :modify \050:filling-style ,opal:gray-fill\051\051)SH
13080 20137 MT
(\050:circle ,opal:circle)SH
17400 21002 MT
(\050:left ,\050o-formula \050+ \050gvl :parent :left\051 2\051\051\051)SH
17400 21867 MT
(\050:top ,\050o-formula \050+ \050gvl :parent :top\051 2\051\051\051)SH
17400 22732 MT
(\050:width ,\050o-formula \050- \050gvl :parent :width\051 4\051\051\051)SH
17400 23597 MT
(\050:height ,\050o-formula \050- \050gvl :parent :height\051 4\051\051\051)SH
17400 24462 MT
(\050:filling-style ,opal:white-fill\051\051)SH
13080 25327 MT
(:mark\051\051\051\051)SH
11 /Times-Bold AF
8280 27079 MT
(Figure 1-18:)SH
/Times-Roman SF
14603 XM
(Adding a circle and changing the filling style in an instance of the X-BOX aggregadget.)SH
75 100 0 8730 61350 GB 
%%BeginDocument: aggregadgets/circle-box-fig.PS
%!PS-Adobe-2.0
%%Title: Opal 17
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 2, 1992, 3:01 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 241 351 371 441
%%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
169 -279 translate
gsave
0 648 130 90 ClipToRectangle
0 0 translate
gsave
40 628 50 50 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
65.0 603.0 23.0 23.0 0 360 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawEllipse
65.0 603.0 15.0 15.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
grestore

grestore

0 648 130 90 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 241 351 371 441

%%EndDocument
 GE 8 /Courier AF
10200 36887 MT
(\050defun circle-box-test \050\051)SH
11160 37752 MT
(\050create-instance 'CIRCLE-BOX CIRCLE-X-BOX)SH
11640 38617 MT
(\050:left 150\051)SH
11640 39482 MT
(\050:top 220\051)SH
11640 40347 MT
(\050:parts)SH
12120 41212 MT
(`\050:box)SH
13080 42077 MT
(:circle)SH
13080 42942 MT
(\050:mark :omit\051)SH
13080 43807 MT
(\050:inner-circle ,opal:circle)SH
16440 44672 MT
(\050:left ,\050o-formula \050+ \050gvl :parent :left\051 10\051\051\051)SH
16440 45537 MT
(\050:top ,\050o-formula \050+ \050gvl :parent :top\051 10\051\051\051)SH
16440 46402 MT
(\050:width ,\050o-formula \050- \050gvl :parent :width\051 20\051\051\051)SH
16440 47267 MT
(\050:height ,\050o-formula \050- \050gvl :parent :height\051 20\051\051\051\051\051\051\051\051)SH
11 /Times-Bold AF
8280 49019 MT
(Figure 1-19:)SH
/Times-Roman SF
14603 XM
(Omitting the ``X'' and adding an inner circle to the CIRCLE-X-BOX aggregadget.)SH
12 /Times-Bold AF
8280 52703 MT
(1.4.5. More Syntax: Extending an Aggregadget)SH
11 /Times-Roman AF
8280 53899 MT
(Normally, each part of a prototype should be explicitly mentioned in the)117 W
10 /Courier AF
41791 XM
(:parts)SH
11 /Times-Roman AF
45783 XM
(list. This)
509 W( is perhaps)116 W
8280 55095 MT
(tedious, but it makes the code clear.  There is one exception that is provided to make)
125 W( it simple to add)126 W
8280 56291 MT
(things to existing prototypes.)SH
8280 58589 MT
(If)SH
/Times-Italic SF
9347 XM
(none)SH
/Times-Roman SF
11820 XM
(of the parts of a prototype are mentioned in the parts list,)
60 W( then instances of)59 W
/Times-Italic SF
45646 XM
(all)SH
/Times-Roman SF
47142 XM
(of the prototype's)59 W
8280 59785 MT
(parts are included in the instance aggregadget.  If additional parts are specified, they are added after)
78 W( the)79 W
8280 60981 MT
(default parts, so they)
165 W( will appear graphically on top.)164 W
/Times-Italic SF
33383 XM
(It is an error to mention some but not all of a)164 W
8280 62177 MT
(prototype's parts in a)64 W
10 /Courier AF
18314 XM
(:parts)SH
11 /Times-Italic AF
22253 XM
(list.)SH
/Times-Roman SF
24552 XM
(\050The current implementation only looks to see if the)64 W
/Times-Italic SF
48316 XM
(first)SH
/Times-Roman SF
50430 XM
(part of the)65 W
8280 63373 MT
(prototype is mentioned in the)21 W
10 /Courier AF
21554 XM
(:parts)SH
11 /Times-Roman AF
25450 XM
(list in order to decide whether or not to include all of the prototype)21 W
8280 64569 MT
(parts.\051)SH
8280 66867 MT
(Figure 1-20 illustrates the extension of the)103 W
10 /Courier AF
27912 XM
(:mark)SH
11 /Times-Roman AF
31290 XM
(part of the)104 W
10 /Courier AF
36397 XM
(x-box)SH
11 /Times-Roman AF
39776 XM
(prototype with a rectangle.  Since)104 W
8280 68063 MT
(parts)SH
10 /Courier AF
10693 XM
(:line1)SH
11 /Times-Roman AF
14568 XM
(and)SH
10 /Courier AF
16431 XM
(:line2)SH
11 /Times-Roman AF
20306 XM
(are not mentioned, they are included in the)SH
10 /Courier AF
39397 XM
(:mark)SH
11 /Times-Roman AF
42672 XM
(part automatically.)SH
ES
%%Page: 312 17
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 312)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
11 SS 
75 100 0 6570 40275 GB 
%%BeginDocument: aggregadgets/x-sq-box-fig.PS
%!PS-Adobe-2.0
%%Title: Opal 18
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 2, 1992, 3:04 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 241 351 371 441
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
169 -279 translate
gsave
0 648 130 90 ClipToRectangle
0 0 translate
gsave
40 628 50 50 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
0 0 0 0 false 0 0 [] 1 75 593 55 613 DrawLine
0 0 0 0 false 0 0 [] 1 55 593 75 613 DrawLine
50 618 30 30 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

0 648 130 90 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 241 351 371 441

%%EndDocument
 GE 8 /Courier AF
8040 15812 MT
(\050defun x-sq-box-test \050\051)SH
9000 16677 MT
(\050create-instance 'X-SQ-BOX X-BOX)SH
9960 17542 MT
(\050:left 210\051)SH
9960 18407 MT
(\050:top 20\051)SH
9960 19272 MT
(\050:parts)SH
10440 20137 MT
(`\050:box ;)
5760 W( inherit the box with no change)SH
11400 21002 MT
(\050:mark :modify)
SH( ;)
960 W( modify the mark)SH
11880 21867 MT
(\050:parts ;)
3840 W( since :line1 and :line2 are not mentioned,)SH
19560 22732 MT
(; they are inherited as is)SH
12360 23597 MT
(\050\050:square ,opal:rectangle)
SH( ;)
2400 W( add a new part to the mark)SH
14760 24462 MT
(\050:left ,\050o-formula \050horiz-prop 0.2\051\051\051)SH
14760 25327 MT
(\050:width ,\050o-formula \050- \050horiz-prop 0.8\051)SH
25800 26192 MT
(\050horiz-prop 0.2\051\051\051\051)SH
14760 27057 MT
(\050:top ,\050o-formula \050vert-prop 0.2\051\051\051)SH
14760 27922 MT
(\050:height ,\050o-formula \050- \050vert-prop 0.8\051)SH
26280 28787 MT
(\050vert-prop 0.2\051\051\051\051\051\051\051\051\051\051\051\051)SH
11 /Times-Bold AF
6120 30539 MT
(Figure 1-20:)SH
/Times-Roman SF
12443 XM
(Extending the x-box prototype with a new rectangle in the mark part.)SH
14 /Times-Bold AF
6120 34357 MT
(1.5. Aggrelists)SH
11 /Times-Roman AF
6120 35553 MT
(Many interfaces require the)
37 W( arrangement of a set of objects in a graphical list, such as menus and parallel)36 W
6120 36749 MT
(lines. Aggrelists)
477 W( are designed to facilitate the arrangement of objects in graphical lists while providing)102 W
6120 37945 MT
(many customizable slots that)
118 W( determine the appearance of the list.  The methods)117 W
10 /Courier AF
43140 XM
(add-component)SH
11 /Times-Roman AF
51332 XM
(and)SH
10 /Courier AF
6120 39141 MT
(remove-component)SH
11 /Times-Roman AF
16314 XM
(can be used to alter the components in the)
319 W( list after the aggrelist has been)320 W
6120 40337 MT
(instantiated. \050See)
275 W( section 1.7.4.\051)SH
6120 42635 MT
(A special style of aggrelists, called ``itemized aggrelists'', may be used when the items of the list)
58 W( are all)57 W
6120 43831 MT
(instances of the same prototype)
186 W( \050e.g., all items in a menu are text strings\051.  These aggrelists use the)187 W
6120 45027 MT
(methods)SH
10 /Courier AF
10123 XM
(add-item)SH
11 /Times-Roman AF
15198 XM
(and)SH
10 /Courier AF
17061 XM
(remove-item)SH
11 /Times-Roman AF
23936 XM
(to manipulate the components of the list.)SH
6120 47325 MT
(Aggrelists are independent of aggregadgets and may be)
411 W( used separately or inside aggregadgets.)410 W
6120 48521 MT
(Aggrelists may also have aggregadgets as components in order to create objects such)
46 W( as menus or choice)47 W
6120 49717 MT
(lists.)SH
6120 52015 MT
(Interactors may be defined for aggrelists using the same methods that implement interactors)
402 W( in)401 W
6120 53211 MT
(aggregadgets \050section 1.3\051.)SH
ES
%%Page: 313 18
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.5)
SH( Aggrelists)1800 W
51386 XM
(Page 313)SH
46800 50 8280 4486 UL
12 /Times-Bold AF
8280 8004 MT
(1.5.1. How to Use Aggrelists)SH
11 /Times-Roman AF
8280 10648 MT
(The definition of the)SH
10 /Courier AF
17628 XM
(aggrelist)SH
11 /Times-Roman AF
23303 XM
(prototype in Opal is:)SH
8 /Courier AF
10200 13250 MT
(\050create-instance 'opal:aggrelist opal:aggregate)SH
10680 14115 MT
(\050:maybe-constant '\050:left :top :width :height :direction :h-spacing :v-spacing)SH
19800 14980 MT
(:indent :h-align :v-align :max-width :max-height)SH
19800 15845 MT
(:fixed-width-p :fixed-height-p :fixed-width-size)SH
19800 16710 MT
(:fixed-height-size :rank-margin :pixel-margin :items :visible\051\051)SH
10680 17575 MT
(\050:left 0\051)SH
10680 18440 MT
(\050:top 0\051)SH
10680 19305 MT
(\050:width \050o-formula ...\051\051)SH
10680 20170 MT
(\050:height \050o-formula ...\051\051)SH
10680 21035 MT
(\050:direction :vertical\051)SH
/Times-Italic SF
24600 XM
(; Can be :horizontal, :vertical, or NIL)SH
/Courier SF
10680 21900 MT
(\050:h-spacing 5\051)SH
/Times-Italic SF
24600 XM
(; Pixels between horizontal elements)SH
/Courier SF
10680 22765 MT
(\050:v-spacing 5\051)SH
/Times-Italic SF
24600 XM
(; Pixels between vertical elements)SH
/Courier SF
10680 23630 MT
(\050:indent 0\051)SH
/Times-Italic SF
24600 XM
(; How much to indent on wraparound)SH
/Courier SF
10680 24495 MT
(\050:h-align :left\051)SH
/Times-Italic SF
24600 XM
(; Can be :left, :center, or :right)SH
/Courier SF
10680 25360 MT
(\050:v-align :top\051)SH
/Times-Italic SF
24600 XM
(; Can be :top, :center, or :bottom)SH
/Courier SF
10680 26225 MT
(\050:max-width \050o-formula)
480 W( \050...\051\051\051)SH
10680 27090 MT
(\050:max-height \050o-formula \050...\051\051\051)SH
10680 27955 MT
(\050:fixed-width-p NIL\051)SH
/Times-Italic SF
24600 XM
(; Whether to use fixed-width-size)SH
/Courier SF
10680 28820 MT
(\050:fixed-height-p NIL\051)SH
/Times-Italic SF
24600 XM
(; Whether to use fixed-height-size)SH
/Courier SF
10680 29685 MT
(\050:fixed-width-size NIL\051)SH
/Times-Italic SF
24600 XM
(; The width of all components)SH
/Courier SF
10680 30550 MT
(\050:fixed-height-size NIL\051)SH
/Times-Italic SF
24600 XM
(; The height of all components)SH
/Courier SF
10680 31415 MT
(\050:rank-margin NIL\051)SH
/Times-Italic SF
24600 XM
(; If non-NIL, the number of components in each row/column)SH
/Courier SF
10680 32280 MT
(\050:pixel-margin NIL\051)SH
/Times-Italic SF
24600 XM
(; Same as :rank-margin, but with pixels)SH
/Courier SF
10680 33145 MT
(\050:head NIL\051)SH
/Times-Italic SF
24600 XM
(; The first component \050read-only slot\051)SH
/Courier SF
10680 34010 MT
(\050:tail NIL\051)SH
/Times-Italic SF
24600 XM
(; The last component \050read-only slot\051)SH
/Courier SF
10680 34875 MT
(\050:items NIL\051)SH
/Times-Italic SF
24600 XM
(; List of the items or a number)SH
/Courier SF
10680 35740 MT
(\050:item-prototype NIL\051)SH
/Times-Italic SF
24600 XM
(; Specification of prototype of the items \050when itemized\051)SH
/Courier SF
10680 36605 MT
(\050:item-prototype-object NIL\051)SH
/Times-Italic SF
24600 XM
(; The actual object, set internally \050read-only slot\051)SH
/Courier SF
10680 37470 MT
(...\051)SH
11 /Times-Roman AF
8280 38891 MT
(Aggrelists are)
35 W( easily customized by providing values for the controlling slots.  Any slot listed below may)36 W
8280 40087 MT
(be given a value during the definition of an aggrelist.  The slots can also)
161 W( be modified \050using the KR)160 W
8280 41283 MT
(function)SH
10 /Courier AF
12363 XM
(s-value)SH
11 /Times-Roman AF
(\051 after the aggrelist is displayed to change the appearance of the)
142 W( objects.  However,)143 W
8280 42479 MT
(each slot has a default value and the designer may choose to ignore most of the slots.)SH
8280 44777 MT
(The list in)99 W
10 /Courier AF
13314 XM
(:maybe-constant)SH
11 /Times-Roman AF
22688 XM
(contains those)
99 W( slots that will be declared constant in an aggrelist whose)98 W
10 /Courier AF
8280 45973 MT
(:constant)SH
11 /Times-Roman AF
13974 XM
(slot contains T. That is, when you create an)
19 W( aggrelist with the slot)20 W
10 /Courier AF
43401 XM
(\050:constant T\051)20 W
11 /Times-Roman AF
(, then all)20 W
8280 47169 MT
(of these slots are guaranteed not to change, and all)
77 W( formulas that depend on those slots will be removed)76 W
8280 48365 MT
(and replaced by absolute values.  This removal of formulas has the potential to save a)
107 W( large amount of)108 W
8280 49561 MT
(storage space.)SH
8280 51859 MT
(The following slots are available for customization of aggrelists:)SH
10 /Courier AF
10480 53935 MT
(:left)SH
11 /Times-Roman AF
13755 XM
(\261 The leftmost coordinate of the aggrelist \050default is 0\051.)SH
10 /Courier AF
10480 55630 MT
(:top)SH
11 /Times-Roman AF
13155 XM
(\261 The topmost coordinate of the aggrelist \050default is 0\051.)SH
10 /Courier AF
10480 57325 MT
(:items)SH
11 /Times-Roman AF
14412 XM
(\261 A number \050indicating the number of)
57 W( items in the aggrelist\051 or a list of values that will be)56 W
13780 58521 MT
(used by the components.  If the value is)
116 W( a list, then do not destructively modify the value;)117 W
13780 59717 MT
(instead, set the value with a new list \050using)SH
10 /Courier AF
32966 XM
(list)SH
11 /Times-Roman AF
(\051 or use)SH
10 /Courier AF
38939 XM
(copy-list)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
10480 61412 MT
(:item-prototype)SH
11 /Times-Roman AF
19755 XM
(\261 Either a schema or a description of a schema \050see section 1.5.2.1\051.)SH
10 /Courier AF
10480 63107 MT
(:direction)SH
11 /Times-Roman AF
16848 XM
(\261 Either :)93 W
10 /Courier AF
(horizontal)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
27771 XM
(:vertical)SH
11 /Times-Roman AF
33539 XM
(or NIL.  If)
93 W( the value is either)92 W
10 /Courier AF
47197 XM
(:horizontal)SH
11 /Times-Roman AF
54164 XM
(or)SH
10 /Courier AF
13780 64303 MT
(:vertical)SH
11 /Times-Roman AF
(, the system will install)
61 W( values in the)62 W
10 /Courier AF
35959 XM
(:left)SH
11 /Times-Roman AF
39296 XM
(and)SH
10 /Courier AF
41221 XM
(:top)SH
11 /Times-Roman AF
43958 XM
(slots of each component,)62 W
13780 65499 MT
(in order to lay out)
86 W( the list properly according to the direction.  If the value is NIL, then the)85 W
13780 66695 MT
(designer must provide formulas for)
50 W( the)51 W
10 /Courier AF
31494 XM
(:left)SH
11 /Times-Roman AF
34820 XM
(and)SH
10 /Courier AF
36734 XM
(:top)SH
11 /Times-Roman AF
39460 XM
(slots of each component \050default is)51 W
10 /Courier AF
13780 67891 MT
(:vertical)SH
11 /Times-Roman AF
(\051.)SH
10 /Courier AF
10480 69586 MT
(:v-spacing)SH
11 /Times-Roman AF
16755 XM
(\261 Vertical spacing between elements \050default is 5\051.)SH
10 /Courier AF
10480 71281 MT
(:h-spacing)SH
11 /Times-Roman AF
16755 XM
(\261 Horizontal spacing between elements \050default is 5\051.)SH
ES
%%Page: 314 19
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 314)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
/Courier SF
8320 8080 MT
(:fixed-width-p)SH
11 /Times-Roman AF
17011 XM
(\261 If set to)
16 W( T, all the components will be placed in fields of constant width.  These)15 W
11620 9276 MT
(fields will be of the size of the widest component, unless the slot)98 W
10 /Courier AF
41612 XM
(:fixed-width-size)SH
11 /Times-Roman AF
52186 XM
(is)SH
11620 10472 MT
(non-NIL, in which case it will default to the value stored there \050default is NIL\051.)SH
10 /Courier AF
8320 12167 MT
(:fixed-width-size)SH
11 /Times-Roman AF
18795 XM
(\261 The width of all components, if)SH
10 /Courier AF
33765 XM
(:fixed-width-p)SH
11 /Times-Roman AF
42440 XM
(is T \050default is NIL\051.)SH
10 /Courier AF
8320 13862 MT
(:fixed-height-p)SH
11 /Times-Roman AF
17758 XM
(\261 If set to T, all the components will be placed in fields of)
163 W( constant height.)162 W
11620 15058 MT
(These fields will be of the)
784 W( size of the tallest component, unless the slot)785 W
10 /Courier AF
11620 16254 MT
(:fixed-height-size)SH
11 /Times-Roman AF
22833 XM
(is non-NIL, in which case)
138 W( it will default to the value stored there)137 W
11620 17450 MT
(\050default is NIL\051.)SH
10 /Courier AF
8320 19145 MT
(:fixed-height-size)SH
11 /Times-Roman AF
19395 XM
(\261 The height of all components, if)SH
10 /Courier AF
34609 XM
(:fixed-width-p)SH
11 /Times-Roman AF
43284 XM
(is T \050default is NIL\051.)SH
10 /Courier AF
8320 20840 MT
(:h-align)SH
11 /Times-Roman AF
13885 XM
(\261 The type of horizontal alignment)
490 W( to use within a field \050only applicable if)491 W
10 /Courier AF
11620 22036 MT
(fixed-width-p)SH
11 /Times-Roman AF
20012 XM
(is T\051.  Allowed values are)316 W
10 /Courier AF
33545 XM
(:left)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
37411 XM
(:center)SH
11 /Times-Roman AF
(, or)316 W
10 /Courier AF
43984 XM
(:right)SH
11 /Times-Roman AF
48175 XM
(\050default is)316 W
10 /Courier AF
11620 23232 MT
(:left)SH
11 /Times-Roman AF
(\051.)SH
10 /Courier AF
8320 24927 MT
(:v-align)SH
11 /Times-Roman AF
13964 XM
(\261 The type of vertical alignment to use within a field \050only)
569 W( applicable is)570 W
10 /Courier AF
11620 26123 MT
(fixed-height-p)SH
11 /Times-Roman AF
20562 XM
(is T\051.  Allowed values are)266 W
10 /Courier AF
33795 XM
(:top)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
37011 XM
(:center)SH
11 /Times-Roman AF
(, or)266 W
10 /Courier AF
43484 XM
(:bottom)SH
11 /Times-Roman AF
48225 XM
(\050default is)266 W
10 /Courier AF
11620 27319 MT
(:top)SH
11 /Times-Roman AF
(\051.)SH
10 /Courier AF
8320 29014 MT
(:rank-margin)SH
11 /Times-Roman AF
16017 XM
(\261 If)
222 W( non-NIL, then after this many components, a new row will be started for)223 W
11620 30210 MT
(horizontal lists, or a new column for vertical lists \050default is NIL\051.)SH
10 /Courier AF
8320 31905 MT
(:pixel-margin)SH
11 /Times-Roman AF
16547 XM
(\261 If non-NIL, then this acts as an absolute position in pixels in)
152 W( the window; if)151 W
11620 33101 MT
(adding the next component would result in extending beyond)
89 W( this value, then a new row or)90 W
11620 34297 MT
(column is started \050default is NIL\051.)SH
10 /Courier AF
8320 35992 MT
(:indent)SH
11 /Times-Roman AF
12795 XM
(\261 The amount to indent upon starting a new row/column \050in pixels\051 \050default is 0\051.)SH
12 /Times-Bold AF
6120 39676 MT
(1.5.2. Itemized Aggrelists)SH
11 /Times-Roman AF
6120 40872 MT
(When all the components of an)
13 W( aggrelist are instances of the same prototype, the aggrelist is referred to as)12 W
6120 42068 MT
(an itemized aggrelist.)
150 W( This)
576 W( type of aggrelist provides for the automatic generation of the components)151 W
6120 43264 MT
(from a specified item prototype.)
190 W( This)
654 W( feature is convenient when creating objects such as menus or)189 W
6120 44460 MT
(button panels, whose components are all)
28 W( similar.  \050In a non-itemized aggrelist, the components may be of)29 W
6120 45656 MT
(several types, though they still take advantage of the layout mechanisms of aggrelists, as in section 1.5.3.\051)SH
6120 47954 MT
(To cause an aggrelist to generate its components from a)
224 W( prototype, the)223 W
10 /Courier AF
39992 XM
(:item-prototype)SH
11 /Times-Roman AF
49490 XM
(and the)223 W
10 /Courier AF
6120 49150 MT
(:items)SH
11 /Times-Roman AF
9995 XM
(slot may be set.)SH
12 /Times-Bold AF
6120 52114 MT
(1.5.2.1. The :item-prototype Slot)SH
11 /Times-Roman AF
6120 53310 MT
(The)SH
10 /Courier AF
8145 XM
(:item-prototype)SH
11 /Times-Roman AF
17460 XM
(slot contains a description of the prototype object that will be used to create the)41 W
6120 54506 MT
(items. This)
589 W( slot is)
157 W( analogous to the)156 W
10 /Courier AF
23171 XM
(:parts)SH
11 /Times-Roman AF
27202 XM
(slot for aggregadgets.  Garnet builds an object from the)156 W
10 /Courier AF
6120 55702 MT
(:item-prototype)SH
11 /Times-Roman AF
15595 XM
(description and stores this object in)
200 W( the)201 W
10 /Courier AF
34442 XM
(:item-prototype-object)SH
11 /Times-Roman AF
48118 XM
(slot of the)201 W
6120 56898 MT
(aggrelist.)SH
/Times-Bold SF
10733 XM
(Do not specify or set the)SH
10 /Courier AF
22279 XM
(:item-prototype-object)SH
11 /Times-Bold AF
35754 XM
(slot)SH
/Times-Roman SF
(.)SH
6120 59196 MT
(The prototype may be any Garnet object, including aggregadgets, and may be given)
54 W( either as an existing)53 W
6120 60392 MT
(schema name or as a quoted list holding an object definition, as in)SH
8 /Courier AF
8040 61557 MT
(\050:item-prototype `\050,opal:rectangle \050:width 100\051)SH
24840 62422 MT
(\050:height 50\051\051\051)SH
11 /Times-Roman AF
6120 63843 MT
(The keyword)SH
10 /Courier AF
12228 XM
(:modify)SH
11 /Times-Roman AF
16703 XM
(may be used to indicate changes to an inherited item prototype, as in)SH
8 /Courier AF
8040 65008 MT
(\050:item-prototype `\050:modify \050:width 100\051)SH
21000 65873 MT
(\050:height 50\051\051\051)SH
11 /Times-Roman AF
6120 67294 MT
(The prototype for the)35 W
10 /Courier AF
15912 XM
(:item-prototype-object)SH
11 /Times-Roman AF
29422 XM
(in this case will be the)36 W
10 /Courier AF
39720 XM
(:item-prototype-object)SH
11 /Times-Roman AF
6120 68490 MT
(of the prototype of the aggrelist being specified.  This form would be used to modify the default in)
45 W( some)44 W
6120 69686 MT
(way \050see section 1.6\051.)SH
6120 71984 MT
(If no local)508 W
10 /Courier AF
12439 XM
(:item-prototype)SH
11 /Times-Roman AF
22222 XM
(slot is specified, the default is to create an instance)
508 W( of the)509 W
ES
%%Page: 315 20
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.5)
SH( Aggrelists)1800 W
51386 XM
(Page 315)SH
46800 50 8280 4486 UL
/Courier SF
8280 7955 MT
(:item-prototype-object)SH
11 /Times-Roman AF
21963 XM
(of the)
208 W( prototype aggrelist.  If there is no)207 W
10 /Courier AF
41605 XM
(:item-prototype-object)SH
11 /Times-Roman AF
(,)SH
8280 9151 MT
(then this is not an itemized aggrelist \050see section 1.5.3\051.)SH
12 /Times-Bold AF
8280 12115 MT
(1.5.2.2. The :items Slot)SH
11 /Times-Roman AF
8280 13311 MT
(The)SH
10 /Courier AF
10476 XM
(:items)SH
11 /Times-Roman AF
14562 XM
(slot holds either a number or a list.  If it is a number)211 W
/Times-Italic SF
40643 XM
(n)SH
/Times-Roman SF
(, then)211 W
/Times-Italic SF
44334 XM
(n)SH
/Times-Roman SF
45370 XM
(identical instances of)212 W
10 /Courier AF
8280 14507 MT
(:item-prototype-object)SH
11 /Times-Roman AF
21874 XM
(will be created and added to the aggrelist.  If it is)
119 W( a list of)118 W
/Times-Italic SF
49009 XM
(n)SH
/Times-Roman SF
49952 XM
(elements,)SH
/Times-Italic SF
54530 XM
(n)SH
/Times-Roman SF
8280 15703 MT
(instances of)SH
10 /Courier AF
13778 XM
(:item-prototype-object)SH
11 /Times-Roman AF
27253 XM
(will be created and added to the aggrelist.)SH
8280 18001 MT
(When)SH
10 /Courier AF
11288 XM
(:items)SH
11 /Times-Roman AF
15271 XM
(is a list of elements, the designer must define a formula in the)108 W
10 /Courier AF
44047 XM
(:item-prototype)SH
11 /Times-Roman AF
53430 XM
(that)SH
8280 19197 MT
(extracts the desired element from the list for each component.  In a menu,)
67 W( for example, the)66 W
10 /Courier AF
49549 XM
(:items)SH
11 /Times-Roman AF
53490 XM
(slot)SH
8280 20393 MT
(will usually be a list)
85 W( of strings.  Components should index their individual strings from the)86 W
10 /Courier AF
49773 XM
(:items)SH
11 /Times-Roman AF
53734 XM
(list)SH
8280 21589 MT
(according to their)11 W
10 /Courier AF
16346 XM
(:rank)SH
11 /Times-Roman AF
(. The)
296 W( following slot definition, to be included in the)10 W
10 /Courier AF
42770 XM
(:item-prototype)SH
11 /Times-Roman AF
(, would)10 W
8280 22785 MT
(yield this functionality:)SH
10 /Courier AF
10200 24075 MT
(\050:string \050o-formula \050nth \050gvl :rank\051 \050gvl :parent :items\051\051\051\051)SH
11 /Times-Roman AF
8280 25496 MT
(This formula assigns the)SH
/Times-Italic SF
19340 XM
(n)SH
/Times-Roman SF
(th string in the)SH
10 /Courier AF
26552 XM
(:items)SH
11 /Times-Roman AF
30427 XM
(list to the)SH
/Times-Italic SF
34798 XM
(n)SH
/Times-Roman SF
(th component of the aggrelist.)SH
8280 27794 MT
(The)SH
10 /Courier AF
10282 XM
(:items)SH
11 /Times-Roman AF
14175 XM
(slot may also hold a nested list so that the components can extract more than one value from)18 W
8280 28990 MT
(it. For)
557 W( example, if the components of a menu are characterized both by a label and a function)
141 W( \050to be)140 W
8280 30186 MT
(called when the item is selected\051, the)53 W
10 /Courier AF
25145 XM
(:item)SH
11 /Times-Roman AF
28473 XM
(slot of the menu will be a list of pairs)
53 W( '\050\050)54 W
/Times-Italic SF
(label function)54 W
/Times-Roman SF
(\051 ...\051,)54 W
8280 31382 MT
(and the components will access their strings and associated functions with formulas such as:)SH
8 /Courier AF
10200 32547 MT
(\050:string \050o-formula \050first \050nth \050gvl :rank\051 \050gvl :parent :items\051\051\051\051\051)SH
10200 33412 MT
(\050:function \050o-formula \050second \050nth \050gvl :rank\051)SH
27000 34277 MT
(\050gvl :parent :items\051\051\051\051\051)SH
11 /Times-Roman AF
8280 36575 MT
(The list in the)30 W
10 /Courier AF
14755 XM
(:items)SH
11 /Times-Roman AF
18659 XM
(list may not be destructively modified.  If you need to modify the current value of)29 W
8280 37771 MT
(the slot, you should create)
2 W( a new list \050e.g., with)3 W
10 /Courier AF
29324 XM
(list)SH
11 /Times-Roman AF
(\051 or use)3 W
10 /Courier AF
35306 XM
(copy-list)SH
11 /Times-Roman AF
40984 XM
(on the current value and modify)3 W
8280 38967 MT
(the resulting copied list.)SH
12 /Times-Bold AF
8280 41931 MT
(1.5.2.3. Aggrelist Components)SH
11 /Times-Roman AF
8280 43127 MT
(When the value of)180 W
10 /Courier AF
17368 XM
(:items)SH
11 /Times-Roman AF
21423 XM
(changes, the number of components corresponding to the change)
180 W( will be)179 W
8280 44323 MT
(adjusted automatically during the next call to)55 W
10 /Courier AF
28798 XM
(opal:update)SH
11 /Times-Roman AF
(. In)
387 W( most cases, users will never have to do)56 W
8280 45519 MT
(anything special to cause the components to become consistent with the)SH
10 /Courier AF
40143 XM
(:items)SH
11 /Times-Roman AF
44018 XM
(list.)SH
8280 47817 MT
(In some cases, an application might need to refer to the new)
138 W( components \050or the new positions of the)137 W
8280 49013 MT
(components\051)SH
/Times-Italic SF
14308 XM
(before)SH
/Times-Roman SF
17464 XM
(calling)SH
10 /Courier AF
20804 XM
(opal:update)SH
11 /Times-Roman AF
(. It)
417 W( is possible)
71 W( to explicitly adjust the number of components)72 W
8280 50209 MT
(in the aggrelist after setting the)SH
10 /Courier AF
22210 XM
(:items)SH
11 /Times-Roman AF
26085 XM
(list by calling:)SH
10 /Courier AF
8280 52507 MT
(opal:Notice-Items-Changed)SH
11 /Times-Italic AF
23555 XM
(aggrelist)SH
/Times-Roman SF
50988 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
8280 54805 MT
(where)SH
/Times-Italic SF
11299 XM
(aggrelist)SH
/Times-Roman SF
15544 XM
(is the)
58 W( aggrelist whose)57 W
10 /Courier AF
25549 XM
(:items)SH
11 /Times-Roman AF
29481 XM
(slot has changed.  This function will additionally execute)57 W
8280 56001 MT
(the layout function on the components, so that they will have up-to-date)SH
10 /Courier AF
40205 XM
(:left)SH
11 /Times-Roman AF
43480 XM
(and)SH
10 /Courier AF
45343 XM
(:top)SH
11 /Times-Roman AF
48018 XM
(values.)SH
12 /Times-Bold AF
8280 58965 MT
(1.5.2.4. Constants and Aggrelists)SH
11 SS 
8280 61609 MT
(Constant :items and :components)SH
/Times-Roman SF
8280 63907 MT
(All aggrelists created with a constant)188 W
10 /Courier AF
25964 XM
(:items)SH
11 /Times-Roman AF
30027 XM
(slot have a constant)188 W
10 /Courier AF
39699 XM
(:components)SH
11 /Times-Roman AF
46763 XM
(slot automatically.)189 W
8280 65103 MT
(That is, after)
103 W( the aggrelist has been created with all of its components according to its)102 W
10 /Courier AF
47761 XM
(:items)SH
11 /Times-Roman AF
51738 XM
(list, the)102 W
10 /Courier AF
8280 66299 MT
(:components)SH
11 /Times-Roman AF
15310 XM
(slot becomes constant by default, and the items and components become)
155 W( unmodifiable)156 W
8280 67495 MT
(\050with the two exceptions below\051.  In addition, the)35 W
10 /Courier AF
30560 XM
(:head)SH
11 /Times-Roman AF
33870 XM
(and)SH
10 /Courier AF
35768 XM
(:tail)SH
11 /Times-Roman AF
39078 XM
(slots of)
35 W( the aggrelist, which point to)34 W
8280 68691 MT
(the first and last component, also become constant.  By declaring)
93 W( these slots constant, Garnet is able to)94 W
8280 69887 MT
(automatically get rid of the greatest number of formulas possible.)SH
ES
%%Page: 316 21
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 316)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(If you really want to add another item to a constant aggrelist, you)
153 W( could wrap a call to)152 W
10 /Courier AF
46837 XM
(add-item)SH
11 /Times-Roman AF
52064 XM
(in)SH
10 /Courier AF
6120 9151 MT
(with-constants-disabled)SH
11 /Times-Roman AF
(, which disables the protective)
43 W( constant mechanism, and is described fully)44 W
6120 10347 MT
(in the KR Manual.  However, just as with aggregadgets \050discussed in)
90 W( section 1.2.4\051, this is discouraged)89 W
6120 11543 MT
(due to the likelihood that the dimension formulas of the aggrelist will have already been evaluated and)107 W
6120 12739 MT
(thrown away before the new item is added, resulting in an incorrect bounding box for the aggrelist.)SH
6120 15037 MT
(A better solution is to create a non-constant aggrelist to begin with.  If you)
97 W( plan to change the)96 W
10 /Courier AF
49320 XM
(:items)SH
11 /Times-Roman AF
6120 16233 MT
(slot, then do not include it in the)155 W
10 /Courier AF
21875 XM
(:constant)SH
11 /Times-Roman AF
27705 XM
(list. If)
585 W( you are using T in the constant list, be sure to)156 W
10 /Courier AF
6120 17429 MT
(:except)SH
11 /Times-Roman AF
10595 XM
(the)SH
10 /Courier AF
12214 XM
(:items)SH
11 /Times-Roman AF
16089 XM
(slot.)SH
/Times-Bold SF
6120 22160 MT
(Constant :left and :top in Components)SH
/Times-Roman SF
6120 24458 MT
(The)SH
10 /Courier AF
8131 XM
(:left)SH
11 /Times-Roman AF
11432 XM
(and)SH
10 /Courier AF
13321 XM
(:top)SH
11 /Times-Roman AF
16021 XM
(slots of each component are set during the layout of the aggrelist.  If all of the slots)25 W
6120 25654 MT
(controlling the layout are constant in the aggrelist, then)
23 W( the)24 W
10 /Courier AF
32533 XM
(:left)SH
11 /Times-Roman AF
35832 XM
(and)SH
10 /Courier AF
37719 XM
(:top)SH
11 /Times-Roman AF
40418 XM
(slots of the components will)24 W
6120 26850 MT
(be declared constant after they are set.  The slots controlling the layout are:)SH
10 /Courier AF
8520 28911 MT
(:left)SH
20814 XM
(:v-spacing)SH
33108 XM
(:h-align)SH
45402 XM
(:fixed-height-size)SH
8520 30013 MT
(:top)SH
20814 XM
(:h-spacing)SH
33108 XM
(:fixed-width-p)SH
45402 XM
(:rank-margin)SH
8520 31115 MT
(:items)SH
20814 XM
(:indent)SH
33108 XM
(:fixed-height-p)SH
45402 XM
(:pixel-margin)SH
8520 32217 MT
(:direction)SH
20814 XM
(:v-align)SH
33108 XM
(:fixed-width-size)SH
11 /Times-Roman AF
6120 34816 MT
(Even if you do not supply customized values for these slots, you will still need to declare them)
66 W( constant)65 W
6120 36012 MT
(for the desired effect.  They are)
124 W( all included in the aggrelist's)125 W
10 /Courier AF
34765 XM
(:maybe-constant)SH
11 /Times-Roman AF
44165 XM
(list, so it is easy to)125 W
6120 37208 MT
(declare them all constant with a)SH
10 /Courier AF
20354 XM
(:constant)SH
11 /Times-Roman AF
26029 XM
(value of T.)SH
6120 39506 MT
(Since the aggrelist layout function sets the)60 W
10 /Courier AF
25451 XM
(:left)SH
11 /Times-Roman AF
28785 XM
(and)SH
10 /Courier AF
30707 XM
(:top)SH
11 /Times-Roman AF
33441 XM
(slots of each component, it is important not)59 W
1406 50 51514 39706 UL
6120 40702 MT
(to declare these slots constant yourself, unless you do so after the aggrelist has already been laid out.)SH
12 /Times-Bold AF
6120 43666 MT
(1.5.2.5. A Simple Aggrelist Example)SH
11 /Times-Roman AF
6120 44862 MT
(The following code is a short example of an itemized aggrelist composed)
68 W( of text strings, and the picture)69 W
6120 46058 MT
(of this aggrelist is in figure 1-21.  Note that)
88 W( the)87 W
10 /Courier AF
28044 XM
(:left)SH
11 /Times-Roman AF
31406 XM
(and)SH
10 /Courier AF
33356 XM
(:top)SH
11 /Times-Roman AF
36118 XM
(slots of the)87 W
10 /Courier AF
41482 XM
(:item-prototype)SH
11 /Times-Roman AF
50844 XM
(have)SH
6120 47254 MT
(been left undefined.  The aggrelist will fill these slots with the appropriate values automatically.)SH
8 /Courier AF
8040 48419 MT
(\050create-instance 'MY-AGG opal:aggrelist)SH
9480 49284 MT
(\050:left 10\051 \050:top 10\051)SH
9480 50149 MT
(\050:direction :horizontal\051)SH
9480 51014 MT
(\050:items '\050"This" "is" "an" "example"\051\051)SH
9480 51879 MT
(\050:item-prototype)SH
9960 52744 MT
(`\050,opal:text)SH
10920 53609 MT
(\050:string ,\050formula '\050nth \050gvl :rank\051 \050gvl :parent :items\051\051\051\051\051\051\051)SH
11 SS 
75 100 0 6607 86005 GB 
%%BeginDocument: aggregadgets/agg-list-item.PS
%!PS-Adobe-2.0
%%Title: Opal 6
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 2, 1992, 3:21 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 188 376 423 416
%%%Pages: 1
%%EndComments


/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
116 -304 translate
gsave
0 648 235 40 ClipToRectangle
0 0 translate
gsave
10 638 623 55 19 0 false 0 0 0 false 0 0 0 false (This ) 18 /Courier DrawText
70 638 623 33 19 0 false 0 0 0 false 0 0 0 false (is ) 18 /Courier DrawText
108 638 623 33 19 0 false 0 0 0 false 0 0 0 false (an ) 18 /Courier DrawText
146 638 623 74 19 0 false 0 0 0 false 0 0 0 false (example) 18 /Courier DrawText
grestore

grestore

0 648 235 40 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 188 376 423 416

%%EndDocument
 GE /Times-Bold SF
6120 59557 MT
(Figure 1-21:)SH
/Times-Roman SF
12443 XM
(The picture of an itemized aggrelist.)SH
12 /Times-Bold AF
6120 62521 MT
(1.5.2.6. An Aggrelist with an Interactor)SH
11 /Times-Roman AF
6120 63717 MT
(As another example of an itemized)
206 W( aggrelist, consider the schema FRAMED-TEXT-LIST defined in)207 W
6120 64913 MT
(figure 1-22.  A picture of the FRAMED-TEXT-LIST aggrelist appears in figure 1-23.)SH
6120 67211 MT
(This aggrelist explicitly defines)
84 W( an aggregadget as the)83 W
10 /Courier AF
30735 XM
(:item-prototype)SH
11 /Times-Roman AF
(. This)
441 W( aggregadget is similar)83 W
6120 68407 MT
(to the FRAMED-TEXT schema defined in figure 1-14, but there is an)
18 W( additional)19 W
10 /Courier AF
42036 XM
(:final-function)SH
11 /Times-Roman AF
51330 XM
(slot)SH
6120 69603 MT
(\050see figure 1-22\051.  The purpose of the)208 W
10 /Courier AF
24489 XM
(:final-function)SH
11 /Times-Roman AF
33972 XM
(is to keep)
208 W( the strings in the)207 W
10 /Courier AF
47492 XM
(:items)SH
11 /Times-Roman AF
51574 XM
(list)SH
6120 70799 MT
(consistent with the strings in the components.)SH
ES
%%Page: 317 22
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.5)
SH( Aggrelists)1800 W
51386 XM
(Page 317)SH
46800 50 8280 4486 UL
8 /Courier AF
10200 7699 MT
(\050create-instance 'FRAMED-TEXT-LIST opal:aggrelist)SH
11640 8564 MT
(\050:left 0\051 \050:top 0\051)SH
11640 9429 MT
(\050:items '\050"An aggrelist" "using an" "aggregate")SH
16440 10294 MT
("as an" "item-prototype"\051\051)SH
11640 11159 MT
(\050:item-prototype)SH
12120 12024 MT
(`\050,opal:aggregadget)SH
13080 12889 MT
(\050:parts)SH
13560 13754 MT
(\050\050:frame ,opal:rectangle)SH
15480 14619 MT
(\050:left ,\050o-formula \050gvl :parent :left\051\051\051)SH
15480 15484 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
15480 16349 MT
(\050:width ,\050o-formula \050+ \050gvl :parent :text :width\051 4\051\051\051)SH
15480 17214 MT
(\050:height ,\050o-formula \050+ \050gvl :parent :text :height\051 4\051\051\051\051)SH
14040 18079 MT
(\050:text ,opal:text)SH
15480 18944 MT
(\050:left ,\050o-formula \050+ \050gvl :parent :left\051 2\051\051\051)SH
15480 19809 MT
(\050:top ,\050o-formula \050+ \050gvl :parent :top\051 2\051\051\051)SH
15480 20674 MT
(\050:cursor-index NIL\051)SH
15480 21539 MT
(\050:string ,\050o-formula)SH
20760 22404 MT
(\050nth \050gvl :parent :rank\051)SH
20760 23269 MT
(\050gvl :parent :parent :items\051\051\051\051\051\051\051)SH
13080 24134 MT
(\050:interactors)SH
13560 24999 MT
(\050\050:text-inter ,inter:text-interactor)SH
15480 25864 MT
(\050:window ,\050o-formula)SH
20760 26729 MT
(\050gv-local :self :operates-on :window\051\051\051)SH
15480 27594 MT
(\050:feedback-obj NIL\051)SH
15480 28459 MT
(\050:start-where ,\050o-formula)SH
16440 29324 MT
(\050list :in \050gvl :operates-on :text\051\051\051\051)SH
15480 30189 MT
(\050:abort-event #\134control-\134g\051)SH
15480 31054 MT
(\050:stop-event \050:leftdown #\134RETURN\051\051)SH
15480 31919 MT
(\050:final-function)SH
15960 32784 MT
(,#'\050lambda \050inter text event string x y\051)SH
18360 33649 MT
(\050let \050\050elem \050gv inter :operates-on\051\051\051)SH
19320 34514 MT
(\050change-item \050gv elem :parent\051)SH
25560 35379 MT
(string)SH
25560 36244 MT
(\050gv elem :rank\051\051\051\051\051 \051\051\051\051\051\051)SH
11 /Times-Bold AF
8280 37996 MT
(Figure 1-22:)SH
/Times-Roman SF
14603 XM
(An aggrelist using an aggregadget as the)SH
10 /Courier AF
32716 XM
(:item-prototype)SH
11 /Times-Roman AF
(.)SH
75 100 0 8730 75192 GB 
%%BeginDocument: aggregadgets/framed-text-list-pix.PS
%!PS-Adobe-2.0
%%Title: Opal 9
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 2, 1992, 3:28 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 212 311 400 480
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
140 -240 translate
gsave
0 648 188 169 ClipToRectangle
0 0 translate
gsave
20 628 135 23 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
22 626 611 131 19 0 false 0 0 0 false 0 0 0 false (An aggrelist) 18 /Courier DrawText
20 600 90 23 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
22 598 583 86 19 0 false 0 0 0 false 0 0 0 false (using an) 18 /Courier DrawText
20 572 100 23 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
22 570 555 96 19 0 false 0 0 0 false 0 0 0 false (aggregate) 18 /Courier DrawText
20 544 57 23 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
22 542 527 53 19 0 false 0 0 0 false 0 0 0 false (as an) 18 /Courier DrawText
20 516 154 23 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
22 514 499 150 19 0 false 0 0 0 false 0 0 0 false (item-prototype) 18 /Courier DrawText
grestore

grestore

0 648 188 169 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 212 311 400 480

%%EndDocument
 GE /Times-Bold SF
8280 53619 MT
(Figure 1-23:)SH
/Times-Roman SF
14603 XM
(A picture of the FRAMED-TEXT-LIST aggrelist.)SH
8280 55917 MT
(Interaction works as follows:  Each item is an aggregadget with its own)5 W
10 /Courier AF
40084 XM
(text-interactor)SH
11 /Times-Roman AF
49364 XM
(behavior and)5 W
10 /Courier AF
8280 57113 MT
(text)SH
11 /Times-Roman AF
11171 XM
(component. The)
707 W( cursor text)216 W
10 /Courier AF
24897 XM
(:string)SH
11 /Times-Roman AF
29588 XM
(slot is constrained to the)
216 W( corresponding element in the)215 W
8280 58309 MT
(FRAMED-TEXT-LIST's)SH
10 /Courier AF
19858 XM
(:items)SH
11 /Times-Roman AF
23794 XM
(slot, but this is a one-way constraint.  The)
61 W( text interactor modifies the)62 W
10 /Courier AF
8280 59505 MT
(:string)SH
11 /Times-Roman AF
12963 XM
(slot of the cursor text using)208 W
10 /Courier AF
26493 XM
(s-value)SH
11 /Times-Roman AF
(, which leaves the formula in)
208 W( place, but temporarily)207 W
8280 60701 MT
(changes the slot value.  At)
29 W( this point, the)30 W
10 /Courier AF
26724 XM
(:items)SH
11 /Times-Roman AF
30629 XM
(slot and the cursor text)30 W
10 /Courier AF
41074 XM
(:string)SH
11 /Times-Roman AF
45579 XM
(slots are inconsistent,)30 W
8280 61897 MT
(and any change to)148 W
10 /Courier AF
17118 XM
(:items)SH
11 /Times-Roman AF
21141 XM
(would cause all)148 W
10 /Courier AF
28702 XM
(:string)SH
11 /Times-Roman AF
33325 XM
(slot formulas to re-evaluate, possibly losing the)148 W
8280 63093 MT
(string data set by the interactor.  To avoid this problem, the)140 W
10 /Courier AF
36294 XM
(:final-function)SH
11 /Times-Roman AF
45709 XM
(of the)
140 W( text interactor)141 W
8280 64289 MT
(directly sets)
163 W( the)162 W
10 /Courier AF
15946 XM
(:items)SH
11 /Times-Roman AF
19983 XM
(slot using)162 W
10 /Courier AF
24831 XM
(change-item)SH
11 /Times-Roman AF
31868 XM
(to be consistent with the formula.  This initiates a)162 W
8280 65485 MT
(re-evaluation, but because all values are consistent,)
22 W( no data is lost.  Furthermore, if the FRAMED-TEXT-)23 W
8280 66681 MT
(LIST is saved \050see section 1.8.1\051, the)44 W
10 /Courier AF
25144 XM
(:items)SH
11 /Times-Roman AF
29063 XM
(list will have the current)
44 W( set of strings, and what is written)43 W
8280 67877 MT
(will match what is displayed.)SH
ES
%%Page: 318 23
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 318)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(Since the aggregadget defined here is similar to the FRAMED-TEXT schema)
57 W( defined in figure 1-14, the)58 W
10 /Courier AF
6120 9151 MT
(:item-prototype)SH
11 /Times-Roman AF
15395 XM
(slot definition could be replaced with)SH
8 /Courier AF
8040 10316 MT
(\050:item-prototype)SH
8520 11181 MT
(`\050,FRAMED-TEXT)SH
9480 12046 MT
(\050:parts)SH
9960 12911 MT
(\050:frame)SH
10440 13776 MT
(\050:text :modify)SH
11880 14641 MT
(\050:string ,\050o-formula \050nth \050gvl :parent :rank\051)SH
24360 15506 MT
(\050gvl :parent :parent :items\051\051\051\051\051\051\051)SH
9480 16371 MT
(\050:interactors)SH
9960 17236 MT
(\050\050:text-inter :modify)SH
16680 18101 MT
(\050:final-function)SH
17160 18966 MT
(,#'\050lambda \050inter text event string x y\051)SH
19560 19831 MT
(\050let \050\050elem \050gv inter :operates-on\051\051\051)SH
20520 20696 MT
(\050change-item \050gv elem :parent\051)SH
26760 21561 MT
(string)SH
26760 22426 MT
(\050gv elem :rank\051\051\051\051\051\051\051\051\051\051)SH
11 /Times-Roman AF
6120 23847 MT
(provided that the definition for)
343 W( the FRAMED-TEXT schema preceded the FRAMED-TEXT-LIST)342 W
6120 25043 MT
(definition.)SH
6120 27341 MT
(See section 1.9.3 for an example of a menu made with an itemized aggrelist.)SH
12 /Times-Bold AF
6120 30305 MT
(1.5.2.7. An Aggrelist with a Part-Generating Function)SH
11 /Times-Roman AF
6120 31501 MT
(Section 1.2.9 discussed a feature of aggregadgets that allows you to create parts of an aggregadget by)138 W
6120 32697 MT
(specifying part-generating functions.  This)
213 W( feature of aggregadgets can be especially useful when an)212 W
6120 33893 MT
(aggregadget is)
57 W( the)58 W
10 /Courier AF
14570 XM
(:item-prototype)SH
11 /Times-Roman AF
23903 XM
(of an aggrelist.  While the same principles hold for aggregadgets)58 W
6120 35089 MT
(whether they are solitary or used in aggrelists, there is a special consideration regarding)
474 W( the)473 W
10 /Courier AF
6120 36285 MT
(:item-prototype-object)SH
11 /Times-Roman AF
19595 XM
(that warrants further discussion.)SH
6120 38583 MT
(A typical application of aggrelists that would involve a part-generating function might specify a list)
120 W( of)121 W
6120 39779 MT
(objects in its)55 W
10 /Courier AF
12121 XM
(:items)SH
11 /Times-Roman AF
16050 XM
(list and generate components that have those objects as parts.  Such an application)54 W
6120 40975 MT
(is pictured in figure 1-24.  The)203 W
10 /Courier AF
21287 XM
(:item-prototype)SH
11 /Times-Roman AF
30765 XM
(for this aggrelist is)
203 W( an aggregadget with a part-)204 W
6120 42171 MT
(generating function that determines its label.)
308 W( The)
890 W( definition of the aggrelist, along with its part-)307 W
6120 43367 MT
(generating function appears below.)SH
75 100 0 6570 78763 GB 
%%BeginDocument: aggregadgets/esp-cards-pix.ps
%!PS-Adobe-2.0
%%Title: Opal 32
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jul 6, 1992, 3:22 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 136 336 476 456
%%%Pages: 1
%%EndComments


/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def
        /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub
          width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
64 -264 translate
gsave
0 648 340 120 ClipToRectangle
0 0 translate
gsave
10 628 60 80 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
40.0 588.0 15.0 15.0 0 360 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawEllipse
75 628 60 80 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
90 603 30 30 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
140 628 60 80 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
160 602 578 21 29 0 false 0 0 0 false 0 0 0 false (W) 24 /Helvetica-Bold DrawText
205 628 60 80 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
230 603 10 30 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
220 593 30 10 0 0 0 0 false 0 0 [] -1 0 0 0 0 false DrawRectangle
270 628 60 80 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
300 603 291 573 315 593 285 593 309 573 300 603 12 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawPolyline
grestore

grestore

0 648 340 120 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Helvetica-Bold 
%%BoundingBox: 136 336 476 456

%%EndDocument
 GE /Times-Bold SF
6120 55315 MT
(Figure 1-24:)SH
/Times-Roman SF
12443 XM
(An aggrelist that uses a part-generating function in its :item-prototype)SH
ES
%%Page: 319 24
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.5)
SH( Aggrelists)1800 W
51386 XM
(Page 319)SH
46800 50 8280 4486 UL
8 /Courier AF
10200 7699 MT
(\050defun Get-Label-In-Aggrelist \050agg\051)SH
11160 8564 MT
(\050let \050\050alist \050gv agg :parent\051\051\051)SH
12120 9429 MT
(\050if alist)SH
/Times-Italic SF
17400 XM
(;; The item-prototype has no parent)SH
/Courier SF
14040 10294 MT
(\050let* \050\050item \050gv agg :item\051\051)SH
17400 11159 MT
(\050new-label \050if \050schema-p item\051)SH
24600 12024 MT
(\050if \050gv item :parent\051)SH
/Times-Italic SF
26520 12889 MT
(;; The item has been used already --)SH
26520 13754 MT
(;; Use it as a prototype)SH
/Courier SF
26520 14619 MT
(\050create-instance NIL item\051)SH
/Times-Italic SF
26520 15484 MT
(;; Use the item itself)SH
/Courier SF
26520 16349 MT
(item\051)SH
24600 17214 MT
(\050create-instance NIL opal:text)SH
25560 18079 MT
(\050:string item\051)SH
25560 18944 MT
(\050:font \050opal:get-standard-font)SH
29400 19809 MT
(:sans-serif :bold :very-large\051\051\051\051\051\051)SH
15000 20674 MT
(\050s-value new-label :left)SH
19320 21539 MT
(\050o-formula \050+ \050gvl :parent :left\051)SH
26040 22404 MT
(\050round \050- \050gvl :parent :width\051)SH
30840 23269 MT
(\050gvl :width\051\051 2\051\051\051\051)SH
15000 24134 MT
(\050s-value new-label :top)SH
19320 24999 MT
(\050o-formula \050+ \050gvl :parent :top\051)SH
26040 25864 MT
(\050round \050- \050gvl :parent :height\051)SH
30840 26729 MT
(\050gvl :height\051\051 2\051\051\051\051)SH
15000 27594 MT
(new-label\051)SH
14040 28459 MT
(;; Give the item-prototype a bogus part)SH
14040 29324 MT
(\050create-instance NIL opal:null-object\051\051\051\051)SH
10200 30489 MT
(\050create-instance 'CIRCLE-LABEL opal:circle)SH
11160 31354 MT
(\050:width 30\051 \050:height 30\051)SH
11160 32219 MT
(\050:line-style NIL\051)SH
11160 33084 MT
(\050:filling-style opal:black-fill\051\051)SH
10200 34814 MT
(\050create-instance 'SQUARE-LABEL opal:rectangle)SH
11160 35679 MT
(\050:width 30\051 \050:height 30\051)SH
11160 36544 MT
(\050:line-style NIL\051)SH
11160 37409 MT
(\050:filling-style opal:black-fill\051\051)SH
10200 38574 MT
(\050create-instance 'PLUS-LABEL opal:aggregadget)SH
11160 39439 MT
(\050:width 30\051 \050:height 30\051)SH
11160 40304 MT
(\050:parts)SH
11640 41169 MT
(`\050\050:rect1 ,opal:rectangle)SH
13080 42034 MT
(\050:left ,\050o-formula \050+ 10 \050gvl :parent :left\051\051\051\051)SH
13080 42899 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
13080 43764 MT
(\050:width 10\051 \050:height 30\051)SH
13080 44629 MT
(\050:line-style NIL\051 \050:filling-style ,opal:black-fill\051\051)SH
12600 45494 MT
(\050:rect2 ,opal:rectangle)SH
13080 46359 MT
(\050:left ,\050o-formula \050gvl :parent :left\051\051\051)SH
13080 47224 MT
(\050:top ,\050o-formula \050+ 10 \050gvl :parent :top\051\051\051\051)SH
13080 48089 MT
(\050:width 30\051 \050:height 10\051)SH
13080 48954 MT
(\050:line-style NIL\051 \050:filling-style ,opal:black-fill\051\051\051\051\051)SH
10200 50119 MT
(\050create-instance 'STAR-LABEL opal:polyline)SH
11160 50984 MT
(\050:width 30\051 \050:height 30\051)SH
11160 51849 MT
(\050:point-list \050o-formula)SH
17880 52714 MT
(\050let* \050\050width \050gvl :width\051\051)
SH( \050width/5)
1440 W( \050round width 5\051\051)SH
21240 53579 MT
(\050height \050gvl :height\051\051  \050x1 \050gvl :left\051\051)SH
21240 54444 MT
(\050x2 \050+ x1 width/5\051\051)
SH( \050x3)
1920 W( \050+ x1 \050round width 2\051\051\051)SH
21240 55309 MT
(\050x5 \050+ x1 width\051\051)
SH( \050x4)
2880 W( \050- x5 width/5\051\051)SH
21240 56174 MT
(\050y1 \050gvl :top\051\051)
SH( \050y2)
3840 W( \050+ y1 \050round height 3\051\051\051)SH
21240 57039 MT
(\050y3 \050+ y1 height\051\051\051)SH
18840 57904 MT
(\050list x3 y1  x2 y3  x5 y2  x1 y2  x4 y3  x3 y1\051\051\051\051)SH
11160 58769 MT
(\050:line-style opal:line-2\051\051)SH
ES
%%Page: 320 25
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 320)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
8 /Courier AF
8040 7699 MT
(\050create-instance 'ALIST opal:aggrelist)SH
9000 8564 MT
(\050:left 10\051 \050:top 20\051)SH
9000 9429 MT
(\050:items \050list CIRCLE-LABEL SQUARE-LABEL "W" PLUS-LABEL STAR-LABEL\051\051)SH
9000 10294 MT
(\050:direction :horizontal\051)SH
9000 11159 MT
(\050:item-prototype)SH
9480 12024 MT
(`\050,opal:aggregadget)SH
10440 12889 MT
(\050:item ,\050o-formula \050nth \050gvl :rank\051 \050gvl :parent :items\051\051\051\051)SH
10440 13754 MT
(\050:width 60\051 \050:height 80\051)SH
10440 14619 MT
(\050:parts)SH
10920 15484 MT
(\050\050:frame ,opal:rectangle)SH
15240 16349 MT
(\050:left ,\050o-formula \050gvl :parent :left\051\051\051)SH
15240 17214 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
15240 18079 MT
(\050:width ,\050o-formula \050gvl :parent :width\051\051\051)SH
15240 18944 MT
(\050:height ,\050o-formula \050gvl :parent :height\051\051\051\051)SH
11400 19809 MT
(\050:label ,#'Get-Label-In-Aggrelist\051\051\051\051\051\051)SH
11 /Times-Roman AF
6120 22107 MT
(The parts-generating function Get-Label-In-Aggrelist takes into account the aggregadget that)
231 W( will be)232 W
6120 23303 MT
(generated for the)215 W
10 /Courier AF
14490 XM
(:item-prototype-object)SH
11 /Times-Roman AF
28179 XM
(in ALIST.  In this example, we are concerned about)214 W
6120 24499 MT
(reserving our label prototypes solely for use in the visible components.)
102 W( We)
481 W( could ignore this case, but)103 W
6120 25695 MT
(then one of our prototypes \050like CIRCLE-LABEL\051)
749 W( would become a component of the)748 W
10 /Courier AF
6120 26891 MT
(:item-prototype-object)SH
11 /Times-Roman AF
19620 XM
(which never appears in the window.  \050Additionally,)
25 W( problems could arise if)26 W
6120 28087 MT
(we destroyed the aggrelist along with its)48 W
10 /Courier AF
24511 XM
(:item-prototype-object)SH
11 /Times-Roman AF
38034 XM
(and still expected)
48 W( to use the label)47 W
6120 29283 MT
(as a prototype\051.  Instead, we specifically check if we are)
752 W( generating a part for the)753 W
10 /Courier AF
6120 30479 MT
(:item-prototype-object)SH
11 /Times-Roman AF
19595 XM
(and return a bogus object, saving our real labels for the visible instances.)SH
6120 32777 MT
(The gadgets)
108 W( that use aggrelists \050like the button panels and menus\051 all use this feature, so you can have)107 W
6120 33973 MT
(Garnet objects in the)SH
10 /Courier AF
15528 XM
(:items)SH
11 /Times-Roman AF
19403 XM
(list of a gadget.  See the Gadgets manual for further details.)SH
12 /Times-Bold AF
6120 37657 MT
(1.5.3. Non-Itemized Aggrelists)SH
11 /Times-Roman AF
6120 38853 MT
(Non-itemized aggrelists may be specified with the)35 W
10 /Courier AF
28756 XM
(:parts)SH
11 /Times-Roman AF
32666 XM
(slot, just as)
35 W( in aggregadgets, except aggrelists)36 W
6120 40049 MT
(will automatically set the)108 W
10 /Courier AF
17918 XM
(:left)SH
11 /Times-Roman AF
21301 XM
(and)SH
10 /Courier AF
23271 XM
(:top)SH
11 /Times-Roman AF
26053 XM
(slots \050among others\051.  Figure 1-25 creates an aggrelist with)107 W
6120 41245 MT
(three components, and a picture of this aggrelist is shown in figure 1-28.)SH
8 /Courier AF
8040 42940 MT
(\050create-instance 'MY-AGG opal:aggrelist)SH
9000 43805 MT
(\050:left 10\051 \050:top 10\051)SH
9000 44670 MT
(\050:parts)SH
9480 45535 MT
(`\050\050:obj1 ,opal:rectangle \050:width 60\051 \050:height 30\051\051)SH
10440 46400 MT
(\050:obj2 ,opal:oval \050:width 60\051 \050:height 30\051\051)SH
10440 47265 MT
(\050:obj3 ,opal:roundtangle \050:width 60\051 \050:height 30\051\051\051\051\051)SH
11 /Times-Bold AF
6120 49017 MT
(Figure 1-25:)SH
/Times-Roman SF
12443 XM
(Example of an aggrelist with a parts slot.)SH
75 100 0 6570 84638 GB 
%%BeginDocument: aggregadgets/agg-list.PS
%!PS-Adobe-2.0
%%Title: Opal 14
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 2, 1992, 3:33 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 251 333 361 459
%%%Pages: 1
%%EndComments


/RoundtanglePath
   {    % stack: left, top, width, height, radius
        /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
        /right l w add def  /bottom t h sub def
          l r add t moveto                         % origin
          right t right t r sub r arcto            % top side
          right bottom right r sub bottom r arcto  % right side
          l bottom l bottom r add r arcto          % bottom side
          l t l r add t r arcto                    % left side
          16 {pop} repeat  % each arcto accumulates 4 stack parameters
   } def

/RoundtangleDict 27 dict def
/DrawRoundtangle
   {    % stack: left, top, width, height, radius, line-halftone,
        %        line-red, line-green, line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        
        RoundtangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub  width thickness sub  height thickness sub
          radius thickness sub RoundtanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height radius thickness-by-2 sub RoundtanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
          x y translate
          gsave
            xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
          savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
179 -261 translate
gsave
0 648 110 126 ClipToRectangle
0 0 translate
gsave
10 638 90 30 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
55.0 588.0 45.0 15.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
10 568 90 30 6 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRoundtangle
grestore

grestore

0 648 110 126 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 251 333 361 459

%%EndDocument
 GE /Times-Bold SF
6120 62611 MT
(Figure 1-26:)SH
/Times-Roman SF
12443 XM
(The picture of an aggrelist with three components.)SH
6120 64909 MT
(Instances of aggrelists are similar)
314 W( to instances of aggregadgets except for the handling of default)315 W
6120 66105 MT
(components and the)257 W
10 /Courier AF
15964 XM
(:item-prototype-object)SH
11 /Times-Roman AF
29696 XM
(slot. Unlike)
787 W( aggregadgets, components that were)256 W
6120 67301 MT
(generated by a)120 W
10 /Courier AF
13167 XM
(:parts)SH
11 /Times-Roman AF
17163 XM
(list are not automatically inherited, so an aggrelist with an empty)121 W
10 /Courier AF
47334 XM
(:parts)SH
11 /Times-Roman AF
51330 XM
(slot)SH
6120 68497 MT
(will)SH
/Times-Italic SF
8185 XM
(not)SH
/Times-Roman SF
9944 XM
(inherit the parts of its prototype.  The only way)
78 W( to inherit these components is to name them in)77 W
6120 69693 MT
(the prototype and to list each name as one of the instance's)17 W
10 /Courier AF
32532 XM
(:parts)SH
11 /Times-Roman AF
(. For)
311 W( example, the following instance)18 W
6120 70889 MT
(of MY-AGG \050defined above\051 will inherit the parts defined in the prototype:)SH
ES
%%Page: 321 26
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.7)
SH( Manipulating)
1800 W( Gadgets Procedurally)SH
51386 XM
(Page 321)SH
46800 50 8280 4486 UL
8 /Courier AF
10200 7699 MT
(\050create-instance 'MY-INST MY-AGG)SH
11160 8564 MT
(\050:left 100\051)SH
11160 9429 MT
(\050:parts '\050:obj1 :obj2 :obj3\051\051\051)SH
11 /Times-Roman AF
8280 11727 MT
(Note that this syntax is consistent with the rules for customizing the parts of aggregadgets described in)103 W
8280 12923 MT
(section 1.4.)SH
8280 15221 MT
(Like aggregadgets, aggrelists created with a)131 W
10 /Courier AF
28643 XM
(:parts)SH
11 /Times-Roman AF
32649 XM
(slot have)
131 W( constant)132 W
10 /Courier AF
41201 XM
(:components)SH
11 /Times-Roman AF
48208 XM
(by default.  To)132 W
8280 16417 MT
(cause the)2 W
10 /Courier AF
12620 XM
(:left)SH
11 /Times-Roman AF
15897 XM
(and)SH
10 /Courier AF
17762 XM
(:top)SH
11 /Times-Roman AF
20439 XM
(slots of the components to become constant after the aggrelist is laid out, all of)2 W
8280 17613 MT
(the layout parameters listed in section 1.5.2.4 \050including the)SH
10 /Courier AF
34920 XM
(:items)SH
11 /Times-Roman AF
38795 XM
(slot\051 must be declared constant.)SH
14 /Times-Bold AF
8280 21431 MT
(1.6. Instances of Aggrelists)SH
11 /Times-Roman AF
8280 22627 MT
(When an instance is made of an itemized aggrelist,)
53 W( components are automatically created as instances of)54 W
8280 23823 MT
(the item prototype object according to the local or inherited)SH
10 /Courier AF
34734 XM
(:items)SH
11 /Times-Roman AF
38609 XM
(slot.)SH
8280 26121 MT
(A consequence of these rules for making instances is that a default instance of a)
96 W( non-itemized aggrelist)95 W
8280 27317 MT
(will typically have)
105 W( no components, while a default instance of an itemized aggrelist will typically have)106 W
8280 28513 MT
(the same component structure as its prototype due to the inherited)SH
10 /Courier AF
37515 XM
(:items)SH
11 /Times-Roman AF
41390 XM
(slot.)SH
12 /Times-Bold AF
8280 32197 MT
(1.6.1. Overriding the Item Prototype Object)SH
11 /Times-Roman AF
8280 33393 MT
(For itemized aggrelists, an)
79 W( instance of the item prototype object is made automatically and stored in the)78 W
10 /Courier AF
8280 34589 MT
(:item-prototype-object)SH
11 /Times-Roman AF
21767 XM
(slot of the instance aggrelist.  The same syntax used in)
12 W( the)13 W
10 /Courier AF
47788 XM
(:parts)SH
11 /Times-Roman AF
51676 XM
(slot can)13 W
8280 35785 MT
(be used to override slots of the item prototype object.  For example, figure 1-27 illustrates a)
51 W( variation on)50 W
8280 36981 MT
(the text list in figure 1-22.  Here, the)214 W
10 /Courier AF
26549 XM
(:frame)SH
11 /Times-Roman AF
30638 XM
(component is inherited and modified to be)
214 W( gray and)215 W
8280 38177 MT
(relatively wider than its prototype, a)
67 W( new component,)66 W
10 /Courier AF
32579 XM
(:white-box)SH
11 /Times-Roman AF
38920 XM
(is added, and the)66 W
10 /Courier AF
46851 XM
(:text)SH
11 /Times-Roman AF
50192 XM
(component)SH
8280 39373 MT
(is inherited and)
129 W( modified to be centered in the new larger surrounding)130 W
10 /Courier AF
40872 XM
(:frame)SH
11 /Times-Roman AF
(. The)
535 W( text interactor is)130 W
8280 40569 MT
(inherited without modification by default.)SH
/Times-BoldItalic SF
8280 42867 MT
(Note:)SH
/Times-Roman SF
11069 XM
(The)SH
10 /Courier AF
13064 XM
(:items)SH
11 /Times-Roman AF
16949 XM
(list, if left unspecified, would be shared with FRAMED-TEXT-LIST.  It is generally)
10 W( a)9 W
8280 44063 MT
(good idea to specify the)SH
10 /Courier AF
19063 XM
(:items)SH
11 /Times-Roman AF
22938 XM
(to avoid sharing.)SH
14 /Times-Bold AF
8280 47881 MT
(1.7. Manipulating Gadgets Procedurally)SH
11 /Times-Roman AF
8280 49077 MT
(A collection of functions is available to alter aggregadget and aggrelist prototypes.)
10 W( When)
293 W( the prototype is)9 W
8280 50273 MT
(altered, the changes propagate down to instances of the)
187 W( prototype.  Inheritance of slots is a standard)188 W
8280 51469 MT
(feature of KR, but inheritance of structural changes is)
233 W( unique to aggregadgets and aggrelists and is)232 W
8280 52665 MT
(implemented by the functions and methods described in this chapter.)SH
8280 54963 MT
(The philosophy behind structural inheritance is simply stated:)46 W
/Times-Italic SF
36406 XM
(changing a prototype and then making an)47 W
8280 56159 MT
(instance should be)
100 W( equivalent to making an instance and then changing the prototype.)99 W
/Times-Roman SF
48071 XM
(In practice, this)99 W
8280 57355 MT
(equivalence is difficult to achieve completely; exceptions will be noted.)SH
12 /Times-Bold AF
8280 61039 MT
(1.7.1. Copying Gadgets)SH
10 /Courier AF
8280 62235 MT
(opal:Copy-Gadget)SH
11 /Times-Italic AF
18155 XM
(gadget)SH
/Times-Roman SF
50376 XM
([)SH
/Times-Italic SF
(Function)SH
/Times-Roman SF
(])SH
8280 64533 MT
(This function)
79 W( copies an aggregadget, aggrelist, aggregate, or Opal graphical object.  The copy will have)80 W
8280 65729 MT
(the same structure as the original.  This is different)
62 W( from \050and more expensive than\051 creating an instance)61 W
8280 66925 MT
(because nothing will be inherited from the original.)SH
8280 69223 MT
(When copying an itemized aggrelist,)
196 W( components are not copied, because they inherit from the local)197 W
8280 70419 MT
(items-prototype-object. Instead,)
731 W( the)228 W
10 /Courier AF
25381 XM
(:items)SH
11 /Times-Roman AF
29483 XM
(slot and the item-prototype-object are copied, and new)227 W
8280 71615 MT
(components are generated accordingly.)SH
ES
%%Page: 322 27
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 322)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
11 SS 
75 100 0 6570 44775 GB 
%%BeginDocument: aggregadgets/boxed-text-list-pix.PS
%!PS-Adobe-2.0
%%Title: Opal 20
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 2, 1992, 3:41 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 216 291 396 501
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
144 -219 translate
gsave
0 648 180 210 ClipToRectangle
0 0 translate
gsave
40 628 100 30 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
44 624 92 22 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRectangle
48 620 609 84 14 0 false 0 0 0 false 0 0 0 false (An aggrelist) 12 /Courier DrawText
40 593 72 30 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
44 589 64 22 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRectangle
48 585 574 56 14 0 false 0 0 0 false 0 0 0 false (using an) 12 /Courier DrawText
40 558 77 30 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
44 554 69 22 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRectangle
48 550 539 61 14 0 false 0 0 0 false 0 0 0 false (aggregate) 12 /Courier DrawText
40 523 50 30 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
44 519 42 22 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRectangle
48 515 504 34 14 0 false 0 0 0 false 0 0 0 false (as an) 12 /Courier DrawText
40 488 112 30 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
44 484 104 22 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRectangle
48 480 469 96 14 0 false 0 0 0 false 0 0 0 false (item-prototype) 12 /Courier DrawText
grestore

grestore

0 648 180 210 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 216 291 396 501

%%EndDocument
 GE 8 /Courier AF
8040 24812 MT
(\050create-instance 'BOXED-TEXT-LIST FRAMED-TEXT-LIST)SH
9480 25677 MT
(\050:items '\050"An aggrelist" "using an" "inherited")SH
14280 26542 MT
("but modified" "item-prototype"\051\051)SH
9480 27407 MT
(\050:left 120\051)SH
9480 28272 MT
(\050:top 0\051)SH
9480 29137 MT
(\050:item-prototype)SH
9960 30002 MT
(`\050:modify)SH
10920 30867 MT
(\050:parts)SH
11400 31732 MT
(\050\050:frame :modify)SH
13320 32597 MT
(; make the frame gray)SH
13320 33462 MT
(\050:filling-style ,opal:gray-fill\051)SH
13320 34327 MT
(; make the frame wider)SH
13320 35192 MT
(\050:width ,\050o-formula \050+ \050gvl-sibling :text :width\051 16\051\051\051)SH
13320 36057 MT
(; make the frame taller)SH
13320 36922 MT
(\050:height ,\050o-formula \050+ \050gvl-sibling :text :height\051 16\051\051\051\051)SH
11880 37787 MT
(\050:white-box ,opal:rectangle)SH
13320 38652 MT
(\050:filling-style ,opal:white-fill\051)SH
13320 39517 MT
(\050:left ,\050o-formula \050+ \050gvl :parent :left\051 4\051\051\051)SH
13320 40382 MT
(\050:top ,\050o-formula \050+ \050gvl :parent :top\051 4\051\051\051)SH
13320 41247 MT
(\050:width ,\050o-formula \050+ \050gvl-sibling :text :width\051 8\051\051\051)SH
13320 42112 MT
(\050:height ,\050o-formula \050+ \050gvl-sibling :text :height\051 8\051\051\051\051)SH
11880 42977 MT
(\050:text :modify  ; move the text to allow for the border)SH
13320 43842 MT
(\050:left ,\050o-formula \050+ \050gvl :parent :left\051 8\051\051\051)SH
13320 44707 MT
(\050:top ,\050o-formula \050+ \050gvl :parent :top\051 8\051\051\051\051\051\051\051\051\051)SH
11 /Times-Bold AF
6120 46459 MT
(Figure 1-27:)SH
/Times-Roman SF
12443 XM
(An aggrelist that)
306 W( overrides parts of an inherited)307 W
10 /Courier AF
35973 XM
(:item-prototype)SH
11 /Times-Roman AF
(. The)
889 W( prototype)307 W
12443 47655 MT
(FRAMED-TEXT-LIST was defined in figure 1-22.)SH
46800 50 6120 49607 UL
12 /Times-Bold AF
6120 53091 MT
(1.7.2. Aggregadget Manipulation)SH
6120 56055 MT
(1.7.2.1. Add-Component)SH
10 /Courier AF
6120 58699 MT
(opal:Add-Component)SH
11 /Times-Italic AF
17195 XM
(gadget element)SH
/Times-Roman SF
24159 XM
([[)SH
10 /Courier AF
(:where)SH
11 /Times-Roman AF
(])SH
/Times-Italic SF
29132 XM
(position)SH
/Times-Roman SF
32953 XM
([)SH
/Times-Italic SF
(locator)SH
/Times-Roman SF
(]])SH
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
6120 61332 MT
(This function behaves just like the)206 W
10 /Courier AF
22754 XM
(add-component)SH
11 /Times-Roman AF
31035 XM
(method for)
206 W( aggregates \050see the)207 W
/Times-Italic SF
45842 XM
(Opal Reference)207 W
6120 62528 MT
(Manual)SH
/Times-Roman SF
(\051 except that,)SH
/Symbol SF
8089 64106 MT
(\267)SH
/Times-Roman SF
8870 XM
(if)SH
/Times-Italic SF
9830 XM
(gadget)SH
/Times-Roman SF
13112 XM
(is a prototype, then instances of)13 W
/Times-Italic SF
27395 XM
(element)SH
/Times-Roman SF
31103 XM
(are also added)
13 W( to instances of)12 W
/Times-Italic SF
44371 XM
(gadget)SH
/Times-Roman SF
(. This)299 W
8870 65302 MT
(is recursive so that instances of instances, etc., are also affected;)SH
/Symbol SF
8089 67196 MT
(\267)SH
/Times-Roman SF
8870 XM
(if)SH
/Times-Italic SF
9941 XM
(element)SH
/Times-Roman SF
13760 XM
(has slot)124 W
10 /Courier AF
17614 XM
(:known-as)SH
11 /Times-Roman AF
23413 XM
(with value)124 W
/Times-Italic SF
28549 XM
(name)SH
/Times-Roman SF
(, then the)124 W
/Times-Italic SF
35641 XM
(name)SH
/Times-Roman SF
38422 XM
(slot of)124 W
/Times-Italic SF
41726 XM
(gadget)SH
/Times-Roman SF
45120 XM
(is set to be)125 W
/Times-Italic SF
8870 68392 MT
(element)SH
/Times-Roman SF
(. This)
1033 W( creates the standard link from)379 W
/Times-Italic SF
31724 XM
(gadget)SH
/Times-Roman SF
35371 XM
(to)SH
/Times-Italic SF
36880 XM
(element)SH
/Times-Roman SF
40953 XM
(\050see Section 1.2.5\051.)378 W
8870 69588 MT
(Ordinarily, the)SH
10 /Courier AF
15621 XM
(:known-as)SH
11 /Times-Roman AF
21296 XM
(slot of)SH
/Times-Italic SF
24352 XM
(element)SH
/Times-Roman SF
28047 XM
(should be set before calling)SH
10 /Courier AF
40418 XM
(add-component)SH
11 /Times-Roman AF
(.)SH
/Times-BoldItalic SF
6120 71886 MT
(Note:)SH
/Times-Roman SF
9198 XM
(Names of components and interactors)
12 W( must be unique within their parent.  For example, there must)13 W
ES
%%Page: 323 28
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.7)
SH( Manipulating)
1800 W( Gadgets Procedurally)SH
51386 XM
(Page 323)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(not be two components named)SH
10 /Courier AF
21997 XM
(:box)SH
11 /Times-Roman AF
(.)SH
8280 10253 MT
(The)SH
/Times-Italic SF
10320 XM
(position)SH
/Times-Roman SF
14196 XM
(and)SH
/Times-Italic SF
16114 XM
(locator)SH
/Times-Roman SF
19622 XM
(arguments can be used to adjust the placement of)55 W
/Times-Italic SF
42018 XM
(graphical-object)SH
/Times-Roman SF
49680 XM
(with respect)55 W
8280 11449 MT
(to the rest of the components of)SH
/Times-Italic SF
22485 XM
(gadget)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 13747 MT
(position)SH
/Times-Roman SF
12101 XM
(can be any of these five values:)SH
10 /Courier AF
11880 15368 MT
(:front)SH
17640 XM
(:back)SH
23400 XM
(:behind)SH
29160 XM
(:in-front)SH
34920 XM
(:at)SH
11 /Times-Roman AF
8280 16564 MT
(or any of the following aliases:)SH
10 /Courier AF
11880 17760 MT
(:tail)SH
17640 XM
(:head)SH
23400 XM
(:before)SH
29160 XM
(:after)SH
34920 XM
(:at)SH
11 /Times-Roman AF
8280 20058 MT
(The keyword)SH
10 /Courier AF
14388 XM
(:where)SH
11 /Times-Roman AF
18263 XM
(is optional; for example,)SH
8 /Courier AF
10200 21223 MT
(\050add-component aggrelist new-component :where :head\051)SH
10200 22953 MT
(\050add-component aggrelist new-component :head\051)SH
11 /Times-Roman AF
8280 24374 MT
(are valid and equivalent calls to)91 W
10 /Courier AF
23060 XM
(add-component)SH
11 /Times-Roman AF
(. The)
457 W( default value for)91 W
10 /Courier AF
41759 XM
(:where)SH
11 /Times-Roman AF
45725 XM
(is)SH
10 /Courier AF
46825 XM
(:tail)SH
11 /Times-Roman AF
50192 XM
(\050add to the)92 W
8280 25570 MT
(end of the list, which is graphically on top or at the front\051.)SH
8280 27868 MT
(If)SH
/Times-Italic SF
9454 XM
(position)SH
/Times-Roman SF
13442 XM
(is either)167 W
10 /Courier AF
17564 XM
(:before)SH
11 /Times-Roman AF
(/)SH
10 /Courier AF
(:behind)SH
11 /Times-Roman AF
26712 XM
(or)SH
10 /Courier AF
28070 XM
(:after)SH
11 /Times-Roman AF
(/)SH
10 /Courier AF
(:in-front)SH
11 /Times-Roman AF
37818 XM
(then the)
167 W( value of)166 W
/Times-Italic SF
46119 XM
(locator)SH
/Times-Roman SF
49738 XM
(should be a)166 W
8280 29064 MT
(graphical object already in the component list)
69 W( of the aggregate, in which case)70 W
/Times-Italic SF
43454 XM
(graphical-object)SH
/Times-Roman SF
51131 XM
(is placed)70 W
8280 30260 MT
(with respect to)SH
/Times-Italic SF
15031 XM
(locator)SH
/Times-Roman SF
(.)SH
8280 32558 MT
(If)SH
/Times-Italic SF
9407 XM
(position)SH
/Times-Roman SF
13348 XM
(is)SH
10 /Courier AF
14477 XM
(:at)SH
11 /Times-Roman AF
(,)SH
/Times-Italic SF
16947 XM
(graphical-object)SH
/Times-Roman SF
24674 XM
(is placed at the)120 W
/Times-Italic SF
31996 XM
(locator)SH
/Times-Roman SF
(th position in the component list, where the)120 W
8280 33754 MT
(zeroth position is the head of the list.)SH
/Times-BoldItalic SF
8280 36052 MT
(Note:)SH
/Times-Roman SF
11074 XM
(The)SH
10 /Courier AF
13074 XM
(add-component)SH
11 /Times-Roman AF
21164 XM
(method will always add the)
15 W( component at the most reasonable position if the)16 W
8280 37248 MT
(specified location does not exist.  For)
128 W( example, if)127 W
10 /Courier AF
31394 XM
(add-component)SH
11 /Times-Roman AF
39596 XM
(is asked to add a component after)127 W
8280 38444 MT
(another one that does not exist, the new component will be added at the tail.)SH
8280 40742 MT
(Instances of)550 W
/Times-Italic SF
14938 XM
(element)SH
/Times-Roman SF
19183 XM
(are created and added)
550 W( to instances of)551 W
/Times-Italic SF
39496 XM
(gadget)SH
/Times-Roman SF
43316 XM
(using recursive calls to)551 W
10 /Courier AF
8280 41938 MT
(add-component)SH
11 /Times-Roman AF
(. Since)
375 W( instances of)50 W
/Times-Italic SF
25372 XM
(gadget)SH
/Times-Roman SF
28691 XM
(may not have the same structure as)50 W
/Times-Italic SF
44709 XM
(gadget)SH
/Times-Roman SF
(, it is not always)49 W
8280 43134 MT
(obvious where)
12 W( to add a component.  In particular, a given)13 W
/Times-Italic SF
34049 XM
(locator)SH
/Times-Roman SF
37515 XM
(object will never exist in instances, so a)13 W
8280 44330 MT
(new instance)SH
/Times-Italic SF
14266 XM
(locator)SH
/Times-Roman SF
17719 XM
(must be inferred from the prototype)SH
/Times-Italic SF
33725 XM
(locator)SH
/Times-Roman SF
37178 XM
(as follows:)SH
/Symbol SF
10249 45908 MT
(\267)SH
/Times-Roman SF
11030 XM
(If the instance gadget)
60 W( has a component that is an instance of the prototype)59 W
/Times-Italic SF
44665 XM
(locator)SH
/Times-Roman SF
(, then that)59 W
11030 47104 MT
(component is the instance)SH
/Times-Italic SF
22700 XM
(locator)SH
/Times-Roman SF
(.)SH
/Symbol SF
10249 48998 MT
(\267)SH
/Times-Roman SF
11030 XM
(Otherwise, if the instance gadget has a component with the same)66 W
/Times-Italic SF
40530 XM
(name)SH
/Times-Roman SF
43254 XM
(\050)SH
10 /Courier AF
(:known-as)SH
11 /Times-Roman AF
(\051 as the)67 W
11030 50194 MT
(prototype)SH
/Times-Italic SF
15521 XM
(locator)SH
/Times-Roman SF
(, then that component is the instance)SH
/Times-Italic SF
35013 XM
(locator)SH
/Times-Roman SF
(.)SH
/Symbol SF
10249 52088 MT
(\267)SH
/Times-Roman SF
11030 XM
(Otherwise, a warning is printed, and there is no locator.)SH
8280 54386 MT
(Given this procedure for finding an instance)SH
/Times-Italic SF
27981 XM
(locator)SH
/Times-Roman SF
(, the insert point is determined as follows:)SH
/Symbol SF
10249 55964 MT
(\267)SH
/Times-Roman SF
11030 XM
(The default position is)SH
10 /Courier AF
21174 XM
(:front)SH
11 /Times-Roman AF
(.)SH
/Symbol SF
10249 57858 MT
(\267)SH
/Times-Roman SF
11030 XM
(If the)SH
/Times-Italic SF
13656 XM
(position)SH
/Times-Roman SF
17477 XM
(is specified as)SH
10 /Courier AF
23922 XM
(:front)SH
11 /Times-Roman AF
27797 XM
(or)SH
10 /Courier AF
28988 XM
(:tail)SH
11 /Times-Roman AF
(, always insert the component at the)SH
10 /Courier AF
48056 XM
(:front)SH
11 /Times-Roman AF
(.)SH
/Symbol SF
10249 59752 MT
(\267)SH
/Times-Roman SF
11030 XM
(If the)SH
/Times-Italic SF
13656 XM
(position)SH
/Times-Roman SF
17477 XM
(is specified as)SH
10 /Courier AF
23922 XM
(:back)SH
11 /Times-Roman AF
27197 XM
(or)SH
10 /Courier AF
28388 XM
(:head)SH
11 /Times-Roman AF
(, always insert the component at the)SH
10 /Courier AF
47456 XM
(:back)SH
11 /Times-Roman AF
(.)SH
/Symbol SF
10249 61646 MT
(\267)SH
/Times-Roman SF
11030 XM
(If the)49 W
/Times-Italic SF
13754 XM
(position)SH
/Times-Roman SF
17624 XM
(is)SH
10 /Courier AF
18682 XM
(:behind)SH
11 /Times-Roman AF
23206 XM
(or)SH
10 /Courier AF
24446 XM
(:before)SH
11 /Times-Italic AF
28970 XM
(locator)SH
/Times-Roman SF
(, and an)
49 W( instance)48 W
/Times-Italic SF
39947 XM
(locator)SH
/Times-Roman SF
43448 XM
(is found, then insert)48 W
10 /Courier AF
11030 62842 MT
(:behind)SH
11 /Times-Roman AF
15657 XM
(the instance)152 W
/Times-Italic SF
21459 XM
(locator)SH
/Times-Roman SF
(, otherwise insert at the)152 W
10 /Courier AF
35905 XM
(:front)SH
11 /Times-Roman AF
39932 XM
(\050the rationale here)
152 W( is to err)153 W
11030 64038 MT
(toward the front, making errors immediately visible\051.)SH
/Symbol SF
10249 65932 MT
(\267)SH
/Times-Roman SF
11030 XM
(If the)9 W
/Times-Italic SF
13674 XM
(position)SH
/Times-Roman SF
17504 XM
(is)SH
10 /Courier AF
18522 XM
(:in-front)SH
11 /Times-Roman AF
24206 XM
(or)SH
10 /Courier AF
25406 XM
(:after)SH
11 /Times-Italic AF
29290 XM
(locator)SH
/Times-Roman SF
(, and an)
9 W( instance)8 W
/Times-Italic SF
40107 XM
(locator)SH
/Times-Roman SF
43568 XM
(is found, then insert)8 W
10 /Courier AF
11030 67128 MT
(:in-front)SH
11 /Times-Roman AF
16705 XM
(of the instance)SH
/Times-Italic SF
23394 XM
(locator)SH
/Times-Roman SF
(, otherwise insert at the)SH
10 /Courier AF
37080 XM
(:front)SH
11 /Times-Roman AF
(.)SH
/Symbol SF
10249 69022 MT
(\267)SH
/Times-Roman SF
11030 XM
(If the)157 W
/Times-Italic SF
13970 XM
(position)SH
/Times-Roman SF
17948 XM
(is)SH
10 /Courier AF
19114 XM
(:at)SH
11 /Times-Roman AF
(, then)158 W
/Times-Italic SF
23949 XM
(locator)SH
/Times-Roman SF
27560 XM
(is an index.  Use the same index to insert an)158 W
/Times-Italic SF
48910 XM
(element)SH
/Times-Roman SF
11030 70218 MT
(instance in each)SH
/Times-Italic SF
18329 XM
(gadget)SH
/Times-Roman SF
21598 XM
(instance.)SH
ES
%%Page: 324 29
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 324)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
12 /Times-Bold AF
6120 8004 MT
(1.7.2.2. Remove Component)SH
10 /Courier AF
6120 9200 MT
(opal:Remove-Component)SH
11 /Times-Italic AF
18995 XM
(gadget element)SH
/Times-Roman SF
25959 XM
([)SH
/Times-Italic SF
26600 XM
(destroy?)SH
/Times-Roman SF
30663 XM
(])SH
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
6120 11498 MT
(The)SH
10 /Courier AF
8111 XM
(remove-component)SH
11 /Times-Roman AF
17992 XM
(method removes the)6 W
/Times-Italic SF
27205 XM
(element)SH
/Times-Roman SF
30906 XM
(from)SH
/Times-Italic SF
33325 XM
(gadget)SH
/Times-Roman SF
(. If)287 W
/Times-Italic SF
38169 XM
(gadget)SH
/Times-Roman SF
41444 XM
(is connected)
6 W( to a window,)5 W
6120 12694 MT
(then)SH
/Times-Italic SF
8289 XM
(element)SH
/Times-Roman SF
11984 XM
(will be erased when the window next has an update message sent to it.)SH
6120 14992 MT
(Because aggregadgets allow even the prototype of a component to)
334 W( be overridden in an instance,)335 W
6120 16188 MT
(determining what components to)
247 W( remove is not always straightforward.  First,)246 W
10 /Courier AF
43320 XM
(remove-component)SH
11 /Times-Roman AF
6120 17384 MT
(removes all instances of)67 W
/Times-Italic SF
17262 XM
(component)SH
/Times-Roman SF
22430 XM
(from their parents)67 W
/Times-Italic SF
30786 XM
(if)SH
/Times-Roman SF
31740 XM
(the parent)67 W
10 /Courier AF
36516 XM
(is-a-p)SH
11 /Times-Roman AF
40459 XM
(the)SH
/Times-Italic SF
42146 XM
(gadget)SH
/Times-Roman SF
45483 XM
(argument. \050This)411 W
6120 18580 MT
(avoids breaking up aggregates that use instances of components but which are not instances)
90 W( of)89 W
/Times-Italic SF
49285 XM
(gadget)SH
/Times-Roman SF
(.\051)SH
6120 19776 MT
(Then,)SH
10 /Courier AF
9082 XM
(remove-component)SH
11 /Times-Roman AF
19109 XM
(removes all)
152 W( parts of instances of)153 W
/Times-Italic SF
34504 XM
(gadget)SH
/Times-Roman SF
37926 XM
(that have a)153 W
10 /Courier AF
43424 XM
(:known-as)SH
11 /Times-Roman AF
49252 XM
(slot that)153 W
6120 20972 MT
(matches that of the)20 W
/Times-Italic SF
14813 XM
(component)SH
/Times-Roman SF
(. Components)
313 W( are removed with recursive calls to)19 W
10 /Courier AF
42170 XM
(remove-component)SH
11 /Times-Roman AF
52064 XM
(to)SH
6120 22168 MT
(affect the entire instance tree.)SH
6120 24466 MT
(If)SH
/Times-Italic SF
7127 XM
(destroy?)SH
/Times-Roman SF
11190 XM
(is not NIL \050the default is NIL\051, then the removed objects are destroyed.)SH
12 /Times-Bold AF
6120 27430 MT
(1.7.2.3. Add-Interactor)SH
11 /Times-Roman AF
6120 28626 MT
(Interactors can be added by calling)SH
10 /Courier AF
6120 30924 MT
(opal:Add-Interactor)SH
11 /Times-Italic AF
17795 XM
(gadget interactor)SH
/Times-Roman SF
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
6120 33222 MT
(where)SH
/Times-Italic SF
9168 XM
(gadget)SH
/Times-Roman SF
12524 XM
(is an aggregadget or aggrelist.  If the interactor has a)87 W
10 /Courier AF
36875 XM
(:known-as)SH
11 /Times-Roman AF
42637 XM
(slot, then this becomes)87 W
6120 34418 MT
(the name of the interactor.  The)SH
10 /Courier AF
20230 XM
(:operates-on)SH
11 /Times-Roman AF
27705 XM
(slot in the interactor is set to the gadget.)SH
6120 36716 MT
(An instance of)SH
/Times-Italic SF
12809 XM
(interactor)SH
/Times-Roman SF
17484 XM
(is added to each instance of)SH
/Times-Italic SF
29884 XM
(gadget)SH
/Times-Roman SF
33153 XM
(using a recursive call to)SH
10 /Courier AF
43874 XM
(add-interactor)SH
11 /Times-Roman AF
(.)SH
/Times-BoldItalic SF
6120 39014 MT
(Note:)SH
/Times-Italic SF
8935 XM
(gadget)SH
/Times-Roman SF
12240 XM
(should not have an)
36 W( interactor or component with the same name \050)35 W
10 /Courier AF
(:known-as)SH
11 /Times-Roman AF
47143 XM
(slot\051 already.)35 W
6120 40210 MT
(Otherwise, an inconsistent gadget will result.)SH
12 /Times-Bold AF
6120 43174 MT
(1.7.2.4. Remove-Interactor)SH
10 /Courier AF
6120 44370 MT
(opal:Remove-Interactor)SH
11 /Times-Italic AF
19595 XM
(gadget interactor)SH
/Times-Roman SF
27539 XM
([)SH
/Times-Italic SF
(destroy?)SH
/Times-Roman SF
(])SH
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
6120 46668 MT
(is used to remove an interactor.)
167 W( The)
611 W( interactor)168 W
10 /Courier AF
28457 XM
(:operates-on)SH
11 /Times-Roman AF
36100 XM
(slot is destroyed, as is the link from)168 W
/Times-Italic SF
6120 47864 MT
(gadget)SH
/Times-Roman SF
9479 XM
(to the)90 W
/Times-Italic SF
12409 XM
(interactor)SH
/Times-Roman SF
17174 XM
(\050determined by the value of the)90 W
/Times-Italic SF
31764 XM
(interactor)SH
/Times-Roman SF
('s)SH
10 /Courier AF
37323 XM
(:known-as)SH
11 /Times-Roman AF
43088 XM
(slot\051. In)
455 W( addition, the)90 W
/Times-Italic SF
6120 49060 MT
(interactor)SH
/Times-Roman SF
('s)SH
10 /Courier AF
11851 XM
(:active)SH
11 /Times-Roman AF
16588 XM
(slot is set to NIL.  The)262 W
/Times-Italic SF
28566 XM
(interactor)SH
/Times-Roman SF
33503 XM
(is also destroyed if)
262 W( the optional)263 W
/Times-Italic SF
49132 XM
(destroy?)SH
/Times-Roman SF
6120 50256 MT
(parameter is not NIL.)SH
6120 52554 MT
(Instances of)44 W
/Times-Italic SF
11766 XM
(interactor)SH
/Times-Roman SF
16485 XM
(that belong to instances of)44 W
/Times-Italic SF
28528 XM
(gadget)SH
/Times-Roman SF
31840 XM
(\050as determined by the)43 W
10 /Courier AF
41786 XM
(:operates-on)SH
11 /Times-Roman AF
49304 XM
(slot\051 are)43 W
6120 53750 MT
(recursively removed.)
114 W( As)
504 W( with)115 W
10 /Courier AF
20255 XM
(remove-component)SH
11 /Times-Roman AF
(, interactors that have the same name as)115 W
/Times-Italic SF
48520 XM
(interactor)SH
/Times-Roman SF
6120 54946 MT
(are removed from instances of)129 W
/Times-Italic SF
20416 XM
(gadget)SH
/Times-Roman SF
(. \050This)
533 W( will only have an effect if, in an instance of)129 W
/Times-Italic SF
47904 XM
(gadget)SH
/Times-Roman SF
(, the)128 W
6120 56142 MT
(default inherited interactor has been overridden or replaced by a different one.\051)SH
/Times-BoldItalic SF
6120 58440 MT
(Note:)SH
/Times-Roman SF
8913 XM
(Since a call to)14 W
10 /Courier AF
15445 XM
(remove-interactor)SH
11 /Times-Roman AF
25935 XM
(will deactivate the interactor, be sure to set the)15 W
10 /Courier AF
46840 XM
(:active)SH
11 /Times-Roman AF
51330 XM
(slot)SH
6120 59636 MT
(appropriately if the interactor is subsequently added to a gadget.)SH
12 /Times-Bold AF
6120 62600 MT
(1.7.2.5. Take-Default-Component)SH
10 /Courier AF
6120 63796 MT
(opal:Take-Default-Component)SH
11 /Times-Italic AF
22595 XM
(gadget name)SH
/Times-Roman SF
28521 XM
([)SH
/Times-Italic SF
(destroy?)SH
/Times-Roman SF
(])SH
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
6120 66094 MT
(This function removes a local component named by)59 W
/Times-Italic SF
29686 XM
(name)SH
/Times-Roman SF
(, e.g.)59 W
10 /Courier AF
34598 XM
(:box)SH
11 /Times-Roman AF
(, and replaces it with an instance of)58 W
6120 67290 MT
(the corresponding component in)44 W
/Times-Italic SF
20777 XM
(gadget)SH
/Times-Roman SF
('s prototype.  The removed component is destroyed if and only if)45 W
6120 68486 MT
(the optional)SH
/Times-Italic SF
11620 XM
(destroy)SH
/Times-Roman SF
15133 XM
(argument is not NIL.)SH
6120 70784 MT
(The placement of the new component is inherited)
434 W( as well as the component itself.  As with)433 W
10 /Courier AF
6120 71980 MT
(add-component)SH
11 /Times-Roman AF
(, ``inherited position'' is not well defined when)
73 W( the structure of)74 W
/Times-Italic SF
42769 XM
(gadget)SH
/Times-Roman SF
46112 XM
(does not match)74 W
ES
%%Page: 325 30
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.7)
SH( Manipulating)
1800 W( Gadgets Procedurally)SH
51386 XM
(Page 325)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(the structure of its prototype.  The algorithm for choosing the position)
141 W( is as follows:  If the prototype)140 W
8280 9151 MT
(component is the first one, then the instance becomes the first component of)18 W
/Times-Italic SF
42300 XM
(gadget)SH
/Times-Roman SF
(. Otherwise,)
311 W( a locator)19 W
8280 10347 MT
(\050see)SH
10 /Courier AF
10384 XM
(add-component)SH
11 /Times-Roman AF
(\051 is found in the prototype such that the locator is ``)59 W
10 /Courier AF
(:in-front)SH
11 /Times-Roman AF
('' of the prototype)59 W
8280 11543 MT
(component. If)
733 W( this locator has an instance in)229 W
/Times-Italic SF
30319 XM
(gadget)SH
/Times-Roman SF
(, the instance is used as a locator)
229 W( in a call to)230 W
10 /Courier AF
8280 12739 MT
(add-component)SH
11 /Times-Roman AF
(, with the)33 W
/Times-Italic SF
20579 XM
(position)SH
/Times-Roman SF
24433 XM
(parameter being)32 W
10 /Courier AF
31887 XM
(:in-front)SH
11 /Times-Roman AF
(. If)
339 W( the locator does not exist in)32 W
/Times-Italic SF
51811 XM
(gadget)SH
/Times-Roman SF
(,)SH
8280 13935 MT
(then the)SH
/Times-Italic SF
12068 XM
(position)SH
/Times-Roman SF
15889 XM
(used is)SH
10 /Courier AF
19189 XM
(:front)SH
11 /Times-Roman AF
(, so at least any error should become visibly apparent.)SH
8280 16233 MT
(Changes are propagated to instances of)SH
/Times-Italic SF
25750 XM
(gadget)SH
/Times-Roman SF
(.)SH
12 /Times-Bold AF
8280 19917 MT
(1.7.3. Itemized Aggrelist Manipulation)SH
8280 22881 MT
(1.7.3.1. Add-Item)SH
10 /Courier AF
8280 24077 MT
(opal:Add-Item)SH
11 /Times-Italic AF
16355 XM
(aggrelist)SH
/Times-Roman SF
20542 XM
([)SH
/Times-Italic SF
(item)SH
/Times-Roman SF
(] [[)SH
10 /Courier AF
(:where)SH
11 /Times-Roman AF
(])SH
/Times-Italic SF
28416 XM
(position)SH
/Times-Roman SF
32237 XM
([)SH
/Times-Italic SF
(locator)SH
/Times-Roman SF
(] [)SH
10 /Courier AF
(:key)SH
11 /Times-Italic AF
39463 XM
(function-name)SH
/Times-Roman SF
(]])SH
50988 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
8280 26375 MT
(If supplied,)592 W
/Times-Italic SF
14749 XM
(item)SH
/Times-Roman SF
17510 XM
(will be added to the)592 W
10 /Courier AF
29421 XM
(:items)SH
11 /Times-Roman AF
33888 XM
(slot of)592 W
/Times-Italic SF
38128 XM
(aggrelist)SH
/Times-Roman SF
(, and a new)
592 W( instance of)593 W
10 /Courier AF
8280 27571 MT
(:item-prototype-object)SH
11 /Times-Roman AF
21795 XM
(will be added to the components of)39 W
/Times-Italic SF
37801 XM
(aggrelist)SH
/Times-Roman SF
(. The)353 W
10 /Courier AF
44640 XM
(add-item)SH
11 /Times-Roman AF
49754 XM
(method will)39 W
8280 28767 MT
(perform the necessary bookkeeping to maintain the appearance of the list.)SH
8280 31065 MT
(It is an error)
22 W( \050actually, a continuable break condition\051 to add an item to an aggrelist whose)23 W
10 /Courier AF
48560 XM
(:items)SH
11 /Times-Roman AF
52458 XM
(slot is)23 W
8280 32261 MT
(constant. To)
275 W( work around this error, consult section 1.2.4.)SH
8280 34559 MT
(The)SH
/Times-Italic SF
10449 XM
(position)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
14729 XM
(locator)SH
/Times-Roman SF
18366 XM
(and)SH
/Times-Italic SF
20412 XM
(function-name)SH
/Times-Roman SF
27224 XM
(arguments can be used to adjust the placement of)183 W
/Times-Italic SF
50772 XM
(item)SH
/Times-Roman SF
53124 XM
(with)SH
8280 35755 MT
(respect to the rest of the items of)SH
/Times-Italic SF
22942 XM
(aggrelist)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
8280 38053 MT
(position)SH
/Times-Roman SF
12101 XM
(can be any of these five values:)SH
10 /Courier AF
11880 39674 MT
(:front)SH
17640 XM
(:back)SH
23400 XM
(:behind)SH
29160 XM
(:in-front)SH
34920 XM
(:at)SH
11 /Times-Roman AF
8280 40870 MT
(or any of the following aliases:)SH
10 /Courier AF
11880 42066 MT
(:tail)SH
17640 XM
(:head)SH
23400 XM
(:before)SH
29160 XM
(:after)SH
34920 XM
(:at)SH
11 /Times-BoldItalic AF
8280 43823 MT
(Note:)SH
/Times-Roman SF
11371 XM
(the graphically)312 W
/Times-Italic SF
18837 XM
(front)SH
/Times-Roman SF
21564 XM
(object is at the)312 W
/Times-Italic SF
29472 XM
(tail)SH
/Times-Roman SF
31527 XM
(of the components list, etc.  If position is either)312 W
10 /Courier AF
8280 45019 MT
(:before)SH
11 /Times-Roman AF
(/)SH
10 /Courier AF
(:behind)SH
11 /Times-Roman AF
17398 XM
(or)SH
10 /Courier AF
18726 XM
(:after)SH
11 /Times-Roman AF
(/)SH
10 /Courier AF
(:in-front)SH
11 /Times-Roman AF
28443 XM
(then the value of)136 W
/Times-Italic SF
36623 XM
(locator)SH
/Times-Roman SF
40212 XM
(should be an item already in the)136 W
10 /Courier AF
8280 46215 MT
(:items)SH
11 /Times-Roman AF
12155 XM
(slot of the aggrelist, in which case)SH
/Times-Italic SF
27429 XM
(item)SH
/Times-Roman SF
29598 XM
(is placed with respect to)SH
/Times-Italic SF
40503 XM
(locator)SH
/Times-Roman SF
(.)SH
8280 48513 MT
(For example, the following line will add a new item to the aggrelist defined in section 1.5.2.5:)SH
10 /Courier AF
10680 49919 MT
(\050opal:add-item MY-AGG "really" :after "is"\051)SH
11 /Times-Roman AF
8280 51456 MT
(The string "really" will be added to)106 W
10 /Courier AF
24797 XM
(my-agg)SH
11 /Times-Roman AF
28778 XM
(with the resulting aggrelist appearing as "This is)
106 W( really an)107 W
8280 52652 MT
(example".)SH
8280 54950 MT
(Furthermore, if the)24 W
10 /Courier AF
16966 XM
(:items)SH
11 /Times-Roman AF
20865 XM
(slot holds a nested list,)24 W
/Times-Italic SF
31253 XM
(:key function-name)24 W
/Times-Roman SF
40034 XM
(can be used to match)23 W
/Times-Italic SF
49648 XM
(locator)SH
/Times-Roman SF
53124 XM
(only)SH
8280 56146 MT
(with the result of)44 W
/Times-Italic SF
16216 XM
(function-name)SH
/Times-Roman SF
22889 XM
(applied to)
44 W( each element of)45 W
10 /Courier AF
34994 XM
(:items)SH
11 /Times-Roman AF
(. For)
365 W( example, if the)45 W
10 /Courier AF
48334 XM
(:items)SH
11 /Times-Roman AF
52254 XM
(slot of)45 W
10 /Courier AF
8280 57342 MT
(an-aggrelist)SH
11 /Times-Roman AF
15755 XM
(is)SH
10 /Courier AF
16764 XM
(\050\050"foo" 4\051 \050"bar" 2\051 \050"foo" 7\051\051)SH
11 /Times-Roman AF
(,)SH
8 /Courier AF
10200 58507 MT
(\050add-item an-aggrelist '\050"foobar" 3\051 :after "foo" :key #'car\051)SH
11 /Times-Roman AF
8280 59928 MT
(will compare "foo" only to the)20 W
10 /Courier AF
22068 XM
(car)SH
11 /Times-Roman AF
(s of the list,)
20 W( and therefore will add the new item as the second element)19 W
8280 61124 MT
(of the list.  The line)SH
8 /Courier AF
10200 62289 MT
(\050add-item an-aggrelist '\050"barfoo" 5\051 :before 7 :key #'cadr\051)SH
11 /Times-Roman AF
8280 63710 MT
(will add the new item just before the last one.)SH
/Times-BoldItalic SF
8280 66008 MT
(Note:)SH
10 /Courier AF
11081 XM
(add-item)SH
11 /Times-Roman AF
16178 XM
(will add)
22 W( the item at the most reasonable position if the specified position does not exist.)23 W
8280 67204 MT
(For example, if)128 W
10 /Courier AF
15690 XM
(add-item)SH
11 /Times-Roman AF
20893 XM
(is asked to add a component after another one that does not exist, the new)127 W
8280 68400 MT
(component will be added at the tail.)SH
ES
%%Page: 326 31
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 326)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
12 /Times-Bold AF
6120 8004 MT
(1.7.3.2. Remove-Item)SH
10 /Courier AF
6120 9200 MT
(opal:Remove-Item)SH
11 /Times-Italic AF
15995 XM
(aggrelist)SH
/Times-Roman SF
20182 XM
([)SH
/Times-Italic SF
(item)SH
/Times-Roman SF
22717 XM
([)SH
10 /Courier AF
(:key)SH
11 /Times-Italic AF
25758 XM
(function-name)SH
/Times-Roman SF
(]])SH
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
6120 11498 MT
(The method)SH
10 /Courier AF
11680 XM
(remove-item)SH
11 /Times-Roman AF
18555 XM
(removes)SH
/Times-Italic SF
22556 XM
(item)SH
/Times-Roman SF
24725 XM
(from the)SH
10 /Courier AF
28757 XM
(:items)SH
11 /Times-Roman AF
32632 XM
(list and the)SH
10 /Courier AF
37735 XM
(:components)SH
11 /Times-Roman AF
44610 XM
(list of)SH
/Times-Italic SF
47422 XM
(aggrelist)SH
/Times-Roman SF
(.)SH
6120 13796 MT
(It is an error)
22 W( \050actually, a continuable break condition\051 to add an item to an aggrelist whose)23 W
10 /Courier AF
46400 XM
(:items)SH
11 /Times-Roman AF
50298 XM
(slot is)23 W
6120 14992 MT
(constant. To)
275 W( work around this error, consult section 1.2.4.)SH
6120 17290 MT
(If the)24 W
10 /Courier AF
8794 XM
(:items)SH
11 /Times-Roman AF
12693 XM
(slot holds a nested list,)23 W
/Times-Italic SF
23076 XM
(:key function-name)23 W
/Times-Roman SF
31856 XM
(can be used to specify to try to match)23 W
/Times-Italic SF
48772 XM
(item)SH
/Times-Roman SF
50964 XM
(only)SH
6120 18486 MT
(with the result of)44 W
/Times-Italic SF
14056 XM
(function-name)SH
/Times-Roman SF
20729 XM
(applied to)
44 W( each element of)45 W
10 /Courier AF
32834 XM
(:items)SH
11 /Times-Roman AF
(. For)
365 W( example, if the)45 W
10 /Courier AF
46174 XM
(:items)SH
11 /Times-Roman AF
50094 XM
(slot of)45 W
10 /Courier AF
6120 19682 MT
(an-aggrelist)SH
11 /Times-Roman AF
13595 XM
(is)SH
10 /Courier AF
14604 XM
(\050\050"foo" 4\051 \050"bar" 2\051 \050"foo" 7\051\051)SH
11 /Times-Roman AF
(,)SH
8 /Courier AF
8040 20847 MT
(\050remove-item AN-AGGRELIST "foo" :key #'car\051)SH
11 /Times-Roman AF
6120 22268 MT
(removes the first item, while)SH
8 /Courier AF
8040 23433 MT
(\050remove-item AN-AGGRELIST '\050"foo" 7\051\051)SH
11 /Times-Roman AF
6120 24854 MT
(removes the last one.)SH
12 /Times-Bold AF
6120 27818 MT
(1.7.3.3. Remove-Nth-Item)SH
10 /Courier AF
6120 29014 MT
(opal:Remove-Nth-Item)SH
11 /Times-Italic AF
18395 XM
(aggrelist n)SH
/Times-Roman SF
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
9 SS 
44743 30949 MT
(th)SH
11 SS 
6120 31312 MT
(To remove an item by position rather than by content,)
39 W( use)38 W
10 /Courier AF
32269 XM
(remove-nth-item)SH
11 /Times-Roman AF
(. The)351 W
/Times-Italic SF
44193 XM
(n)SH
/Times-Roman SF
45756 XM
(item is removed)38 W
6120 32508 MT
(from the)36 W
10 /Courier AF
10224 XM
(:items)SH
11 /Times-Roman AF
14135 XM
(slot of)36 W
/Times-Italic SF
17263 XM
(aggrelist)SH
/Times-Roman SF
(, and the component corresponding to that)
36 W( item will be removed during)37 W
6120 33704 MT
(the next call to)SH
10 /Courier AF
12902 XM
(opal:update)SH
11 /Times-Roman AF
(.)SH
6120 36002 MT
(It is an error to add an item to an aggrelist whose)101 W
10 /Courier AF
29142 XM
(:items)SH
11 /Times-Roman AF
33118 XM
(slot is constant.  To work around this error,)100 W
6120 37198 MT
(consult section 1.2.4.)SH
12 /Times-Bold AF
6120 40162 MT
(1.7.3.4. Change-Item)SH
11 /Times-Roman AF
6120 41358 MT
(To change just one item in the)SH
10 /Courier AF
19715 XM
(:items)SH
11 /Times-Roman AF
23590 XM
(list, call)SH
10 /Courier AF
6120 43656 MT
(opal:Change-Item)SH
11 /Times-Italic AF
15995 XM
(aggrelist item n)SH
/Times-Roman SF
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
6120 45954 MT
(where)SH
/Times-Italic SF
9108 XM
(aggrelist)SH
/Times-Roman SF
13322 XM
(is the aggrelist to)
27 W( be modified,)28 W
/Times-Italic SF
27144 XM
(item)SH
/Times-Roman SF
29341 XM
(is a new value for the)28 W
10 /Courier AF
39221 XM
(:items)SH
11 /Times-Roman AF
43124 XM
(list, and)28 W
/Times-Italic SF
46939 XM
(n)SH
/Times-Roman SF
47792 XM
(is the index)28 W
6120 47150 MT
(of the item to be changed \050the index of the first item is zero\051.)SH
6120 49448 MT
(This function is potentially more efficient than calling)54 W
10 /Courier AF
30626 XM
(add-item)SH
11 /Times-Roman AF
35755 XM
(and)SH
10 /Courier AF
37671 XM
(remove-item)SH
11 /Times-Roman AF
(, because it ensures)53 W
6120 50644 MT
(that the component corresponding to the changed item will be reused if possible, instead)
122 W( of destroying)123 W
6120 51840 MT
(and reallocating a new component.)SH
12 /Times-Bold AF
6120 54804 MT
(1.7.3.5. Replace-Item-Prototype-Object)SH
10 /Courier AF
6120 56000 MT
(opal:Replace-Item-Prototype-Object)SH
11 /Times-Italic AF
26795 XM
(aggrelist item-proto)SH
/Times-Roman SF
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
6120 58298 MT
(This function is used to replace the)194 W
10 /Courier AF
23149 XM
(:item-prototype-object)SH
11 /Times-Roman AF
36818 XM
(slot of an itemized aggrelist.)
194 W( Any)662 W
6120 59494 MT
(aggrelists which inherit the slot)
3 W( from this one will also be affected.  The components of affected aggrelists)4 W
6120 60690 MT
(are replaced with instances of the new)SH
10 /Courier AF
23191 XM
(:item-prototype-object)SH
11 /Times-Roman AF
(.)SH
6120 62988 MT
(For example, suppose an application uses a number of instances of radio buttons,)
27 W( an aggrelist whose item)26 W
6120 64184 MT
(prototype object determines the appearance of a)
1305 W( single button.  By calling)1306 W
10 /Courier AF
6120 65380 MT
(replace-item-prototype-object)SH
11 /Times-Roman AF
24285 XM
(on the radio buttons prototype,)
490 W( all button throughout the)489 W
6120 66576 MT
(application will change to reflect the new style.)SH
ES
%%Page: 327 32
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.7)
SH( Manipulating)
1800 W( Gadgets Procedurally)SH
51386 XM
(Page 327)SH
46800 50 8280 4486 UL
12 /Times-Bold AF
8280 8004 MT
(1.7.4. Ordinary Aggrelist Manipulation)SH
8280 10968 MT
(1.7.4.1. Add-Component)SH
11 /Times-Roman AF
8280 12164 MT
(The)SH
10 /Courier AF
10280 XM
(add-component)SH
11 /Times-Roman AF
(, defined in section 1.7.2.1 can)
15 W( also be used to add components to an aggrelist.  The)16 W
8280 13360 MT
(system automatically adjusts the appearance of the aggrelist)
129 W( to accommodate the changes in the list of)128 W
8280 14556 MT
(components.)SH
8280 16854 MT
(In addition to adding)538 W
/Times-Italic SF
19904 XM
(graphical-object)SH
/Times-Roman SF
28049 XM
(to)SH
/Times-Italic SF
29718 XM
(aggrelist)SH
/Times-Roman SF
(,)SH
10 /Courier AF
34718 XM
(add-component)SH
11 /Times-Roman AF
43331 XM
(will add some slots)
538 W( to)539 W
/Times-Italic SF
8280 18050 MT
(graphical-object)SH
/Times-Roman SF
(, or modify existing slots.  The slots created or modified by)SH
10 /Courier AF
41948 XM
(add-component)SH
11 /Times-Roman AF
50023 XM
(are:)SH
10 /Courier AF
10480 20126 MT
(:left, :top)133 W
11 /Times-Roman AF
17621 XM
(\261 Unless the)133 W
10 /Courier AF
23732 XM
(:direction)SH
11 /Times-Roman AF
30139 XM
(slot of)132 W
/Times-Italic SF
33459 XM
(aggrelist)SH
/Times-Roman SF
37778 XM
(is NIL, the system will set these slots)132 W
13780 21322 MT
(with integers that arrange)SH
/Times-Italic SF
25264 XM
(graphical-object)SH
/Times-Roman SF
32871 XM
(neatly in the layout of the aggrelist components.)SH
10 /Courier AF
10480 23017 MT
(:rank)SH
11 /Times-Roman AF
13829 XM
(\261 This slot is set with)
74 W( a number that indicates the position of this component in the list \050the)75 W
13780 24213 MT
(head has rank 0\051.  If this component is not visible, then this value has no meaning.)SH
10 /Courier AF
10480 25908 MT
(:prev)SH
11 /Times-Roman AF
13755 XM
(\261 This contains the previous component in the list, regardless of what is visible.)SH
10 /Courier AF
10480 27603 MT
(:next)SH
11 /Times-Roman AF
13755 XM
(\261 This contains the next component in the list, regardless of what is visible.)SH
/Times-BoldItalic SF
8280 29901 MT
(Note:)SH
10 /Courier AF
11059 XM
(add-components)SH
11 /Times-Roman AF
19734 XM
(\050plural\051 can be used to add several components to an aggrelist.)SH
8280 32199 MT
(An alternative implementation)
10 W( of figure 1-25 is shown in figure 1-28.  In each component of the aggrelist,)9 W
8280 33395 MT
(the)SH
10 /Courier AF
9906 XM
(:left)SH
11 /Times-Roman AF
13188 XM
(and)SH
10 /Courier AF
15058 XM
(:top)SH
11 /Times-Roman AF
17740 XM
(slots have been left undefined.  The aggrelist will fill these slots)
7 W( with the appropriate)8 W
8280 34591 MT
(values automatically.)SH
8 /Courier AF
10200 36286 MT
(\050create-instance 'MY-AGG opal:aggrelist \050:top 10\051 \050:left 10\051\051)SH
10200 37151 MT
(\050create-instance 'MY-RECT opal:rectangle)SH
11640 38016 MT
(\050:width 100\051 \050:height 30\051\051)SH
10200 38881 MT
(\050create-instance 'MY-OVAL opal:oval)SH
11640 39746 MT
(\050:width 100\051 \050:height 30\051\051)SH
10200 40611 MT
(\050create-instance 'MY-ROUND opal:roundtangle)SH
11640 41476 MT
(\050:width 100\051 \050:height 30\051\051)SH
10200 42341 MT
(\050add-components MY-AGG MY-RECT MY-OVAL MY-ROUND\051)SH
11 /Times-Bold AF
8280 44958 MT
(Figure 1-28:)SH
/Times-Roman SF
14603 XM
(Example of an aggrelist built using add-component.)SH
12 /Times-Bold AF
8280 47922 MT
(1.7.4.2. Remove-Component)SH
11 /Times-Roman AF
8280 49118 MT
(See section 1.7.2.2 for a description of this method.)SH
/Times-Bold SF
8280 51416 MT
(Useful hint:)116 W
/Times-Roman SF
14318 XM
(It is possible to make components of an aggrelist)
116 W( temporarily disappear by simply setting)115 W
8280 52612 MT
(their)SH
10 /Courier AF
10595 XM
(:visible)SH
11 /Times-Roman AF
15695 XM
(slot to NIL \261 the list will adjust itself so that there is no gap where the item once was.  If)25 W
8280 53808 MT
(a gap is desired, then an)555 W
10 /Courier AF
22453 XM
(opal:null-object)SH
11 /Times-Roman AF
32883 XM
(may be inserted into the list \261 this is)
555 W( an)554 W
10 /Courier AF
8280 55004 MT
(opal:view-object)SH
11 /Times-Roman AF
18155 XM
(that has its)SH
10 /Courier AF
23136 XM
(:visible)SH
11 /Times-Roman AF
28211 XM
(slot set to T, but has no draw method.)SH
12 /Times-Bold AF
8280 57968 MT
(1.7.4.3. Remove-Nth-Component)SH
10 /Courier AF
8280 60612 MT
(opal:Remove-Nth-Component)SH
11 /Times-Italic AF
23555 XM
(aggrelist n)SH
/Times-Roman SF
50988 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
9 SS 
11043 62547 MT
(th)SH
11 SS 
8280 62910 MT
(The)SH
/Times-Italic SF
10493 XM
(n)SH
/Times-Roman SF
12247 XM
(component of)229 W
/Times-Italic SF
19059 XM
(aggrelist)SH
/Times-Roman SF
23475 XM
(is removed by invoking)229 W
10 /Courier AF
35085 XM
(remove-local-component)SH
11 /Times-Roman AF
(. Instances)
733 W( of)229 W
/Times-Italic SF
8280 64106 MT
(aggrelist)SH
/Times-Roman SF
12467 XM
(are)SH
/Times-Italic SF
14084 XM
(not)SH
/Times-Roman SF
15765 XM
(affected.)SH
12 /Times-Bold AF
8280 67790 MT
(1.7.5. Local Modification)SH
11 /Times-Roman AF
8280 68986 MT
(A number of functions exist to modify gadgets without changing their instances.  Their)
224 W( behavior is)223 W
8280 70182 MT
(exactly like the corresponding recursive version)
38 W( described earlier, except that changes are not propagated)39 W
8280 71378 MT
(to instances.)SH
ES
%%Page: 328 33
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 328)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
/Courier SF
6120 7955 MT
(opal:Add-Local-Component)SH
11 /Times-Italic AF
20795 XM
(gadget element)SH
/Times-Roman SF
27759 XM
([[)SH
10 /Courier AF
(:where)SH
11 /Times-Roman AF
(])SH
/Times-Italic SF
32732 XM
(position)SH
/Times-Roman SF
36553 XM
([)SH
/Times-Italic SF
(locator)SH
/Times-Roman SF
(]])SH
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
10 /Courier AF
6120 10253 MT
(opal:Remove-Local-Component)SH
11 /Times-Italic AF
22595 XM
(gadget element)SH
/Times-Roman SF
29559 XM
([)SH
/Times-Italic SF
30200 XM
(destroy?)SH
/Times-Roman SF
34263 XM
(])SH
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
10 /Courier AF
6120 12551 MT
(opal:Add-Local-Interactor)SH
11 /Times-Italic AF
21395 XM
(gadget interactor)SH
/Times-Roman SF
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
10 /Courier AF
6120 14849 MT
(opal:Remove-Local-Interactor)SH
11 /Times-Italic AF
23195 XM
(gadget interactor)SH
/Times-Roman SF
31139 XM
([)SH
/Times-Italic SF
(destroy?)SH
/Times-Roman SF
(])SH
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
10 /Courier AF
6120 17147 MT
(opal:Add-Local-Item)SH
11 /Times-Italic AF
17795 XM
(aggrelist)SH
/Times-Roman SF
21982 XM
([)SH
/Times-Italic SF
(item)SH
/Times-Roman SF
(] [[)SH
10 /Courier AF
(:where)SH
11 /Times-Roman AF
(])SH
/Times-Italic SF
29856 XM
(position)SH
/Times-Roman SF
33677 XM
([)SH
/Times-Italic SF
(locator)SH
/Times-Roman SF
(] [)SH
10 /Courier AF
(:key)SH
11 /Times-Italic AF
40903 XM
(function-name)SH
/Times-Roman SF
(]])SH
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
10 /Courier AF
6120 19445 MT
(opal:Remove-Local-Item)SH
11 /Times-Italic AF
19595 XM
(aggrelist)SH
/Times-Roman SF
23782 XM
([)SH
/Times-Italic SF
(item)SH
/Times-Roman SF
26317 XM
([)SH
10 /Courier AF
(:key)SH
11 /Times-Italic AF
29358 XM
(function-name)SH
/Times-Roman SF
(]])SH
48828 XM
([)SH
/Times-Italic SF
(Method)SH
/Times-Roman SF
(])SH
14 /Times-Bold AF
6120 23263 MT
(1.8. Reading and Writing Aggregadgets and Aggrelists)SH
11 /Times-Roman AF
6120 24459 MT
(An aggregadget or aggrelist may)
59 W( be written to a file.  This creates a compilable lisp program that can be)58 W
6120 25655 MT
(reloaded to recreate the object)
100 W( that was saved.  To save an aggregadget, use the)101 W
10 /Courier AF
42720 XM
(opal:write-gadget)SH
11 /Times-Roman AF
6120 26851 MT
(function:)SH
12 /Times-Bold AF
6120 30535 MT
(1.8.1. Write-Gadget)SH
10 /Courier AF
6120 33179 MT
(opal:Write-Gadget)SH
11 /Times-Italic AF
16595 XM
(gadget file-name)SH
/Times-Roman SF
24293 XM
(&optional)SH
/Times-Italic SF
29030 XM
(initialize?)SH
/Times-Roman SF
48216 XM
([)SH
/Times-Italic SF
(Function)SH
/Times-Roman SF
(])SH
6120 35477 MT
(where)SH
/Times-Italic SF
9119 XM
(gadget)SH
/Times-Roman SF
12426 XM
(is a graphical object, an aggregadget or)
38 W( an aggrelist \050or a list of these\051, and)37 W
/Times-Italic SF
46064 XM
(file-name)SH
/Times-Roman SF
50530 XM
(is the)37 W
6120 36673 MT
(file name \050a string\051 to be written, or)121 W
10 /Courier AF
23064 XM
(t)SH
11 /Times-Roman AF
24061 XM
(to write to)122 W
10 /Courier AF
29224 XM
(*standard-output*)SH
11 /Times-Roman AF
(. If)
519 W( several calls are made to)122 W
10 /Courier AF
6120 37869 MT
(write-gadget)SH
11 /Times-Roman AF
13679 XM
(to output a sequence of)
84 W( gadgets to the same stream, set the)83 W
/Times-Italic SF
40674 XM
(initialize?)SH
/Times-Roman SF
45434 XM
(flag to NIL after)83 W
6120 39065 MT
(the first call.  The default value of)SH
/Times-Italic SF
21361 XM
(initialize?)SH
/Times-Roman SF
26038 XM
(is T.)SH
6120 41363 MT
(If the gadget has any references to gadgets that are not)
230 W( part of the standard set of Opal objects or)231 W
6120 42559 MT
(Interactors, then a warning is printed.)SH
/Times-BoldItalic SF
23133 XM
(Note:)SH
/Times-Italic SF
25912 XM
(gadget)SH
/Times-Roman SF
29181 XM
(must not be a symbol or list of symbols:)SH
8 /Courier AF
8040 43772 MT
(\050write-gadget \050list BUTTON SLIDER\051 "misc.lisp"\051)SH
/Times-Italic SF
31560 XM
(; RIGHT!)SH
/Courier SF
8040 44637 MT
(\050write-gadget '\050BUTTON SLIDER\051 "misc.lisp"\051)SH
/Times-Italic SF
31560 XM
(; WRONG!)SH
11 /Times-Roman AF
6120 46935 MT
(Slots that are ordinarily created)
211 W( automatically are not written by)210 W
10 /Courier AF
36632 XM
(write-gadget)SH
11 /Times-Roman AF
(. For)
695 W( example, the)210 W
10 /Courier AF
6120 48131 MT
(:is-a-inv)SH
11 /Times-Roman AF
11923 XM
(slot \050maintained by KR\051 and the)128 W
10 /Courier AF
27111 XM
(:update-slots-values)SH
11 /Times-Roman AF
39514 XM
(slot \050maintained by Opal\051 are)129 W
6120 49327 MT
(not written.  The slots to ignore are found in the)288 W
10 /Courier AF
30612 XM
(:do-not-dump-slots)SH
11 /Times-Roman AF
41975 XM
(slot, which is normally)287 W
6120 50523 MT
(inherited. In)
547 W( some cases, it may be)
136 W( desirable to suppress the output of certain slots, e.g. bookkeeping)137 W
6120 51719 MT
(information, and this can be done by setting)SH
10 /Courier AF
25703 XM
(:do-not-dump-slots)SH
11 /Times-Roman AF
36778 XM
(as follows:)SH
8 /Courier AF
8040 52932 MT
(\050s-value)SH
/Times-Italic SF
12360 XM
(my-proto)SH
/Courier SF
12360 53797 MT
(:do-not-dump-slots)SH
12360 54662 MT
(\050append)SH
/Times-Italic SF
16200 XM
(list-of-slots)SH
/Courier SF
20277 XM
(\050gv)SH
/Times-Italic SF
22197 XM
(my-proto)SH
/Courier SF
25609 XM
(:do-not-dump-slots\051\051\051)SH
11 /Times-Roman AF
6120 56083 MT
(Do not destructively modify)55 W
10 /Courier AF
19050 XM
(:do-not-dump-slots)SH
11 /Times-Roman AF
(! Putting)
385 W( the slot name)55 W
10 /Courier AF
40691 XM
(:do-not-dump-slots)SH
11 /Times-Roman AF
51820 XM
(on)SH
6120 57279 MT
(the list will prevent the)143 W
10 /Courier AF
17254 XM
(:do-not-dump-slots)SH
11 /Times-Roman AF
28473 XM
(slot from being written.  This is probably not a good)144 W
6120 58475 MT
(idea, since if the object is written and reloaded, the local)SH
10 /Courier AF
31197 XM
(:do-not-dump-slots)SH
11 /Times-Roman AF
42272 XM
(information will be lost.)SH
12 /Times-Bold AF
6120 61439 MT
(1.8.1.1. Avoiding Deeply Nested Parts Slots)SH
11 /Times-Roman AF
6120 62635 MT
(One would expect an instance of a standard gadget \050see the)28 W
/Times-Italic SF
32722 XM
(Garnet Gadgets Reference Manual)27 W
/Times-Roman SF
(\051 to have a)27 W
6120 63831 MT
(very concise output representation; however, once the)
135 W( instance is manipulated, various slots are set by)136 W
6120 65027 MT
(interactors. Often,)
1229 W( these slots are deeply nested in the gadget structure, and)
477 W( the output has)476 W
6120 66223 MT
(correspondingly deeply nested)151 W
10 /Courier AF
20288 XM
(:parts)SH
11 /Times-Roman AF
24314 XM
(slots. This)
577 W( is a consequence of the fact)
151 W( that Garnet maintains)152 W
6120 67419 MT
(little separation between the gadget definition and local state information.)SH
6120 69717 MT
(One solution is to carefully install slot names on the)72 W
10 /Courier AF
30000 XM
(:do-not-dump-slots)SH
11 /Times-Roman AF
41146 XM
(slot to suppress the output)71 W
6120 70913 MT
(of slots for which the default inherited value)
86 W( is acceptable.  Another, more drastic, solution is to set the)87 W
ES
%%Page: 329 34
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.8)
SH( Reading)
1800 W( and Writing Aggregadgets and Aggrelists)SH
51386 XM
(Page 329)SH
46800 50 8280 4486 UL
/Courier SF
8280 7955 MT
(:do-not-dump-objects)SH
11 /Times-Roman AF
20555 XM
(slot in selected objects.  This slot may have one of three values:)SH
/Symbol SF
10249 9533 MT
(\267)SH
/Times-Roman SF
11030 XM
(NIL \261 The default; write out all slots and parts that differ from the prototype.)SH
/Symbol SF
10249 11427 MT
(\267)SH
10 /Courier AF
11030 XM
(:me)SH
11 /Times-Roman AF
13299 XM
(\261 Assume that all components)
194 W( and interactors are inherited without modification, so)193 W
11030 12623 MT
(there is no need to write)32 W
10 /Courier AF
22096 XM
(:parts)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
26278 XM
(:interactors)SH
11 /Times-Roman AF
(, or)32 W
10 /Courier AF
35283 XM
(:item-prototype)SH
11 /Times-Roman AF
44591 XM
(slots at this level.)33 W
11030 13819 MT
(Other slots, such as)SH
10 /Courier AF
19859 XM
(:left)SH
11 /Times-Roman AF
23134 XM
(and)SH
10 /Courier AF
24997 XM
(:top)SH
11 /Times-Roman AF
27672 XM
(should be written.)SH
/Symbol SF
10249 15713 MT
(\267)SH
10 /Courier AF
11030 XM
(:children)SH
11 /Times-Roman AF
(\261 Write out)83 W
10 /Courier AF
21963 XM
(:parts)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
26195 XM
(:interactors)SH
11 /Times-Roman AF
33752 XM
(and)SH
10 /Courier AF
35697 XM
(:item-prototype)SH
11 /Times-Roman AF
45054 XM
(slots, but do not)82 W
11030 16909 MT
(allow further nesting.  This is equivalent to setting the)183 W
10 /Courier AF
36906 XM
(:do-not-dump-objects)SH
11 /Times-Roman AF
49365 XM
(slot of)184 W
11030 18105 MT
(each component, interactor, and the item-prototype to)SH
10 /Courier AF
34947 XM
(:me)SH
11 /Times-Roman AF
(.)SH
12 /Times-Bold AF
8280 21069 MT
(1.8.1.2. More Details)SH
11 /Times-Roman AF
8280 22265 MT
(The)SH
10 /Courier AF
10312 XM
(write-gadget)SH
11 /Times-Roman AF
17834 XM
(function makes no attempt to write out)
47 W( objects that are needed as prototypes or that)46 W
8280 23461 MT
(are referenced by formulas.  It is)
115 W( the user's responsibility to make sure these objects are loaded before)116 W
8280 24657 MT
(loading a gadget; otherwise, an ``unbound symbol'' error is)
72 W( likely to occur.  If the)71 W
/Times-Italic SF
45672 XM
(gadget)SH
/Times-Roman SF
49012 XM
(argument is a)71 W
8280 25853 MT
(list, then each aggregadget or aggrelist of the list is written in sequence to the file.)SH
8280 28151 MT
(To load a gadget after it has been written, the standard lisp loader \050)SH
10 /Courier AF
(load)SH
11 /Times-Roman AF
(\051 should be used.)SH
8280 30449 MT
(When an aggregadget is written that uses a function to create parts \050see section 1.2.10\051, the)
58 W( created parts)59 W
8280 31645 MT
(are written explicitly and in full, as opposed to simply writing out the original)239 W
10 /Courier AF
46120 XM
(:parts)SH
11 /Times-Roman AF
50233 XM
(slot. This)751 W
8280 32841 MT
(guarantees that any modifications to the aggregadget after it was created will be correctly written.)SH
10 /Courier AF
8280 35139 MT
(opal:*verbose-write-gadget*)SH
11 /Times-Roman AF
50498 XM
([)SH
/Times-Italic SF
(Variable)SH
/Times-Roman SF
(])SH
8280 37437 MT
(If)SH
10 /Courier AF
9480 XM
(*verbose-write-gadget*)SH
11 /Times-Roman AF
23148 XM
(is non-NIL, objects will be printed)
193 W( to)194 W
10 /Courier AF
41121 XM
(*error-output*)SH
11 /Times-Roman AF
49990 XM
(as they are)194 W
8280 38633 MT
(visited by)9 W
10 /Courier AF
12882 XM
(write-gadget)SH
11 /Times-Roman AF
(. Indentation)
293 W( indicates the level of)
9 W( the object in the aggregate hierarchy.)8 W
/Times-BoldItalic SF
52576 XM
(Note:)SH
/Times-Roman SF
8280 39829 MT
(objects will be printed even if, due to inheritance, nothing needs to be written.)SH
12 /Times-Bold AF
8280 42793 MT
(1.8.1.3. Writing to Streams)SH
11 /Times-Roman AF
8280 43989 MT
(The)SH
10 /Courier AF
10358 XM
(write-gadget)SH
11 /Times-Roman AF
17927 XM
(function can be used as is for simple applications, but it is sometimes desirable to)94 W
8280 45185 MT
(write a header to a file and perhaps embed code written by)129 W
10 /Courier AF
35848 XM
(write-gadget)SH
11 /Times-Roman AF
43452 XM
(into a function definition.)128 W
8280 46381 MT
(This is done by temporarily re-binding)SH
10 /Courier AF
25572 XM
(*standard-output*)SH
11 /Times-Roman AF
36047 XM
(as in the following example:)SH
8 /Courier AF
10200 47546 MT
(\050with-open-file \050*standard-output* "my-file.lisp")SH
18360 48411 MT
(:direction :output :if-exists :supersede\051)SH
/Times-Italic SF
12120 49276 MT
(;; write header to standard output:)SH
/Courier SF
12120 50141 MT
(\050format T "... file header info goes here ..."\051)SH
/Times-Italic SF
12120 51006 MT
(;; write a gadget:)SH
/Courier SF
12120 51871 MT
(\050write-gadget my-gadget t\051)SH
/Times-Italic SF
12120 52736 MT
(;; if there are more gadgets, call with initialize? set to NIL:)SH
/Courier SF
12120 53601 MT
(\050write-gadget another-gadget T NIL\051\051)SH
12 /Times-Bold AF
8280 56565 MT
(1.8.1.4. References to External Objects)SH
11 /Times-Roman AF
8280 57761 MT
(Gadgets may contain references to ``external objects'', that is, objects that are not part of the)
159 W( gadget.)160 W
8280 58957 MT
(When an external object is written, A warning)
43 W( is ordinarily printed to notify the user that the object must)42 W
8280 60153 MT
(be present when the gadget code is loaded.)SH
10 /Courier AF
8280 62451 MT
(opal:*standard-names*)SH
11 /Times-Roman AF
50498 XM
([)SH
/Times-Italic SF
(Variable)SH
/Times-Roman SF
(])SH
8280 64749 MT
(Many objects, including standard Opal objects, standard Interactors, and objects in the)
160 W( Garnet Gadget)161 W
8280 65945 MT
(library, are considered part of the Garnet environment, so no warning is written for these references.)
26 W( The)325 W
8280 67141 MT
(list)SH
10 /Courier AF
9968 XM
(*standard-names*)SH
11 /Times-Roman AF
19911 XM
(tells)SH
10 /Courier AF
22088 XM
(write-gadget)SH
11 /Times-Roman AF
29631 XM
(what object symbols to assume will be defined when the)68 W
8280 68337 MT
(gadget is loaded.  This list can be extended with new new names before calling)SH
10 /Courier AF
43346 XM
(write-gadget)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
8280 70635 MT
(opal:*defined-names*)SH
11 /Times-Roman AF
50498 XM
([)SH
/Times-Italic SF
(Variable)SH
/Times-Roman SF
(])SH
ES
%%Page: 330 35
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 330)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(The global variable)584 W
10 /Courier AF
16699 XM
(*defined-names*)SH
11 /Times-Roman AF
26558 XM
(is initialized to)584 W
10 /Courier AF
35125 XM
(*standard-names*)SH
11 /Times-Roman AF
45584 XM
(when you call)583 W
10 /Courier AF
6120 9151 MT
(write-gadget)SH
11 /Times-Roman AF
(. As)
361 W( gadgets are written, their names are pushed)
43 W( onto)44 W
10 /Courier AF
37650 XM
(*defined-names*)SH
11 /Times-Roman AF
(, so if a list of)44 W
6120 10347 MT
(gadgets is written)
116 W( and the second references the first, no warning will be printed.)115 W
10 /Courier AF
43920 XM
(*defined-names*)SH
11 /Times-Roman AF
6120 11543 MT
(\050not)SH
10 /Courier AF
8167 XM
(*standard-names*)SH
11 /Times-Roman AF
(\051 is what)SH
10 /Courier AF
21830 XM
(write-gadgets)SH
11 /Times-Roman AF
29905 XM
(actually searches to see if a name is defined.)SH
10 /Courier AF
6120 13841 MT
(opal:*required-names*)SH
11 /Times-Roman AF
48338 XM
([)SH
/Times-Italic SF
(Variable)SH
/Times-Roman SF
(])SH
6120 16139 MT
(The variable)188 W
10 /Courier AF
12298 XM
(*required-names*)SH
11 /Times-Roman AF
22361 XM
(is initialized to NIL when)
188 W( you call)189 W
10 /Courier AF
39047 XM
(write-gadget)SH
11 /Times-Roman AF
(. Whenever)
653 W( a)189 W
6120 17335 MT
(name is written that is not on)39 W
10 /Courier AF
19440 XM
(*defined-names*)SH
11 /Times-Roman AF
(, it is pushed)
39 W( onto)38 W
10 /Courier AF
36701 XM
(*required-names*)SH
11 /Times-Roman AF
46614 XM
(and a warning)38 W
6120 18531 MT
(is printed.)
41 W( Inspecting)
359 W( the value of)42 W
10 /Courier AF
21687 XM
(*required-names*)SH
11 /Times-Roman AF
31604 XM
(after calling)42 W
10 /Courier AF
37246 XM
(write-gadget)SH
11 /Times-Roman AF
44763 XM
(can give the caller)42 W
6120 19727 MT
(information about what additional gadgets should be saved.)SH
6120 22025 MT
(The initialization of)199 W
10 /Courier AF
15730 XM
(*defined-names*)SH
11 /Times-Roman AF
25204 XM
(and)SH
10 /Courier AF
27266 XM
(*required-names*)SH
11 /Times-Roman AF
37340 XM
(is suppressed when the)198 W
/Times-Italic SF
48518 XM
(initialize?)SH
/Times-Roman SF
6120 23221 MT
(argument to)SH
10 /Courier AF
11680 XM
(write-gadget)SH
11 /Times-Roman AF
19155 XM
(is set to NIL.)SH
12 /Times-Bold AF
6120 26185 MT
(1.8.1.5. References to Graphic Qualities)SH
11 /Times-Roman AF
6120 27381 MT
(A reference to an)241 W
10 /Courier AF
14960 XM
(opal:graphic-quality)SH
11 /Times-Roman AF
27476 XM
(object is handled as a special case.  Graphic)
241 W( qualities)242 W
6120 28577 MT
(include)SH
10 /Courier AF
11293 XM
(opal:filling-style)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
24303 XM
(opal:line-style)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
35513 XM
(opal:color)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
43723 XM
(opal:font)SH
11 /Times-Roman AF
(, and)1659 W
10 /Courier AF
6120 29773 MT
(opal:font-from-file)SH
11 /Times-Roman AF
(. Although)
849 W( these are objects, they are treated more like record structures)288 W
6120 30969 MT
(throughout the Garnet system.  For example,)
92 W( changing a slot in a graphic quality will not automatically)91 W
6120 32165 MT
(cause an update; only replacing a graphic quality with a new one \050or faking it with a call to)377 W
10 /Courier AF
6120 33361 MT
(kr:mark-as-changed)SH
11 /Times-Roman AF
(\051 will cause the update.)SH
6120 35659 MT
(Because of the way graphic qualities are used, it is best to think of graphic qualities as values rather than)42 W
6120 36855 MT
(shared objects.  Consequently,)905 W
10 /Courier AF
23426 XM
(write-gadget)SH
11 /Times-Roman AF
31806 XM
(writes out graphic qualities by calling)905 W
10 /Courier AF
6120 38051 MT
(create-instance)SH
11 /Times-Roman AF
15464 XM
(to construct an equivalent object rather than by writing an external reference that is)69 W
6120 39247 MT
(likely to be undefined when the file is loaded.)SH
6120 41545 MT
(For example, here is a rectangle with a special color, and the output generated by)SH
10 /Courier AF
42069 XM
(write-gadget)SH
11 /Times-Roman AF
(:)SH
8 /Courier AF
8040 42710 MT
(\050create-instance 'MY-RED RED)SH
9480 43575 MT
(\050:red 0.5\051\051)SH
8040 45305 MT
(\050create-instance 'MY-RECT RECTANGLE)SH
9480 46170 MT
(\050:color my-red\051\051)SH
8040 47900 MT
(* \050write-gadget MY-RECT T\051)SH
8040 48765 MT
(\050create-instance 'MY-RECT RECTANGLE)SH
9480 49630 MT
(\050:COLOR \050create-instance NIL COLOR)SH
14760 50495 MT
(\050:BLUE 0.0\051)SH
14760 51360 MT
(\050:GREEN 0.0\051)SH
14760 52225 MT
(\050:RED 0.5\051\051\051\051)SH
12 /Times-Bold AF
6120 55189 MT
(1.8.1.6. Saving References From Within Formulas)SH
11 /Times-Roman AF
6120 56385 MT
(Writing direct references from within)434 W
10 /Courier AF
25058 XM
(o-formula)SH
11 /Times-Roman AF
('s to other objects is not possible \050in a lisp)435 W
6120 57581 MT
(implementation-independent way\051 because)65 W
10 /Courier AF
25466 XM
(o-formula)SH
11 /Times-Roman AF
31206 XM
(builds a closure,)
65 W( and bindings within the closure)64 W
6120 58777 MT
(are not externally visible.  For example, in)SH
8 /Courier AF
8040 59942 MT
(\050let \050\050thermometer THERMOMETER-1\051\051)SH
9000 60807 MT
(\050o-formula \050gv thermometer :temperature\051\051\051)SH
11 /Times-Roman AF
6120 62228 MT
(the variable)18 W
/Times-Italic SF
11592 XM
(thermometer)SH
/Times-Roman SF
17505 XM
(is bound)
18 W( inside the)19 W
10 /Courier AF
26136 XM
(let)SH
11 /Times-Roman AF
28230 XM
(and is not accessible to any routine that would write the)19 W
6120 63424 MT
(formula. Even)
447 W( though the expression)86 W
10 /Courier AF
23407 XM
(\050gv thermometer :temperature\051)86 W
11 /Times-Roman AF
41340 XM
(is saved in the formula)
86 W( in)85 W
6120 64620 MT
(the current KR implementation, this does not reveal the binding needed to reconstruct the formula.)SH
6120 66918 MT
(Fortunately, aggregadgets and aggrelists rarely make direct references to objects.  Typically, references)
15 W( to)16 W
6120 68114 MT
(objects take the form of paths in formulas,)
4 W( for example,)3 W
10 /Courier AF
30899 XM
(\050gvl :parent :box :left\051)3 W
11 /Times-Roman AF
(. However,)
281 W( there)3 W
6120 69310 MT
(may be occasions when a)
96 W( direct reference is required, for example, when an aggregadget depends upon)97 W
6120 70506 MT
(the value of some separate application object.)SH
ES
%%Page: 331 36
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.9)
SH( More)
1800 W( Examples)SH
51386 XM
(Page 331)SH
46800 50 8280 4486 UL
11 SS 
8280 7955 MT
(There are several ways to avoid problems associated with direct references from formulas:)SH
/Symbol SF
10249 9533 MT
(\267)SH
/Times-Roman SF
11030 XM
(Use)SH
10 /Courier AF
13153 XM
(formula)SH
11 /Times-Roman AF
17766 XM
(instead of)138 W
10 /Courier AF
22624 XM
(o-formula)SH
11 /Times-Roman AF
(. The)551 W
10 /Courier AF
31248 XM
(formula)SH
11 /Times-Roman AF
35861 XM
(function interprets its expression, so)138 W
11030 10729 MT
(expressions with embedded references can be constructed at run-time.)
209 W( For)
695 W( example, the)210 W
11030 11925 MT
(thermometer example could be written as:)SH
8 /Courier AF
12950 13090 MT
(\050formula `\050gv ',thermometer :temperature\051\051)SH
11 /Times-Roman AF
11030 14511 MT
(embedding the actual reference directly)
81 W( into the expression.  This expression can be written)80 W
11030 15707 MT
(and read back in without problems.  However,)
191 W( since formula expressions are interpreted,)192 W
11030 16903 MT
(re-evaluation of the formula will be much slower than the corresponding o-formula.)SH
/Symbol SF
10249 18797 MT
(\267)SH
/Times-Roman SF
11030 XM
(Put the object reference into a slot, avoiding)
134 W( direct references altogether.  For example, to)133 W
11030 19993 MT
(create a dependency on the)267 W
10 /Courier AF
24549 XM
(:temperature)SH
11 /Times-Roman AF
32292 XM
(slot of object THERMOMETER-1, set the)268 W
10 /Courier AF
11030 21189 MT
(:thermometer)SH
11 /Times-Roman AF
18631 XM
(slot of the gadget to THERMOMETER-1, and)
126 W( reference the slot from the)125 W
11030 22385 MT
(formula:)SH
8 /Courier AF
12950 23550 MT
(\050o-formula \050gvl :thermometer :temperature\051\051)SH
11 /Times-Roman AF
11030 24971 MT
(Since the reference to THERMOMETER-1 is now a slot value rather)
74 W( than a hidden binding)75 W
11030 26167 MT
(in a closure, it can be written and read back in without problems.  The only performance)153 W
11030 27363 MT
(penalty of this approach will be the extra slot access,)
71 W( which should not add much overhead.)72 W
11030 28559 MT
(There is, however, the added problem of)
16 W( choosing slot names so as not to interfere with other)15 W
11030 29755 MT
(formulas.)SH
14 /Times-Bold AF
8280 33573 MT
(1.9. More Examples)SH
12 SS 
8280 37257 MT
(1.9.1. A Customizable Check-Box)SH
11 /Times-Roman AF
8280 38453 MT
(Figure 1-29 shows the definition of a)
221 W( check-box whose position and size can be determined by the)222 W
8280 39649 MT
(programmer when it is used as a prototype object.)SH
8280 41947 MT
(The)SH
10 /Courier AF
10267 XM
(:parts)SH
11 /Times-Roman AF
14144 XM
(slot defines the)2 W
10 /Courier AF
21085 XM
(:box)SH
11 /Times-Roman AF
23762 XM
(object as an)
2 W( instance of)1 W
10 /Courier AF
34306 XM
(opal:rectangle)SH
11 /Times-Roman AF
42982 XM
(with coordinates dependent)1 W
8280 43143 MT
(on the parent aggregadget.  Similarly, the)302 W
10 /Courier AF
28875 XM
(:mark)SH
11 /Times-Roman AF
32452 XM
(object is an)302 W
10 /Courier AF
38643 XM
(opal:aggregadget)SH
11 /Times-Roman AF
48821 XM
(itself, and its)303 W
8280 44339 MT
(components are dependent on slots in the top-level aggregadget.)SH
8280 46637 MT
(Two instances of CHECK-BOX are created \261 the first one using the default values for)
6 W( the coordinates and)5 W
8280 47833 MT
(the second one using both default and custom coordinates.  Both are pictured in figure 1-30.)SH
12 /Times-Bold AF
8280 51517 MT
(1.9.2. Hierarchical Implementation of a Customizable Check-Box)SH
11 /Times-Roman AF
8280 52713 MT
(Figure 1-31 shows the definition of a customizable check-box as in figure 1-29.  However,)
107 W( this second)108 W
8280 53909 MT
(CHECK-BOX definition exploits the hierarchical structure of the check box to modularize)
59 W( the definition)58 W
8280 55105 MT
(of the)
46 W( schema.  The modular style allows for the reuse of previously defined code \261 the CHECK-MARK)47 W
8280 56301 MT
(schema may now be used for other applications as well.)SH
12 /Times-Bold AF
8280 59985 MT
(1.9.3. Menu Aggregadget with built-in interactor, using Aggrelists)SH
11 /Times-Roman AF
8280 61181 MT
(The figure)
48 W( 1-33 shows how to create a menu aggregadget, by using itemized aggrelist to create the items)47 W
8280 62377 MT
(of the menu.  This example also shows how to attach an interactor to such an object.  The menu is made)51 W
8280 63573 MT
(of four parts: a frame, a shadow, a feedback and an items-agg,)
50 W( which is an aggrelist containing the items)49 W
8280 64769 MT
(of the menu.  Each item is an instance)
58 W( of the prototype)59 W
10 /Courier AF
33265 XM
(menu-item)SH
11 /Times-Roman AF
(. The)
393 W( items are created according to)59 W
8280 65965 MT
(the labels and notify-functions given in the)83 W
10 /Courier AF
28016 XM
(:items)SH
11 /Times-Roman AF
31974 XM
(slot of the menu. The)
83 W( menu also contains a built-in)82 W
8280 67161 MT
(interactor which, when activated, will call the functions associated to the selected item.)SH
8280 69459 MT
(The figure 1-34 shows how to create an instance)
3 W( of the menu. A picture of these menus \050the prototype and)4 W
8280 70655 MT
(its instance\051 is shown in figure 1-32.)SH
ES
%%Page: 332 37
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 332)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
8 /Courier AF
8040 7699 MT
(\050create-instance 'CHECK-BOX opal:aggregadget)SH
9480 8564 MT
(\050:left 20\051)SH
9480 9429 MT
(\050:top 20\051)SH
9480 10294 MT
(\050:width 50\051)SH
9480 11159 MT
(\050:height 50\051)SH
9480 12024 MT
(\050:parts)SH
9960 12889 MT
(`\050\050:box ,opal:rectangle)SH
12360 13754 MT
(\050:left ,\050o-formula \050gvl :parent :left\051\051\051)SH
12360 14619 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
12360 15484 MT
(\050:width ,\050o-formula \050gvl :parent :width\051\051\051)SH
12360 16349 MT
(\050:height ,\050o-formula \050gvl :parent :height\051\051\051\051)SH
10920 17214 MT
(\050:mark ,opal:aggregadget)SH
12360 18079 MT
(\050:parts)SH
12840 18944 MT
(\050\050:left-line ,opal:line)SH
14760 19809 MT
(\050:x1 ,\050o-formula \050+ \050gvl :parent :parent :left\051)SH
18120 20674 MT
(\050floor \050gvl :parent :parent :width\051 10\051\051\051\051)SH
14760 21539 MT
(\050:y1 ,\050o-formula \050+ \050gvl :parent :parent :top\051)SH
18120 22404 MT
(\050floor \050gvl :parent :parent :height\051 2\051\051\051\051)SH
14760 23269 MT
(\050:x2 ,\050o-formula \050+ \050gvl :parent :parent :left\051)SH
18120 24134 MT
(\050floor \050gvl :parent :parent :width\051 2\051\051\051\051)SH
14760 24999 MT
(\050:y2 ,\050o-formula \050+ \050gvl :parent :parent :top\051)SH
18120 25864 MT
(\050floor \050* \050gvl :parent :parent :height\051 9\051)SH
21480 26729 MT
(10\051\051\051\051)SH
14760 27594 MT
(\050:line-style ,opal:line-2\051\051)SH
12840 28459 MT
(\050:right-line ,opal:line)SH
14760 29324 MT
(\050:x1 ,\050o-formula)SH
18120 30189 MT
(\050opal:gvl-sibling :left-line :x2\051\051\051)SH
14760 31054 MT
(\050:y1 ,\050o-formula)SH
18120 31919 MT
(\050opal:gvl-sibling :left-line :y2\051\051\051)SH
14760 32784 MT
(\050:x2 ,\050o-formula \050+ \050gvl :parent :parent :left\051)SH
18120 33649 MT
(\050floor \050* \050gvl :parent :parent :width\051 9\051)SH
21480 34514 MT
(10\051\051\051\051)SH
14760 35379 MT
(\050:y2 ,\050o-formula \050+ \050gvl :parent :parent :top\051)SH
18120 36244 MT
(\050floor \050gvl :parent :parent :height\051 10\051\051\051\051)SH
14760 37109 MT
(\050:line-style ,opal:line-2\051\051\051\051\051\051\051\051)SH
8040 38839 MT
(\050create-instance 'CB1 CHECK-BOX\051)SH
8040 40569 MT
(\050create-instance 'CB2 CHECK-BOX \050:left 90\051 \050:width 100\051 \050:height 60\051\051)SH
11 /Times-Bold AF
6120 42321 MT
(Figure 1-29:)SH
/Times-Roman SF
12443 XM
(The definition of a customizable check-box.)SH
75 100 0 6570 76967 GB 
%%BeginDocument: aggregadgets/agg-custom-cb.ps
%!PS-Adobe-2.0
%%Title: Opal 11
%%Creator: Make-PS-File -- Garnet Version 2.0.alpha
%%CreationDate: Apr 28, 1992, 8:08 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 201 346 411 446
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
129 -274 translate
gsave
0 648 210 100 ClipToRectangle
0 0 translate
gsave
20 628 50 50 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
0 0 0 0 false 0 0 [] 2 45 583 25 603 DrawLine
0 0 0 0 false 0 0 [] 2 65 623 45 583 DrawLine
90 628 100 60 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
0 0 0 0 false 0 0 [] 2 140 574 100 598 DrawLine
0 0 0 0 false 0 0 [] 2 180 622 140 574 DrawLine
grestore

grestore

0 648 210 100 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 201 346 411 446

%%EndDocument
 GE /Times-Bold SF
6120 53965 MT
(Figure 1-30:)SH
/Times-Roman SF
12443 XM
(Instances of the customizable check-box.)SH
ES
%%Page: 333 38
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 1.9)
SH( More)
1800 W( Examples)SH
51386 XM
(Page 333)SH
46800 50 8280 4486 UL
8 /Courier AF
10200 7699 MT
(\050create-instance 'CHECK-MARK opal:aggregadget)SH
11160 8564 MT
(\050:parts)SH
11640 9429 MT
(`\050\050:left-line ,opal:line)SH
13080 10294 MT
(\050:x1 ,\050o-formula \050+ \050gvl :parent :parent :left\051)SH
22680 11159 MT
(\050floor \050gvl :parent :parent :width\051 10\051\051\051\051)SH
13080 12024 MT
(\050:y1 ,\050o-formula \050+ \050gvl :parent :parent :top\051)SH
22680 12889 MT
(\050floor \050gvl :parent :parent :height\051 2\051\051\051\051)SH
13080 13754 MT
(\050:x2 ,\050o-formula \050+ \050gvl :parent :parent :left\051)SH
22680 14619 MT
(\050floor \050gvl :parent :parent :width\051 2\051\051\051\051)SH
13080 15484 MT
(\050:y2 ,\050o-formula \050+ \050gvl :parent :parent :top\051)SH
22680 16349 MT
(\050floor \050* \050gvl :parent :parent :height\051 9\051 10\051\051\051\051)SH
13080 17214 MT
(\050:line-style ,opal:line-2\051\051)SH
12600 18079 MT
(\050:right-line ,opal:line)SH
13080 18944 MT
(\050:x1 ,\050o-formula \050opal:gvl-sibling :left-line :x2\051\051\051)SH
13080 19809 MT
(\050:y1 ,\050o-formula \050opal:gvl-sibling :left-line :y2\051\051\051)SH
13080 20674 MT
(\050:x2 ,\050o-formula \050+ \050gvl :parent :parent :left\051)SH
22680 21539 MT
(\050floor \050* \050gvl :parent :parent :width\051 9\051 10\051\051\051\051)SH
13080 22404 MT
(\050:y2 ,\050o-formula \050+ \050gvl :parent :parent :top\051)SH
22680 23269 MT
(\050floor \050gvl :parent :parent :height\051 10\051\051\051\051)SH
13080 24134 MT
(\050:line-style ,opal:line-2\051\051\051\051\051)SH
10200 25864 MT
(\050create-instance 'CHECK-BOX opal:aggregadget)SH
11160 26729 MT
(\050:left 20\051)SH
11160 27594 MT
(\050:top 20\051)SH
11160 28459 MT
(\050:width 50\051)SH
11160 29324 MT
(\050:height 50\051)SH
11160 30189 MT
(\050:parts)SH
11640 31054 MT
(`\050\050:box ,opal:rectangle)SH
13080 31919 MT
(\050:left ,\050o-formula \050gvl :parent :left\051\051\051)SH
13080 32784 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
13080 33649 MT
(\050:width ,\050o-formula \050gvl :parent :width\051\051\051)SH
13080 34514 MT
(\050:height ,\050o-formula \050gvl :parent :height\051\051\051\051)SH
12600 35379 MT
(\050:mark ,check-mark\051\051\051\051)SH
11 /Times-Bold AF
8280 37131 MT
(Figure 1-31:)SH
/Times-Roman SF
14603 XM
(A hierarchical implementation of a customizable check-box.)SH
75 100 0 8730 72527 GB 
%%BeginDocument: aggregadgets/agg-list-item-menu.PS
%!PS-Adobe-2.0
%%Title: Opal 22
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 2, 1992, 3:49 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 216 336 396 456
%%%Pages: 1
%%EndComments


/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
144 -264 translate
gsave
0 648 180 120 ClipToRectangle
0 0 translate
gsave
28 620 42 79 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
20 628 42 79 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRectangle
31 624 613 20 14 0 false 0 0 0 false 0 0 0 false (Cut) 12 /Courier DrawText
27 605 594 27 14 0 false 0 0 0 false 0 0 0 false (Copy) 12 /Courier DrawText
24 586 575 34 14 0 false 0 0 0 false 0 0 0 false (Paste) 12 /Courier DrawText
27 567 556 27 14 0 false 0 0 0 false 0 0 0 false (Undo) 12 /Courier DrawText
108 620 49 60 0 0 0 0 false 0 0 [] 1 0.50 0 0 0 false DrawRectangle
100 628 49 60 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRectangle
110 624 613 28 14 0 false 0 0 0 false 0 0 0 false (Read) 12 /Courier DrawText
111 605 594 26 14 0 false 0 0 0 false 0 0 0 false (Save) 12 /Courier DrawText
104 586 575 41 14 0 false 0 0 0 false 0 0 0 false (Cancel) 12 /Courier DrawText
grestore

grestore

0 648 180 120 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 216 336 396 456

%%EndDocument
 GE /Times-Bold SF
8280 49079 MT
(Figure 1-32:)SH
/Times-Roman SF
14603 XM
(The two menus \050prototype and instance\051 made with itemized aggrelist.)SH
ES
%%Page: 334 39
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 334)
SH( Aggregadgets)830 W
41650 XM
(Aggregadgets Chapter)
1550 W( 1)SH
46800 50 6120 4486 UL
8 /Courier AF
8040 7699 MT
(\050defun my-cut \050\051 \050format T "~%Function CUT called~%"\051\051)SH
8040 8564 MT
(\050defun my-copy \050\051 \050format T "~%Function COPY called~%"\051\051)SH
8040 9429 MT
(\050defun my-paste \050\051 \050format T "~%Function PASTE called~%"\051\051)SH
8040 10294 MT
(\050defun my-undo \050\051 \050format T "~%Function UNDO called~%"\051\051)SH
8040 12024 MT
(\050create-instance 'MENU-ITEM opal:text)SH
9480 12889 MT
(\050:string \050o-formula \050car \050nth \050gvl :rank\051 \050gvl :parent :items\051\051\051\051\051)SH
9480 13754 MT
(\050:action \050o-formula \050cadr \050nth \050gvl :rank\051)SH
24360 14619 MT
(\050gvl :parent :items\051\051\051\051\051\051)SH
8040 16349 MT
(\050create-instance 'MENU opal:aggregadget)SH
9480 17214 MT
(\050:left 20\051 \050:top 20\051)SH
9480 18079 MT
(\050:items '\050\050"Cut" \050my-cut\051\051 \050"Copy" \050my-copy\051\051)SH
14280 18944 MT
(\050"Paste" \050my-paste\051\051 \050"Undo" \050my-undo\051\051\051\051)SH
9480 19809 MT
(\050:parts)SH
9960 20674 MT
(`\050\050:shadow ,opal:rectangle)SH
11880 21539 MT
(\050:filling-style ,opal:gray-fill\051)SH
11880 22404 MT
(\050:left ,\050o-formula \050+ \050gvl :parent :frame :left\051 8\051\051\051)SH
11880 23269 MT
(\050:top ,\050o-formula \050+ \050gvl :parent :frame :top\051 8\051\051\051)SH
11880 24134 MT
(\050:width ,\050o-formula \050gvl :parent :frame :width\051\051\051)SH
11880 24999 MT
(\050:height ,\050o-formula \050gvl :parent :frame :height\051\051\051\051)SH
10920 25864 MT
(\050:frame ,opal:rectangle)SH
11880 26729 MT
(\050:filling-style ,opal:white-fill\051)SH
11880 27594 MT
(\050:left ,\050o-formula \050gvl :parent :left\051\051\051)SH
11880 28459 MT
(\050:top ,\050o-formula \050gvl :parent :top\051\051\051)SH
11880 29324 MT
(\050:width ,\050o-formula \050+ \050gvl :parent :items-agg :width\051 8\051\051\051)SH
11880 30189 MT
(\050:height ,\050o-formula \050+ \050gvl :parent :items-agg :height\051 8\051\051\051\051)SH
10920 31054 MT
(\050:feedback ,opal:rectangle)SH
11880 31919 MT
(\050:left ,\050o-formula \050- \050gvl :obj-over :left\051 2\051\051\051)SH
11880 32784 MT
(\050:top ,\050o-formula \050- \050gvl :obj-over :top\051 2\051\051\051)SH
11880 33649 MT
(\050:width ,\050o-formula \050+ \050gvl :obj-over :width\051 4\051\051\051)SH
11880 34514 MT
(\050:height ,\050o-formula \050+ \050gvl :obj-over :height\051 4\051\051\051)SH
11880 35379 MT
(\050:visible ,\050o-formula \050gvl :obj-over\051\051\051)SH
11880 36244 MT
(\050:draw-function :xor\051\051)SH
10920 37109 MT
(\050:items-agg ,opal:aggrelist)SH
11880 37974 MT
(\050:fixed-width-p T\051)SH
11880 38839 MT
(\050:h-align :center\051)SH
11880 39704 MT
(\050:left ,\050o-formula \050+ \050gvl :parent :left\051 4\051\051\051)SH
11880 40569 MT
(\050:top ,\050o-formula \050+ \050gvl :parent :top\051 4\051\051\051)SH
11880 41434 MT
(\050:items ,\050o-formula \050gvl :parent :items\051\051\051)SH
11880 42299 MT
(\050:item-prototype ,menu-item\051\051\051\051)SH
9480 43164 MT
(\050:interactors)SH
9960 44029 MT
(`\050\050:press ,inter:menu-interactor)SH
11880 44894 MT
(\050:window ,\050o-formula \050gv-local :self :operates-on :window\051\051\051)SH
11880 45759 MT
(\050:start-where ,\050o-formula \050list :element-of)SH
19560 46624 MT
(\050gvl :operates-on :items-agg\051\051\051\051)SH
11880 47489 MT
(\050:feedback-obj ,\050o-formula \050gvl :operates-on :feedback\051\051\051)SH
11880 48354 MT
(\050:final-function)SH
12840 49219 MT
(,#'\050lambda \050interactor final-obj-over\051)SH
15720 50084 MT
(\050eval \050gv final-obj-over :action\051\051\051\051\051\051\051\051)SH
11 /Times-Bold AF
6120 51836 MT
(Figure 1-33:)SH
/Times-Roman SF
12443 XM
(Definition of a menu with built-in interactor and itemized aggrelist.)SH
8 /Courier AF
8040 53531 MT
(\050defun my-read \050\051 \050format T "~%Function READ called~%"\051\051)SH
8040 54396 MT
(\050defun my-save \050\051 \050format T "~%Function SAVE called~%"\051\051)SH
8040 55261 MT
(\050defun my-cancel \050\051 \050format T "~%Function CANCEL called~%"\051\051)SH
8040 56991 MT
(\050create-instance 'MY-MENU MENU)SH
9480 57856 MT
(\050:left 100\051 \050:top 20\051)SH
9480 58721 MT
(\050:items '\050\050"Read" \050my-read\051\051 \050"Save" \050my-save\051\051)SH
14280 59586 MT
(\050"Cancel" \050my-cancel\051\051\051\051\051)SH
11 /Times-Bold AF
6120 61338 MT
(Figure 1-34:)SH
/Times-Roman SF
12443 XM
(Creation of an instance of MENU.)SH
ES
%%Page: 335 40
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 2.1)
SH( Using)
1800 W( Aggregraphs)SH
51386 XM
(Page 335)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(2. Aggregraphs)SH
11 /Times-Roman AF
8280 10524 MT
(The purpose of Aggregraphs is to allow the easy creation)
14 W( and manipulation of graph objects, analogous to)13 W
8280 11720 MT
(the creation and manipulation of lists by Aggrelists.)
196 W( In)
668 W( addition to the standard)197 W
10 /Courier AF
46195 XM
(aggregraph)SH
11 /Times-Roman AF
(, Opal)197 W
8280 12916 MT
(provides the)40 W
10 /Courier AF
14042 XM
(scalable-aggregraph)SH
11 /Times-Roman AF
25757 XM
(which will fit inside dimensions supplied by the programmer,)
40 W( and)39 W
8280 14112 MT
(the)SH
10 /Courier AF
10038 XM
(scalable-aggregraph-image)SH
11 /Times-Roman AF
25452 XM
(which changes appearance in response to)
139 W( changes in the original)140 W
8280 15308 MT
(graph.)SH
14 /Times-Bold AF
8280 19126 MT
(2.1. Using Aggregraphs)SH
11 /Times-Roman AF
8280 20322 MT
(In order)
70 W( to generate an aggregraph from a source graph, the source graph must be described by defining)69 W
8280 21518 MT
(its roots \050a graph may have more than one root\051 and a function to generate children)
97 W( from parent nodes.)98 W
8280 22714 MT
(When the aggregraph is initialized, the generating)
207 W( function is first called on the root\050s\051, then on the)206 W
8280 23910 MT
(children of the roots, and so on.  For each)29 W
/Times-Italic SF
27142 XM
(source-node)SH
/Times-Roman SF
32882 XM
(in the original graph,)
29 W( a new)30 W
/Times-Italic SF
45430 XM
(graph-node)SH
/Times-Roman SF
50867 XM
(is created)30 W
8280 25106 MT
(and added to the aggregraph.  Graphical links)
405 W( are also created which connect the graph-nodes)404 W
8280 26302 MT
(appropriately. The)
346 W( layout function \050which can be specified by the user\051 is then called to layout the graph)36 W
8280 27498 MT
(in a)
49 W( pleasing manner.  The resulting aggregraph instance can then be displayed and manipulated like any)48 W
8280 28694 MT
(other Garnet object.)SH
8280 30992 MT
(Although most)
119 W( programmers will be satisfied with the graphs generated by the default layout function,)120 W
8280 32188 MT
(section 2.5 contains)
69 W( a discussion of how to customize the function used to compute the locations for the)68 W
8280 33384 MT
(nodes in the graph.)SH
8280 35682 MT
(See the file)SH
10 /Courier AF
13503 XM
(demo-graph.lisp)SH
11 /Times-Roman AF
22778 XM
(for a complete interface that uses many features of aggregraphs.)SH
12 /Times-Bold AF
8280 39366 MT
(2.1.1. Accessing Aggregraphs)SH
11 /Times-Roman AF
8280 40562 MT
(The aggregraph files are not automatically loaded)
88 W( when the file)89 W
10 /Courier AF
37324 XM
(garnet-loader.lisp)SH
11 /Times-Roman AF
48488 XM
(is used to load)89 W
1406 50 19624 40762 UL
8280 41758 MT
(Garnet. There)
881 W( is a)
303 W( separate file called)302 W
10 /Courier AF
27647 XM
(aggregraphs-loader.lisp)SH
11 /Times-Roman AF
42024 XM
(that is used to load all the)302 W
8280 42954 MT
(aggregraphs files.  This file is loaded when the line)SH
8 /Courier AF
10200 44119 MT
(\050load Garnet-Aggregraphs-Loader\051)SH
11 /Times-Roman AF
8280 45540 MT
(is executed after Garnet has been loaded with)SH
10 /Courier AF
28558 XM
(garnet-loader.lisp)SH
11 /Times-Roman AF
(.)SH
8280 47838 MT
(Aggregraphs reside in the)201 W
10 /Courier AF
20690 XM
(Opal)SH
11 /Times-Roman AF
23567 XM
(package. We)
679 W( recommend that programmers explicitly reference the)202 W
10 /Courier AF
8280 49034 MT
(Opal)SH
11 /Times-Roman AF
10987 XM
(package when creating instances of aggregraphs, as in)31 W
10 /Courier AF
35330 XM
(opal:aggregraph)SH
11 /Times-Roman AF
(. However,)
337 W( the package)31 W
8280 50230 MT
(name may be dropped if the line)SH
8 /Courier AF
10200 51395 MT
(\050use-package 'opal\051)SH
11 /Times-Roman AF
8280 52816 MT
(is executed before referring to any object in that package.)SH
12 /Times-Bold AF
8280 56500 MT
(2.1.2. Overview)SH
11 /Times-Roman AF
8280 57696 MT
(In general, programmers will)
112 W( be able to ignore most of the aggregraph slots described in the following)113 W
8280 58892 MT
(sections, since they are used to customize the)
125 W( layout function of the aggregraph.  However, three slots)124 W
8280 60088 MT
(must be set before before any aggregraph can be initialized:)SH
/Symbol SF
10249 61666 MT
(\267)SH
10 /Courier AF
11030 XM
(:children-function)SH
11 /Times-Roman AF
22225 XM
(-- This slot should)
120 W( contain a function that generates a list of child)121 W
11030 62862 MT
(nodes from a parent node.  The function takes the parameters)SH
8 /Courier AF
12950 64027 MT
(\050lambda \050source-node depth\051\051)SH
11 /Times-Roman AF
11030 65448 MT
(where)SH
/Times-Italic SF
14287 XM
(depth)SH
/Times-Roman SF
17302 XM
(is a number maintained internally)
296 W( by aggregraphs that corresponds to the)295 W
11030 66644 MT
(distance of the)
3 W( current node from the root, and)4 W
/Times-Italic SF
31772 XM
(source-node)SH
/Times-Roman SF
37487 XM
(is an object in the source graph to)4 W
11030 67840 MT
(be expanded.  The function should)
83 W( return a list of the children of)82 W
/Times-Italic SF
40753 XM
(source-node)SH
/Times-Roman SF
46546 XM
(in the source)82 W
11030 69036 MT
(graph, or NIL to indicate the node either has no)
101 W( children or should not be expanded \050when)102 W
11030 70232 MT
(depth > 1, for example\051.)SH
ES
%%Page: 336 41
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 336)
SH( Aggregadgets)830 W
42039 XM
(Aggregraphs Chapter)
1550 W( 2)SH
46800 50 6120 4486 UL
11 /Symbol AF
8089 8080 MT
(\267)SH
10 /Courier AF
8870 XM
(:info-function)SH
11 /Times-Roman AF
17545 XM
(-- The function in this slot should take the parameter)SH
8 /Courier AF
10790 9245 MT
(\050lambda \050source-node\051\051)SH
11 /Times-Roman AF
8870 10666 MT
(where)SH
/Times-Italic SF
11879 XM
(source-node)SH
/Times-Roman SF
17638 XM
(is an object in the source graph.  It should return a string associated)
48 W( with)47 W
8870 11862 MT
(the)SH
/Times-Italic SF
10784 XM
(source-node)SH
/Times-Roman SF
16790 XM
(so that a label can be)
295 W( placed on its corresponding graph node in the)296 W
8870 13058 MT
(aggregraph. \050If)
703 W( the node-prototype is customized by the programmer, then this function)214 W
8870 14254 MT
(might return some other identifying object instead of a string.\051)
134 W( The)
545 W( value returned by the)135 W
8870 15450 MT
(function is stored in the)SH
10 /Courier AF
19533 XM
(:info)SH
11 /Times-Roman AF
22808 XM
(slot of the graph node.)SH
/Symbol SF
8089 17344 MT
(\267)SH
10 /Courier AF
8870 XM
(:source-roots)SH
11 /Times-Roman AF
16945 XM
(-- A list of roots in the source graph.)SH
/Times-Bold SF
6120 19642 MT
(Caveats:)SH
/Times-Roman SF
6120 21940 MT
(The source nodes must be distinguishable)
63 W( by one of the tests)62 W
10 /Courier AF
33722 XM
(#'eq)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
36734 XM
(#'eql)SH
11 /Times-Roman AF
(, or)62 W
10 /Courier AF
41599 XM
(#'equal)SH
11 /Times-Roman AF
(. The)
399 W( default is)62 W
10 /Courier AF
6120 23136 MT
(#'eql)SH
11 /Times-Roman AF
(. \050Refer)
275 W( to the)SH
10 /Courier AF
15778 XM
(:test-to-distinguish-source-nodes)SH
11 /Times-Roman AF
35853 XM
(slot in section 2.2.\051)SH
6120 25434 MT
(Instances of aggregraphs can be used as prototypes for other aggregraphs without providing values for all)27 W
6120 26630 MT
(the required slots in the prototype.)SH
12 /Times-Bold AF
6120 30314 MT
(2.1.3. Aggregraph Nodes)SH
11 /Times-Roman AF
6120 31510 MT
(Each type of aggregraph has its own type of node and link prototypes.  For the)242 W
10 /Courier AF
44785 XM
(aggregraph)SH
11 /Times-Roman AF
(, the)241 W
6120 32706 MT
(prototypes are)545 W
10 /Courier AF
13746 XM
(aggregraph-node-prototype)SH
11 /Times-Roman AF
29566 XM
(and)SH
10 /Courier AF
31974 XM
(aggregraph-link-prototype)SH
11 /Times-Roman AF
(, which)
545 W( are)546 W
6120 33902 MT
(defined in the slots)19 W
10 /Courier AF
14812 XM
(:node-prototype)SH
11 /Times-Roman AF
24106 XM
(and)SH
10 /Courier AF
25988 XM
(:link-prototype)SH
11 /Times-Roman AF
(. To)
313 W( change the look)
19 W( of the nodes or the)18 W
6120 35098 MT
(links in an aggregraph, the programmer will need to)
48 W( define new prototype objects in these slots.  Section)49 W
6120 36294 MT
(2.1.5 contains an example aggregraph schema that modifies the node prototype.)SH
6120 38592 MT
(The node and link prototypes for)848 W
10 /Courier AF
25932 XM
(scalable-aggregraph)SH
11 /Times-Roman AF
38455 XM
(are)SH
10 /Courier AF
40920 XM
(scalable-aggregraph-)SH
6120 39788 MT
(node-prototype)SH
11 /Times-Roman AF
14963 XM
(and)SH
10 /Courier AF
16994 XM
(scalable-aggregraph-link-prototype)SH
11 /Times-Roman AF
(. The)
611 W( prototypes for)168 W
10 /Courier AF
47520 XM
(scalable-)SH
6120 40984 MT
(aggregraph-image)SH
11 /Times-Roman AF
16938 XM
(are)SH
10 /Courier AF
19498 XM
(scalable-aggregraph-image-node-prototype)SH
11 /Times-Roman AF
44715 XM
(and)SH
10 /Courier AF
47520 XM
(scalable-)SH
6120 42180 MT
(aggregraph-image-link-prototype)SH
11 /Times-Roman AF
(.)SH
6120 44478 MT
(The actual nodes and links of)
236 W( the aggregraph are kept in "sub-aggregates" of the aggregraph.  The)237 W
6120 45674 MT
(aggregates in the)39 W
10 /Courier AF
13964 XM
(:nodes)SH
11 /Times-Roman AF
17878 XM
(and)SH
10 /Courier AF
19780 XM
(:links)SH
11 /Times-Roman AF
23694 XM
(slots of the top-level)
39 W( aggregraph have the nodes and links as their)38 W
6120 46870 MT
(components. To)
970 W( access the individual links and nodes, look at the)348 W
10 /Courier AF
39685 XM
(:components)SH
11 /Times-Roman AF
46908 XM
(slot of these)348 W
6120 48066 MT
(aggregates. For)
275 W( example, the instruction)SH
8 /Courier AF
8040 49231 MT
(\050opal:do-components \050gv graph :nodes\051)SH
17640 50096 MT
(#'\050lambda \050node\051)SH
19560 50961 MT
(\050format T "~A~%" \050gv node :info\051\051\051\051)SH
11 /Times-Roman AF
6120 52382 MT
(will print out the names of all the nodes in the graph.)SH
6120 54680 MT
(As each graph-node is created, a pointer to the)
457 W( corresponding source-node is put in the slot)456 W
10 /Courier AF
6120 55876 MT
(:source-node)SH
11 /Times-Roman AF
13802 XM
(of the graph-node.  This allows access to the source node from)
207 W( the graph-node.  If)208 W
6120 57072 MT
(desired, a user can supply a function)
175 W( in the slot)174 W
10 /Courier AF
28791 XM
(:add-back-pointer-to-nodes-function)SH
11 /Times-Roman AF
(. This)623 W
6120 58268 MT
(function will be called on)
73 W( each source-node/graph-node pair, and should put a pointer to the graph-node)74 W
6120 59464 MT
(in the source-node data structure.  This can be used to)
87 W( establish back pointers in the programmer's data)86 W
6120 60660 MT
(structure.)SH
6120 62958 MT
(The function in the slot)172 W
10 /Courier AF
17521 XM
(:source-to-graph-node)SH
11 /Times-Roman AF
30568 XM
(can be useful in finding a particular)
172 W( node in the)173 W
6120 64154 MT
(graph. When)
643 W( this method is given a source-node,)
184 W( it will return the corresponding graph-node if one)183 W
6120 65350 MT
(already exists in the graph.)SH
6120 67648 MT
(Useful slots in the node objects include:)SH
10 /Courier AF
8320 69599 MT
(:left)SH
11 /Times-Roman AF
11818 XM
(and)SH
10 /Courier AF
13904 XM
(:top)SH
11 /Times-Roman AF
16802 XM
(-- These)
223 W( slots must be set either directly by the layout function or indirectly)224 W
11620 70795 MT
(through formulas \050probably dependent)
129 W( on other slots in the node that are set by the layout)128 W
11620 71991 MT
(function\051.)SH
ES
%%Page: 337 42
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 2.1)
SH( Using)
1800 W( Aggregraphs)SH
51386 XM
(Page 337)SH
46800 50 8280 4486 UL
/Courier SF
10480 7955 MT
(:width)SH
11 /Times-Roman AF
14355 XM
(and)SH
10 /Courier AF
16218 XM
(:height)SH
11 /Times-Roman AF
20693 XM
(-- Dimensions of the node.)SH
10 /Courier AF
10480 9650 MT
(:links-to-me)SH
11 /Times-Roman AF
18003 XM
(and)SH
10 /Courier AF
19914 XM
(:links-from-me)SH
11 /Times-Roman AF
28637 XM
(-- Each slot contains a list of links that point to or)
48 W( from the)49 W
13780 10846 MT
(given node.  To get the nodes on the other side of the)
114 W( links, reference the)113 W
10 /Courier AF
47916 XM
(:from)SH
11 /Times-Roman AF
51304 XM
(and)SH
10 /Courier AF
53280 XM
(:to)SH
11 /Times-Roman AF
13780 12042 MT
(slots of the links, respectively.)SH
10 /Courier AF
10480 13737 MT
(:source-node)SH
11 /Times-Roman AF
18009 XM
(-- A pointer to the corresponding node in the source graph \050i.e., the source-node of)54 W
13780 14933 MT
(this graph-node\051.)
21 W( See)316 W
10 /Courier AF
23789 XM
(:add-back-pointer-to-nodes-function)SH
11 /Times-Roman AF
45084 XM
(for back-pointers from)20 W
13780 16129 MT
(the source-node to the graph-node.)SH
10 /Courier AF
10480 17824 MT
(:layout-info-...)SH
11 /Times-Roman AF
20865 XM
(-- Several slots that)
510 W( begin with ")511 W
10 /Courier AF
(:layout-info-)SH
11 /Times-Roman AF
(" are reserved for)511 W
13780 19020 MT
(bookkeeping by the layout)
121 W( function.  Do not set these slots except as part of a customized)120 W
13780 20216 MT
(layout function.)SH
12 /Times-Bold AF
8280 23900 MT
(2.1.4. A Simple Example)SH
8 /Courier AF
10200 26513 MT
(\050create-instance 'SCHEMA-GRAPH opal:aggregraph)SH
11640 27378 MT
(\050:children-function #'\050lambda \050source-node depth\051)SH
23160 28243 MT
(\050if \050> depth 1\051)SH
25080 29108 MT
(NIL)SH
25080 29973 MT
(\050gv source-node :is-a-inv\051\051\051\051)SH
11640 30838 MT
(\050:info-function #'\050lambda \050source-node\051)SH
21240 31703 MT
(\050string-capitalize)SH
21720 32568 MT
(\050kr:name-for-schema source-node\051\051\051\051)SH
11640 33433 MT
(\050:source-roots \050list opal:view-object\051\051\051)SH
11 /Times-Roman AF
8280 34854 MT
(The graph pictured in figure 2-1)
35 W( is a result of the definition of the SCHEMA-GRAPH object above.  The)36 W
8280 36050 MT
(aggregraph was given a description of the Garnet inheritance hierarchy just by defining the root)
119 W( of the)118 W
8280 37246 MT
(graph and a child-generating function.)SH
8280 39544 MT
(The generating function in the)88 W
10 /Courier AF
22313 XM
(:children-function)SH
11 /Times-Roman AF
33476 XM
(slot is defined to return the instances of a given)89 W
8280 40740 MT
(schema until the aggregraph reaches a certain depth in the graph.  In this case,)
74 W( if the function is given a)73 W
8280 41936 MT
(node that is more than one link away from the root, then the function will return NIL.)SH
8280 44234 MT
(The function in the)SH
10 /Courier AF
16956 XM
(:info-function)SH
11 /Times-Roman AF
25631 XM
(slot returns the string name of a Garnet schema.)SH
ES
%%Page: 338 43
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 338)
SH( Aggregadgets)830 W
42039 XM
(Aggregraphs Chapter)
1550 W( 2)SH
46800 50 6120 4486 UL
11 SS 
75 100 0 6532 55200 GB 
%%BeginDocument: aggregadgets/schema-graph.ps
%!PS-Adobe-2.0
%%Title: Opal 32
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 2, 1992, 4:13 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 116 153 497 640
%%%Pages: 1
%%EndComments


/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RoundtanglePath
   {    % stack: left, top, width, height, radius
        /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
        /right l w add def  /bottom t h sub def
          l r add t moveto                         % origin
          right t right t r sub r arcto            % top side
          right bottom right r sub bottom r arcto  % right side
          l bottom l bottom r add r arcto          % bottom side
          l t l r add t r arcto                    % left side
          16 {pop} repeat  % each arcto accumulates 4 stack parameters
   } def

/RoundtangleDict 27 dict def
/DrawRoundtangle
   {    % stack: left, top, width, height, radius, line-halftone,
        %        line-red, line-green, line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        
        RoundtangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub  width thickness sub  height thickness sub
          radius thickness sub RoundtanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height radius thickness-by-2 sub RoundtanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
44 -80 translate
gsave
0 648 381 487 ClipToRectangle
0 0 translate
gsave
0 0 0 0 false 0 0 [] 1 195 637 175 543 DrawLine
0 0 0 0 false 0 0 [] 1 195 610 175 543 DrawLine
0 0 0 0 false 0 0 [] 1 195 583 175 543 DrawLine
0 0 0 0 false 0 0 [] 1 195 556 175 543 DrawLine
0 0 0 0 false 0 0 [] 1 195 529 175 543 DrawLine
0 0 0 0 false 0 0 [] 1 195 502 175 543 DrawLine
0 0 0 0 false 0 0 [] 1 195 475 175 543 DrawLine
0 0 0 0 false 0 0 [] 1 195 448 175 543 DrawLine
0 0 0 0 false 0 0 [] 1 175 367 155 367 DrawLine
0 0 0 0 false 0 0 [] 1 244 340 224 259 DrawLine
0 0 0 0 false 0 0 [] 1 244 313 224 259 DrawLine
0 0 0 0 false 0 0 [] 1 244 286 224 259 DrawLine
0 0 0 0 false 0 0 [] 1 244 259 224 259 DrawLine
0 0 0 0 false 0 0 [] 1 244 232 224 259 DrawLine
0 0 0 0 false 0 0 [] 1 244 205 224 259 DrawLine
0 0 0 0 false 0 0 [] 1 244 178 224 259 DrawLine
0 0 0 0 false 0 0 [] 1 105 543 85 397 DrawLine
0 0 0 0 false 0 0 [] 1 105 421 85 397 DrawLine
0 0 0 0 false 0 0 [] 1 105 394 85 397 DrawLine
0 0 0 0 false 0 0 [] 1 105 367 85 397 DrawLine
0 0 0 0 false 0 0 [] 1 105 259 85 397 DrawLine
0 408 85 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
4 404 393 77 14 0 false 0 0 0 false 0 0 0 false (View-Object) 12 /Courier DrawText
105 554 70 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
109 550 539 62 14 0 false 0 0 0 false 0 0 0 false (Aggregate) 12 /Courier DrawText
195 648 119 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
199 644 633 111 14 0 false 0 0 0 false 0 0 0 false (Window-Aggregate) 12 /Courier DrawText
195 621 105 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
199 617 606 97 14 0 false 0 0 0 false 0 0 0 false (Aggregate-4731) 12 /Courier DrawText
195 594 105 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
199 590 579 97 14 0 false 0 0 0 false 0 0 0 false (Aggregate-4730) 12 /Courier DrawText
195 567 29 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
199 563 552 21 14 0 false 0 0 0 false 0 0 0 false (Agg) 12 /Courier DrawText
195 540 105 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
199 536 525 97 14 0 false 0 0 0 false 0 0 0 false (Aggregate-3766) 12 /Courier DrawText
195 513 105 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
199 509 498 97 14 0 false 0 0 0 false 0 0 0 false (Aggregate-3765) 12 /Courier DrawText
195 486 71 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
199 482 471 63 14 0 false 0 0 0 false 0 0 0 false (Aggrelist) 12 /Courier DrawText
195 459 85 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
199 455 444 77 14 0 false 0 0 0 false 0 0 0 false (Aggregadget) 12 /Courier DrawText
105 432 85 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
109 428 417 77 14 0 false 0 0 0 false 0 0 0 false (Null-Object) 12 /Courier DrawText
105 405 162 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
109 401 390 154 14 0 false 0 0 0 false 0 0 0 false (Virtual-Invalid-Object) 12 /Courier DrawText
105 378 50 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
109 374 363 42 14 0 false 0 0 0 false 0 0 0 false (Window) 12 /Courier DrawText
175 378 126 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
179 374 363 118 14 0 false 0 0 0 false 0 0 0 false (Interactor-Window) 12 /Courier DrawText
105 270 119 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
109 266 255 111 14 0 false 0 0 0 false 0 0 0 false (Graphical-Object) 12 /Courier DrawText
244 351 35 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
248 347 336 27 14 0 false 0 0 0 false 0 0 0 false (Line) 12 /Courier DrawText
244 324 126 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
248 320 309 118 14 0 false 0 0 0 false 0 0 0 false (Virtual-Aggregate) 12 /Courier DrawText
244 297 49 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
248 293 282 41 14 0 false 0 0 0 false 0 0 0 false (Bitmap) 12 /Courier DrawText
244 270 36 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
248 266 255 28 14 0 false 0 0 0 false 0 0 0 false (Text) 12 /Courier DrawText
244 243 78 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
248 239 228 70 14 0 false 0 0 0 false 0 0 0 false (Multipoint) 12 /Courier DrawText
244 216 28 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
248 212 201 20 14 0 false 0 0 0 false 0 0 0 false (Arc) 12 /Courier DrawText
244 189 70 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
248 185 174 62 14 0 false 0 0 0 false 0 0 0 false (Rectangle) 12 /Courier DrawText
grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 116 153 497 640

%%EndDocument
 GE /Times-Bold SF
6120 45477 MT
(Figure 2-1:)SH
/Times-Roman SF
11893 XM
(Graph generated by SCHEMA-GRAPH)SH
ES
%%Page: 339 44
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 2.1)
SH( Using)
1800 W( Aggregraphs)SH
51386 XM
(Page 339)SH
46800 50 8280 4486 UL
12 /Times-Bold AF
8280 8004 MT
(2.1.5. An Example With an Interactor)SH
8 /Courier AF
10200 10617 MT
(\050create-instance 'SCHEMA-GRAPH-2 opal:aggregraph)SH
11640 11482 MT
(\050:children-function #'\050lambda \050source-node depth\051)SH
23160 12347 MT
(\050when \050< depth 1\051)SH
24120 13212 MT
(\050gv source-node :is-a-inv\051\051\051\051)SH
11640 14077 MT
(\050:info-function #'\050lambda \050source-node\051)SH
21240 14942 MT
(\050string-capitalize)SH
21720 15807 MT
(\050kr:name-for-schema source\051\051\051\051)SH
11640 16672 MT
(\050:source-roots \050list opal:view-object\051\051)SH
/Times-Italic SF
11640 17537 MT
(; Change the node prototype so that it will go black)SH
11640 18402 MT
(; when the interactor sets)SH
/Courier SF
20249 XM
(:interim-selected)SH
/Times-Italic SF
28889 XM
(to T)SH
/Courier SF
11640 19267 MT
(\050:node-prototype)SH
12120 20132 MT
(\050create-instance NIL opal:aggregraph-node-prototype)SH
13560 20997 MT
(\050:interim-selected NIL\051)SH
/Times-Italic SF
25560 XM
(; Set by interactor)SH
/Courier SF
13560 21862 MT
(\050:parts)SH
14040 22727 MT
(`\050\050:box :modify)SH
15480 23592 MT
(\050:filling-style ,\050o-formula \050if \050gvl :parent :interim-selected\051)SH
30840 24457 MT
(opal:black-fill)SH
30840 25322 MT
(opal:white-fill\051\051\051)SH
15480 26187 MT
(\050:draw-function :xor\051 \050:fast-redraw-p T\051\051)SH
15000 27052 MT
(:text-al\051\051\051\051)SH
/Times-Italic SF
11640 27917 MT
(; Now define an interactor to work on all nodes of the graph)SH
/Courier SF
11640 28782 MT
(\050:interactors)SH
12120 29647 MT
(`\050\050:press ,inter:menu-interactor)SH
13560 30512 MT
(\050:window ,\050o-formula \050gv-local :self :operates-on :window\051\051\051)SH
13560 31377 MT
(\050:start-where ,\050o-formula \050list :element-of)SH
28920 32242 MT
(\050gvl :operates-on :nodes\051\051\051\051)SH
13560 33107 MT
(\050:final-function)SH
14040 33972 MT
(,#'\050lambda \050inter node\051)SH
16440 34837 MT
(\050let* \050\050graph \050gv node :parent :parent\051\051)SH
19800 35702 MT
(\050source-node \050gv node :source-node\051\051\051)SH
17400 36567 MT
(\050format T "~%~% ***** Clicked on ~S *****~%" source-node\051)SH
17400 37432 MT
(\050kr:ps source-node\051\051\051\051\051\051\051\051)SH
11 SS 
75 100 0 8730 73953 GB 
%%BeginDocument: aggregadgets/schema-graph-2.ps
%!PS-Adobe-2.0
%%Title: Opal 2
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 5, 1992, 7:35 AM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 156 321 456 471
%%%Pages: 1
%%EndComments


/BitmapDict 9 dict def
/DrawBitmap
   {    % stack: left top width height pattern transparent-p
        %        red green blue color-p
        BitmapDict begin
        /picstr 256 string def
        /color-p exch def  /blue exch def  /green exch def /red exch def
        /transparent-p exch def
        /pattern exch def  /height exch def  /width exch def
        gsave
          translate
          width height scale
          color-p {red green blue setrgbcolor} if
          transparent-p
          % The case where the background is not drawn
          { width height false
            [ width 0 0 height 0 height ]
            {pattern} imagemask }
          % The case where the background is drawn
          { width height 1
            [ width 0 0 height 0 height ]
            {pattern} image } ifelse
        grestore
        end
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RoundtanglePath
   {    % stack: left, top, width, height, radius
        /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
        /right l w add def  /bottom t h sub def
          l r add t moveto                         % origin
          right t right t r sub r arcto            % top side
          right bottom right r sub bottom r arcto  % right side
          l bottom l bottom r add r arcto          % bottom side
          l t l r add t r arcto                    % left side
          16 {pop} repeat  % each arcto accumulates 4 stack parameters
   } def

/RoundtangleDict 27 dict def
/DrawRoundtangle
   {    % stack: left, top, width, height, radius, line-halftone,
        %        line-red, line-green, line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        
        RoundtangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub  width thickness sub  height thickness sub
          radius thickness sub RoundtanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height radius thickness-by-2 sub RoundtanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def

/image-2
<ffff ff3f ff3f fe7f ee7f e4ff e0ff e01f e03f e07f e0ff e1ff e3ff e7ff efff
ffff>
def

/image-1
<ff3f fe1f fe1f cc3f c43f c07f c00f c00f c01f c03f c07f c0ff c1ff c3ff c7ff
cfff>
def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
84 -249 translate
gsave
0 648 300 150 ClipToRectangle
0 0 translate
gsave
0 0 0 0 false 0 0 [] 1 105 637 85 583 DrawLine
0 0 0 0 false 0 0 [] 1 105 610 85 583 DrawLine
0 0 0 0 false 0 0 [] 1 105 583 85 583 DrawLine
0 0 0 0 false 0 0 [] 1 105 556 85 583 DrawLine
0 0 0 0 false 0 0 [] 1 105 529 85 583 DrawLine
0 594 85 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
4 590 579 77 14 0 false 0 0 0 false 0 0 0 false (View-Object) 12 /Courier DrawText
105 648 70 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
109 644 633 62 14 0 false 0 0 0 false 0 0 0 false (Aggregate) 12 /Courier DrawText
105 621 85 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
109 617 606 77 14 0 false 0 0 0 false 0 0 0 false (Null-Object) 12 /Courier DrawText
105 594 162 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
109 590 579 154 14 0 false 0 0 0 false 0 0 0 false (Virtual-Invalid-Object) 12 /Courier DrawText
105 567 50 22 5 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawRoundtangle
109 563 552 42 14 0 false 0 0 0 false 0 0 0 false (Window) 12 /Courier DrawText
105 540 119 22 5 0 0 0 0 false 0 0 [] 1 0 0 0 0 false DrawRoundtangle
109 536 525 111 14 1 false 0 0 0 false 0 0 0 false (Graphical-Object) 12 /Courier-Bold DrawText
203 524 16 16 image-1 true 1.00 1.00 1.00 true DrawBitmap
203 524 16 16 image-2 true 0 0 0 false DrawBitmap
grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 156 321 456 471

%%EndDocument
 GE /Times-Bold SF
8280 51630 MT
(Figure 2-2:)SH
/Times-Roman SF
14053 XM
(Graph generated by SCHEMA-GRAPH-2)SH
8280 53581 MT
(The graph)
44 W( of figure 2-2 comes from the definition of SCHEMA-GRAPH-2.  This aggregraph models the)45 W
8280 54777 MT
(same Garnet)
270 W( hierarchy as in the previous example, but it also modifies the node-prototype for the)269 W
8280 55973 MT
(aggregraph and adds an interactor to operate on the graph.)SH
8280 58271 MT
(The)SH
10 /Courier AF
10373 XM
(:node-prototype)SH
11 /Times-Roman AF
19756 XM
(slot must contain a Garnet object that)
108 W( can be used to display the nodes of the)109 W
8280 59467 MT
(graph. In)
361 W( this case,)
43 W( the customized node-prototype is an instance of the default node-prototype \050which is)42 W
8280 60663 MT
(an aggregadget\051 with some changes in the roundtangle part.  The formula for)
47 W( the)48 W
10 /Courier AF
44645 XM
(:filling-style)SH
11 /Times-Roman AF
53368 XM
(will)SH
8280 61859 MT
(make the node black when the user presses on it with the mouse.)SH
8280 64157 MT
(The interactor is defined as)
5 W( in aggregadgets and aggrelists.  Note that the)4 W
10 /Courier AF
40652 XM
(:start-where)SH
11 /Times-Roman AF
48131 XM
(slot looks at the)4 W
8280 65353 MT
(components of the)SH
10 /Courier AF
16681 XM
(:nodes)SH
11 /Times-Roman AF
20556 XM
(aggregate in the top-level aggregraph.)SH
8280 67651 MT
(Aggregadget nodes)
224 W( can be moved easily with an)225 W
10 /Courier AF
31643 XM
(inter:move-grow-interactor)SH
11 /Times-Roman AF
(. By)
725 W( setting the)225 W
10 /Courier AF
8280 68847 MT
(:slots-to-set)SH
11 /Times-Roman AF
16403 XM
(slot of the interactor to)48 W
10 /Courier AF
26938 XM
(\050list T T NIL)
48 W( NIL\051)47 W
11 /Times-Roman AF
(, you can change the)47 W
10 /Courier AF
47448 XM
(:left)SH
11 /Times-Roman AF
50770 XM
(and)SH
10 /Courier AF
52680 XM
(:top)SH
11 /Times-Roman AF
8280 70043 MT
(of the aggregraph nodes as you click and drag on them.)SH
ES
%%Page: 340 45
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 340)
SH( Aggregadgets)830 W
42039 XM
(Aggregraphs Chapter)
1550 W( 2)SH
46800 50 6120 4486 UL
14 /Times-Bold AF
6120 8138 MT
(2.2. Aggregraph)SH
11 /Times-Roman AF
6120 9334 MT
(Features and operation of an Aggregraph)SH
/Symbol SF
8089 10912 MT
(\267)SH
/Times-Roman SF
8870 XM
(Creates a graph in)
201 W( which each node determines its own size based on information to be)202 W
8870 12108 MT
(displayed in it.  \050The information is determined by the function)SH
10 /Courier AF
36916 XM
(:info-function)SH
11 /Times-Roman AF
(.\051)SH
/Symbol SF
8089 14002 MT
(\267)SH
/Times-Roman SF
8870 XM
(The user must supply a list of source-nodes)
98 W( to be the root of the graph, a children-function)97 W
8870 15198 MT
(which can be used to walk the user's graph, and an info-function)
82 W( to determine what will be)83 W
8870 16394 MT
(displayed in each graph node.)SH
/Symbol SF
8089 18288 MT
(\267)SH
/Times-Roman SF
8870 XM
(It is an instance of aggregadget, and interactors can be defined as in aggregadgets.)SH
/Times-Bold SF
6120 20586 MT
(Customizable slots)SH
10 /Courier AF
8320 22537 MT
(:left)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
11870 XM
(:top)SH
11 /Times-Roman AF
14545 XM
(-- The position of the aggregraph.  Default is 0,0.)SH
10 /Courier AF
8320 24232 MT
(:source-roots)SH
11 /Times-Roman AF
16395 XM
(-- List of source nodes to be used as the roots of the graph.)SH
10 /Courier AF
8320 25927 MT
(:children-function)SH
11 /Times-Roman AF
19517 XM
(-- A function which takes a)
122 W( source node and the depth from the root and)121 W
11620 27123 MT
(returns a list of children.  The children are treated as unordered by the default)
257 W( layout-)258 W
11620 28319 MT
(function.)SH
10 /Courier AF
8320 30014 MT
(:info-function)SH
11 /Times-Roman AF
17009 XM
(-- A function which takes a source node and returns)
14 W( information to be used in the)13 W
11620 31210 MT
(display of the node)
199 W( prototype.  The result is put in the)200 W
10 /Courier AF
37878 XM
(:info)SH
11 /Times-Roman AF
41353 XM
(slot of the corresponding)200 W
11620 32406 MT
(graph-node. The)
275 W( default node-prototype expects a string to be returned.)SH
10 /Courier AF
8320 34101 MT
(:add-back-pointer-to-nodes-function)SH
11 /Times-Roman AF
29675 XM
(-- A function or NIL.)
80 W( The)
433 W( function, if present, will)79 W
11620 35297 MT
(be called on every source-node graph-node pair.)
57 W( The)
391 W( result of the function is ignored.  This)58 W
11620 36493 MT
(allows pointers to be put in the source-nodes for corresponding graph-nodes.)SH
10 /Courier AF
8320 38188 MT
(:node-prototype)SH
11 /Times-Roman AF
17745 XM
(-- A Garnet object for node prototype, or list of prototypes)
150 W( \050in which case a)149 W
10 /Courier AF
11620 39384 MT
(:node-prototype-selector-function)SH
11 /Times-Roman AF
31717 XM
(must be provided--see below\051.)
22 W( In)
321 W( the instances,)23 W
11620 40580 MT
(the)SH
10 /Courier AF
13298 XM
(:info)SH
11 /Times-Roman AF
16632 XM
(slot is set with the result of the)
59 W( info-function called on the corresponding source-)58 W
11620 41776 MT
(node. The)1031 W
10 /Courier AF
17702 XM
(:source-node)SH
11 /Times-Roman AF
25555 XM
(slot is set to the corresponding source node.  And,)
378 W( the)379 W
10 /Courier AF
11620 42972 MT
(:links-to-me)SH
11 /Times-Roman AF
19241 XM
(and)SH
10 /Courier AF
21250 XM
(:links-from-me)SH
11 /Times-Roman AF
30071 XM
(slots are set to lists of graph links pointing to)
146 W( the)145 W
11620 44168 MT
(node and from the node respectively.)
72 W( The)
421 W( slots whose names begin with ")73 W
10 /Courier AF
(:layout-info)SH
11 /Times-Roman AF
(")SH
11620 45364 MT
(are reserved for use by)
20 W( the layout functions for internal bookkeeping and so should not be set)19 W
11620 46560 MT
(by the)
852 W( user \050unless writing a new layout or associated methods\051. If any)853 W
10 /Courier AF
11620 47756 MT
(scalable-aggregraph-image)SH
11 /Times-Roman AF
26970 XM
(graphs are made of this graph, the)74 W
10 /Courier AF
42698 XM
(:image-nodes)SH
11 /Times-Roman AF
50247 XM
(slot is)74 W
11620 48952 MT
(set to a list containing the nodes that)
47 W( correspond to this node.  The default prototype expects)48 W
11620 50148 MT
(a string in the)15 W
10 /Courier AF
17974 XM
(:info)SH
11 /Times-Roman AF
21264 XM
(slot, and displays the string with a white-filled roundtangle surrounding)14 W
11620 51344 MT
(it.)SH
10 /Courier AF
8320 53039 MT
(:link-prototype)SH
11 /Times-Roman AF
17862 XM
(-- Garnet object for link prototype, or list of prototypes \050in)
267 W( which case a)268 W
10 /Courier AF
11620 54235 MT
(:link-prototype-selector-function)SH
11 /Times-Roman AF
31752 XM
(must be provided--see below\051.  The)56 W
10 /Courier AF
48001 XM
(:from)SH
11 /Times-Roman AF
51332 XM
(and)SH
10 /Courier AF
11620 55431 MT
(:to)SH
11 /Times-Roman AF
13707 XM
(slots are set to the graph-nodes that this link connects.  The)13 W
10 /Courier AF
40166 XM
(:image-links)SH
11 /Times-Roman AF
47654 XM
(slot is set to)13 W
11620 56627 MT
(a list of corresponding links to this one in)
296 W( associated)295 W
10 /Courier AF
37920 XM
(scalable-aggregraph-image)SH
11 /Times-Roman AF
11620 57823 MT
(graphs. The)
457 W( default)
91 W( prototype is a line between these two graph nodes.  \050It is connected to)92 W
11620 59019 MT
(the center of the right side of the)112 W
10 /Courier AF
27116 XM
(:from)SH
11 /Times-Roman AF
30503 XM
(node and)
112 W( to the center of the left side of the)111 W
10 /Courier AF
51120 XM
(:to)SH
11 /Times-Roman AF
11620 60215 MT
(node. This)
383 W( assumes a left to right layout of the graph for pleasing display.  For)
54 W( other layout)55 W
11620 61411 MT
(strategies, a different prototype may be desired.\051  For directed graphs, a link prototype)
81 W( with)80 W
11620 62607 MT
(an arrowhead may be desired.)SH
10 /Courier AF
8320 64302 MT
(:node-prototype-selector-function)SH
11 /Times-Roman AF
28450 XM
(-- A)
55 W( function which takes a source node and the list of)56 W
11620 65498 MT
(prototypes provided in)
79 W( the)78 W
10 /Courier AF
23788 XM
(:node-prototype)SH
11 /Times-Roman AF
33141 XM
(slot and returns one of the prototypes.  Will)78 W
11620 66694 MT
(only be used if the value in the)SH
10 /Courier AF
25428 XM
(:node-prototype)SH
11 /Times-Roman AF
34703 XM
(slot is a list.)SH
10 /Courier AF
8320 68389 MT
(:link-prototype-selector-function)SH
11 /Times-Roman AF
28481 XM
(-- A function which takes a "from" graph-node, a)
86 W( "to")87 W
11620 69585 MT
(graph-node and the list of prototypes provided in the)151 W
10 /Courier AF
36410 XM
(:link-prototype)SH
11 /Times-Roman AF
45836 XM
(slot and returns)151 W
11620 70781 MT
(one of the prototypes.  Will only be used if the value in the)SH
10 /Courier AF
37801 XM
(:link-prototype)SH
11 /Times-Roman AF
47076 XM
(slot is a list.)SH
ES
%%Page: 341 46
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 2.2)
SH( Aggregraph)1800 W
51386 XM
(Page 341)SH
46800 50 8280 4486 UL
/Courier SF
10480 7955 MT
(:h-spacing)SH
11 /Times-Roman AF
16789 XM
(-- The minimum distance in pixels between nodes horizontally if using default)
34 W( layout-)35 W
13780 9151 MT
(function. The)
275 W( default value is 20.)SH
10 /Courier AF
10480 10846 MT
(:v-spacing)SH
11 /Times-Roman AF
16879 XM
(-- The minimum distance in pixels)
124 W( between nodes vertically if using default layout-)123 W
13780 12042 MT
(function. The)
275 W( default value is 5.)SH
10 /Courier AF
10480 13737 MT
(:test-to-distinguish-source-nodes)SH
11 /Times-Roman AF
30753 XM
(-- Must be one of)199 W
10 /Courier AF
39659 XM
(#'eq)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
42808 XM
(#'eql)SH
11 /Times-Roman AF
(, or)199 W
10 /Courier AF
47947 XM
(#'equal)SH
11 /Times-Roman AF
(. The)673 W
13780 14933 MT
(default is)SH
10 /Courier AF
18118 XM
(#'eql)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
10480 16628 MT
(:interactors)SH
11 /Times-Roman AF
17955 XM
(-- Specified in the same format as aggregadgets.)SH
10 /Courier AF
10480 18323 MT
(:layout-info-...)SH
11 /Times-Roman AF
20866 XM
(-- Several slots that begin with)
511 W( ")510 W
10 /Courier AF
(:layout-info-)SH
11 /Times-Roman AF
(" are reserved for)510 W
13780 19519 MT
(bookkeeping by the layout function.  Do not set these slots except as part)
120 W( of a customized)121 W
13780 20715 MT
(layout function.)SH
/Times-Bold SF
8280 23013 MT
(Read-only slots)SH
10 /Courier AF
10480 24964 MT
(:nodes)SH
11 /Times-Roman AF
14355 XM
(-- The aggregate which contains all of the graph-node objects.)SH
10 /Courier AF
10480 26659 MT
(:links)SH
11 /Times-Roman AF
14355 XM
(-- The aggregate which contains all of the graph link objects.)SH
10 /Courier AF
10480 28354 MT
(:graph-roots)SH
11 /Times-Roman AF
17955 XM
(-- The list of graph nodes corresponding to the)SH
10 /Courier AF
38696 XM
(:source-roots)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
10480 30049 MT
(:image-graphs)SH
11 /Times-Roman AF
18785 XM
(-- The list of)230 W
10 /Courier AF
25509 XM
(scalable-aggregraph-image)SH
11 /Times-Roman AF
41014 XM
(graphs that are images of this)229 W
13780 31245 MT
(graph.)SH
/Times-Bold SF
8280 33543 MT
(Methods)SH
/Times-Roman SF
12649 XM
(\050can be overridden\051)SH
10 /Courier AF
10480 35494 MT
(:layout-graph)SH
11 /Times-Roman AF
18626 XM
(-- a function which is called to determine the locations for)
71 W( all of the nodes in the)72 W
13780 36690 MT
(graph. Takes)
333 W( the graph object as input and sets appropriate slots in)
29 W( each node to position the)28 W
13780 37886 MT
(node \050usually)SH
10 /Courier AF
20012 XM
(:left)SH
11 /Times-Roman AF
23287 XM
(and)SH
10 /Courier AF
25150 XM
(:top)SH
11 /Times-Roman AF
27825 XM
(slots.\051 Automatically)
275 W( called when graph is initially created.)SH
10 /Courier AF
10480 39581 MT
(:delete-node)SH
11 /Times-Roman AF
17974 XM
(-- Takes the graph object and a graph node and deletes)
19 W( it and all links attached to it.)20 W
13780 40777 MT
(If a node is deleted that is a root of the graph, then it is removed from)77 W
10 /Courier AF
45941 XM
(:graph-roots)SH
11 /Times-Roman AF
53492 XM
(and)SH
13780 41973 MT
(the corresponding source-node is removed from)SH
10 /Courier AF
35160 XM
(:source-roots)SH
11 /Times-Roman AF
(.)SH
10 /Courier AF
10480 43668 MT
(:add-node)SH
11 /Times-Roman AF
16167 XM
(-- The arguments are the graph object,)
12 W( a source-node, a list of parent graph-nodes, and a)13 W
13780 44864 MT
(list of children graph-nodes.  It creates a new graph)
312 W( node and places it in the graph)311 W
13780 46060 MT
(positioning it appropriately.  Returns NIL.)SH
10 /Courier AF
10480 47755 MT
(:delete-link)SH
11 /Times-Roman AF
17955 XM
(-- Takes the graph object and a graph link and removes the link from the graph.)SH
10 /Courier AF
10480 49450 MT
(:add-link)SH
11 /Times-Roman AF
16208 XM
(-- Takes the graph object and two graph nodes and creates a)
53 W( link from the first node to)54 W
13780 50646 MT
(the second.)SH
10 /Courier AF
10480 52341 MT
(:source-to-graph-node)SH
11 /Times-Roman AF
23833 XM
(-- Takes the graph object and a source node and returns the)478 W
13780 53537 MT
(corresponding graph-node.)SH
10 /Courier AF
10480 55232 MT
(:find-link)SH
11 /Times-Roman AF
16960 XM
(-- Takes the graph object and two graph-nodes and returns the list of)
205 W( graph link-)206 W
13780 56428 MT
(objects from the first to the second.)SH
10 /Courier AF
10480 58123 MT
(:make-root)SH
11 /Times-Roman AF
16766 XM
(-- Takes the graph object and a graph node of the graph and adds the graph node to the)11 W
13780 59319 MT
(root lists of the graph.)SH
10 /Courier AF
10480 61014 MT
(:remove-root)SH
11 /Times-Roman AF
17972 XM
(-- Takes the graph object and a graph node and removes the node from the root lists)17 W
13780 62210 MT
(of the graph.)SH
8280 64508 MT
(Note that)
57 W( these eight methods depend on each other for intelligent layout. If one is changed it will either)56 W
8280 65704 MT
(have to keep certain bookkeeping information, or other functions will have to be changed as well.)SH
8280 68002 MT
(The functions which add and delete nodes and links all attempt to minimally)
165 W( change the graph.  The)166 W
8280 69198 MT
(relayout function may dramatically change it.)SH
ES
%%Page: 342 47
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 342)
SH( Aggregadgets)830 W
42039 XM
(Aggregraphs Chapter)
1550 W( 2)SH
46800 50 6120 4486 UL
14 /Times-Bold AF
6120 8138 MT
(2.3. Scalable Aggregraph)SH
11 /Times-Roman AF
6120 9334 MT
(Features and operation of a Scalable Aggregraph)SH
/Symbol SF
8089 10912 MT
(\267)SH
/Times-Roman SF
8870 XM
(This object is similar to the normal aggregraph except that it can be scaled)
36 W( by the user.  Text)35 W
8870 12108 MT
(will be displayed only if it will fit within the scaled size of the graph)
64 W( nodes with the default)65 W
8870 13304 MT
(prototypes. The)
275 W( scale factor is set by the)SH
10 /Courier AF
27136 XM
(:scale-factor)SH
11 /Times-Roman AF
35211 XM
(slot.)SH
/Symbol SF
8089 15198 MT
(\267)SH
/Times-Roman SF
8870 XM
(The scalable aggregraph will automatically resize if the)SH
10 /Courier AF
33548 XM
(:scale-factor)SH
11 /Times-Roman AF
41623 XM
(slot is changed.)SH
/Symbol SF
8089 17092 MT
(\267)SH
/Times-Roman SF
8870 XM
(It is an instance of aggregadget, and interactors can be defined as in aggregadgets.)SH
/Times-Bold SF
6120 19390 MT
(Customizable slots)SH
/Times-Roman SF
15164 XM
(\050same as for)SH
10 /Courier AF
20813 XM
(aggregraphs)SH
11 /Times-Roman AF
27688 XM
(except for the following\051:)SH
10 /Courier AF
8320 21341 MT
(:scale-factor)SH
11 /Times-Roman AF
16553 XM
(-- A multiplier of full size which determines the final size of the graph \050e.g. 1)158 W
11620 22537 MT
(causes the graph to be full size, 0.5 causes the graph to be half of full size, etc.\051)
19 W( The)
315 W( full size)20 W
11620 23733 MT
(of the graph is determined by the size of the node prototypes and layout of the nodes.)SH
10 /Courier AF
8320 25428 MT
(:node-prototype)SH
11 /Times-Roman AF
17787 XM
(-- Must be able to set the)192 W
10 /Courier AF
30342 XM
(:width)SH
11 /Times-Roman AF
34409 XM
(and)SH
10 /Courier AF
36463 XM
(:height)SH
11 /Times-Roman AF
(, otherwise the same as in)191 W
11620 26624 MT
(aggregraph. These)
527 W( slots must have initial values which will be used)
126 W( as their default value)127 W
11620 27820 MT
(\050i.e. the width and height)
172 W( of the nodes is)171 W
10 /Courier AF
31096 XM
(:scale-factor)SH
11 /Times-Roman AF
39342 XM
(* the values in)171 W
10 /Courier AF
46686 XM
(:height)SH
11 /Times-Roman AF
51332 XM
(and)SH
10 /Courier AF
11620 29016 MT
(:width)SH
11 /Times-Roman AF
15495 XM
(slots respectively.)SH
10 /Courier AF
8320 30711 MT
(:link-prototype)SH
11 /Times-Roman AF
17692 XM
(-- Position and size must depend on the)
97 W( nodes it is attached to \050by the)98 W
10 /Courier AF
49920 XM
(:from)SH
11 /Times-Roman AF
11620 31907 MT
(and)SH
10 /Courier AF
13483 XM
(:to)SH
11 /Times-Roman AF
15558 XM
(slots\051 with formulas.)SH
10 /Courier AF
8320 33602 MT
(:h-spacing)SH
11 /Times-Roman AF
14732 XM
(and)SH
10 /Courier AF
16732 XM
(:v-spacing)SH
11 /Times-Roman AF
23144 XM
(are the default values.)
137 W( The)
547 W( actual values are)136 W
10 /Courier AF
44159 XM
(:scale-factor)SH
11 /Times-Roman AF
52370 XM
(*)SH
11620 34798 MT
(these values.)SH
/Times-Bold SF
6120 37096 MT
(Read-only slots)SH
/Times-Roman SF
6120 39394 MT
(The same read-only slots are available as with)SH
10 /Courier AF
26706 XM
(aggregraph)SH
11 /Times-Roman AF
32981 XM
(\050see section 2.2\051.)SH
/Times-Bold SF
6120 41692 MT
(Methods)SH
/Times-Roman SF
10489 XM
(\050can be overridden\051)SH
6120 43990 MT
(The same methods are available as with)SH
10 /Courier AF
23927 XM
(aggregraph)SH
11 /Times-Roman AF
30202 XM
(\050see section 2.2\051.)SH
14 /Times-Bold AF
6120 47808 MT
(2.4. Scalable Aggregraph Image)SH
11 /Times-Roman AF
6120 49004 MT
(Features and operation of Scalable Aggregraph Image)SH
/Symbol SF
8089 50582 MT
(\267)SH
/Times-Roman SF
8870 XM
(This is designed to show another view of an existing)
32 W( aggregraph.  This image is created with)33 W
8870 51778 MT
(the same shape as)
8 W( the original, i.e. the size of nodes and relative positions are in proportion to)7 W
8870 52974 MT
(the original.  The proportion is determined by)
94 W( the)95 W
10 /Courier AF
31714 XM
(:scale-factor)SH
11 /Times-Roman AF
39884 XM
(or)SH
10 /Courier AF
41170 XM
(:desired-height)SH
11 /Times-Roman AF
8870 54170 MT
(and)SH
10 /Courier AF
10733 XM
(:desired-width)SH
11 /Times-Roman AF
19408 XM
(slots.)SH
/Symbol SF
8089 56064 MT
(\267)SH
/Times-Roman SF
8870 XM
(The size and shape are determined)
3 W( by Garnet formulas.  This has the effect of maintaining the)2 W
8870 57260 MT
(likeness to the original even as the original is manipulated and changed.)SH
/Symbol SF
8089 59154 MT
(\267)SH
/Times-Roman SF
8870 XM
(The default prototypes \050in particular the node prototype\051, are designed for the image to)
129 W( be)130 W
8870 60350 MT
(used as an overview of a graph which perhaps)
49 W( doesn't fit on the screen.  This is why no text)48 W
8870 61546 MT
(is displayed in nodes, for example.  This is not the only use of the gadget,)
93 W( especially if the)94 W
8870 62742 MT
(prototypes are changed.)SH
/Times-Bold SF
6120 65040 MT
(Customizable slots)SH
10 /Courier AF
8320 66991 MT
(:left)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
11870 XM
(:top)SH
11 /Times-Roman AF
14545 XM
(-- The position of the aggregraph.  Default is 0,0.)SH
10 /Courier AF
8320 68686 MT
(:desired-width)SH
11 /Times-Roman AF
17133 XM
(and)SH
10 /Courier AF
19134 XM
(:desired-height)SH
11 /Times-Roman AF
28547 XM
(-- Desired width and height)
138 W( of the entire graph.  The)137 W
11620 69882 MT
(graph will be scaled to fit inside these maximums.)SH
10 /Courier AF
8320 71577 MT
(:source-aggregraph)SH
11 /Times-Roman AF
19395 XM
(-- The aggregraph to make an image of.)SH
ES
%%Page: 343 48
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Section 2.5)
SH( Customizing)
1800 W( the :layout-graph Function)SH
51386 XM
(Page 343)SH
46800 50 8280 4486 UL
/Courier SF
10480 7955 MT
(:scale-factor)SH
11 /Times-Roman AF
18713 XM
(-- A multiplier of full size which determines the final size of the graph \050e.g. 1)158 W
13780 9151 MT
(causes the graph to be the same size as the source aggregraph, 0.5 causes the graph to)
21 W( be half)20 W
13780 10347 MT
(the size, etc.\051  Scale-factor overrides the)54 W
10 /Courier AF
32083 XM
(:desired-width)SH
11 /Times-Roman AF
40812 XM
(and)SH
10 /Courier AF
42730 XM
(:desired-height)SH
11 /Times-Roman AF
52060 XM
(slots if)55 W
13780 11543 MT
(all are specified.  The default value is 1.)SH
10 /Courier AF
10480 13238 MT
(:node-prototype)SH
11 /Times-Roman AF
19926 XM
(-- Garnet)
171 W( object for node prototype, or a list of prototypes \050in which case a)170 W
10 /Courier AF
13780 14434 MT
(:node-prototype-selector-function)SH
11 /Times-Roman AF
34060 XM
(must be provided--see below\051.)
205 W( The)686 W
10 /Courier AF
51205 XM
(:width)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
13780 15630 MT
(:height)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
18646 XM
(:left)SH
11 /Times-Roman AF
22037 XM
(and)SH
10 /Courier AF
24015 XM
(:top)SH
11 /Times-Roman AF
26805 XM
(slots must all be settable, and the node size and position must)115 W
13780 16826 MT
(depend on these slots.  They will all be overridden with)
128 W( formulas in the created instances.)129 W
13780 18022 MT
(The)SH
10 /Courier AF
15801 XM
(:corresponding-node)SH
11 /Times-Roman AF
27512 XM
(slot is)
36 W( set to the corresponding node in the source aggregraph.)35 W
13780 19218 MT
(The default node-prototype is a roundtangle proportional to the)
361 W( bounding box of the)362 W
13780 20414 MT
(corresponding node in the source aggregraph \050because of the formulas\051.)SH
10 /Courier AF
10480 22109 MT
(:link-prototype)SH
11 /Times-Roman AF
19794 XM
(-- Same)
39 W( as in aggregraph, except the)38 W
10 /Courier AF
36369 XM
(:corresponding-link)SH
11 /Times-Roman AF
48082 XM
(slot is set to the)38 W
13780 23305 MT
(corresponding link in the source aggregraph and there is no)118 W
10 /Courier AF
41350 XM
(:from)SH
11 /Times-Roman AF
44744 XM
(or)SH
10 /Courier AF
46054 XM
(:to)SH
11 /Times-Roman AF
48248 XM
(slot. The)513 W
10 /Courier AF
53005 XM
(:x1)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
13780 24501 MT
(:y1)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
16202 XM
(:x2)SH
11 /Times-Roman AF
18349 XM
(and)SH
10 /Courier AF
20284 XM
(:y2)SH
11 /Times-Roman AF
22431 XM
(slots of the link must all be settable, and the link)
72 W( endpoints must depend)71 W
13780 25697 MT
(on their values.  They will all be overridden)
160 W( with formulas in the created instances.  The)161 W
13780 26893 MT
(default link-prototype is a line.)SH
10 /Courier AF
10480 28588 MT
(:node-prototype-selector-function)SH
11 /Times-Roman AF
31467 XM
(-- A function which takes the)
912 W( appropriate)911 W
13780 29784 MT
(corresponding-node and the list of prototypes provided in the)123 W
10 /Courier AF
42106 XM
(:node-prototype)SH
11 /Times-Roman AF
51504 XM
(slot and)123 W
13780 30980 MT
(returns one of the prototypes.  Will only be used if the value in)
58 W( the)57 W
10 /Courier AF
44158 XM
(:node-prototype)SH
11 /Times-Roman AF
53490 XM
(slot)SH
13780 32176 MT
(is a list.)SH
10 /Courier AF
10480 33871 MT
(:link-prototype-selector-function)SH
11 /Times-Roman AF
30699 XM
(-- A)
144 W( function which takes the corresponding-link and)145 W
13780 35067 MT
(the list of prototypes provided in the)330 W
10 /Courier AF
32375 XM
(:link-prototype)SH
11 /Times-Roman AF
41980 XM
(slot and returns one of the)329 W
13780 36263 MT
(prototypes. Will)
275 W( only be used if the value in the)SH
10 /Courier AF
35288 XM
(:link-prototype)SH
11 /Times-Roman AF
44563 XM
(slot is a list.)SH
10 /Courier AF
10480 37958 MT
(:interactors)SH
11 /Times-Roman AF
17955 XM
(-- Specified in the same format as aggregadgets.)SH
/Times-Bold SF
8280 40256 MT
(Read-only slots)SH
/Times-Roman SF
8280 42554 MT
(The same read-only slots are available as with)SH
10 /Courier AF
28866 XM
(aggregraph)SH
11 /Times-Roman AF
35141 XM
(except)SH
10 /Courier AF
38286 XM
(:graph-roots)SH
11 /Times-Roman AF
45761 XM
(\050see section 2.2\051.)SH
/Times-Bold SF
8280 44852 MT
(Methods)SH
/Times-Roman SF
12649 XM
(\050probably shouldn't be overridden\051)SH
8280 47150 MT
(The methods)
254 W( of a)255 W
10 /Courier AF
17241 XM
(scalable-aggregraph-image)SH
11 /Times-Roman AF
32771 XM
(call the methods of the source aggregraph, and)255 W
8280 48346 MT
(changes are reflected in the image.)
3 W( If)
279 W( the methods of the source graph are called directly, the changes will)2 W
8280 49542 MT
(also be reflected.)SH
8280 51840 MT
(When this aggregraph image is created, pointers are created in the)
47 W( source aggregraph and all of its nodes)48 W
8280 53036 MT
(and links to the corresponding image graph,)
22 W( nodes and links.  These pointers are added to a list in the slot)21 W
10 /Courier AF
8280 54232 MT
(:image-graphs)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
16816 XM
(:image-nodes)SH
11 /Times-Roman AF
24478 XM
(and)SH
10 /Courier AF
26528 XM
(:image-links)SH
11 /Times-Roman AF
34190 XM
(of the aggregraph, nodes and links.  Pointers)187 W
8280 55428 MT
(from the image to the source are in the slots)570 W
10 /Courier AF
33529 XM
(:source-aggregraph)SH
11 /Times-Roman AF
(,)SH
10 /Courier AF
45448 XM
(:source-node)SH
11 /Times-Roman AF
53492 XM
(and)SH
10 /Courier AF
8280 56624 MT
(:source-link)SH
11 /Times-Roman AF
15808 XM
(as indicated below.  These links are used by the methods \050both in this gadget and in)
53 W( the)54 W
8280 57820 MT
(two gadgets described above\051 to maintain the image.)SH
14 /Times-Bold AF
8280 61638 MT
(2.5. Customizing the :layout-graph Function)SH
11 SS 
8280 62834 MT
(NOTE:)SH
/Times-Roman SF
12444 XM
(Writing a customized layout function is a formidable task that few users will want to try.  This)64 W
8280 64030 MT
(section is provided for programmers whose aggregraph application requires a graph layout that)
166 W( is not)167 W
8280 65226 MT
(suited to the default tree layout function.)SH
8280 67524 MT
(The function stored in)185 W
10 /Courier AF
19040 XM
(:layout-graph)SH
11 /Times-Roman AF
27300 XM
(computes the locations for)
185 W( all of the nodes and links of the)184 W
8280 68720 MT
(graph. It)
345 W( takes the graph as its argument, and)
35 W( the returned value is ignored.  All nodes have been created)36 W
8280 69916 MT
(with their height and width, and are connected to)
78 W( the appropriate links and nodes, before the function is)77 W
8280 71112 MT
(called.)SH
ES
%%Page: 344 49
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 344)
SH( Aggregadgets)830 W
42039 XM
(Aggregraphs Chapter)
1550 W( 2)SH
46800 50 6120 4486 UL
11 SS 
6120 7955 MT
(The default layout function is)35 W
10 /Courier AF
19584 XM
(layout-tree)SH
11 /Times-Roman AF
26494 XM
(defined in)35 W
10 /Courier AF
31268 XM
(Opal)SH
11 /Times-Roman AF
(. This)
345 W( function)
35 W( can be called repeatedly on)36 W
6120 9151 MT
(the graph, but may drastically change the)
133 W( look of the graph \050if a series of adds and deletes were done)132 W
6120 10347 MT
(before the relayout\051.  Features of)SH
10 /Courier AF
20809 XM
(layout-tree)SH
11 /Times-Roman AF
27684 XM
(are:)SH
/Symbol SF
8089 11925 MT
(\267)SH
/Times-Roman SF
8870 XM
(It works best for trees)
34 W( and DAGs which are tree-like \050i.e. DAGs in which the width becomes)35 W
8870 13121 MT
(larger toward the leaves\051.)SH
/Symbol SF
8089 15015 MT
(\267)SH
/Times-Roman SF
8870 XM
(It takes linear time in the number of nodes.)SH
/Symbol SF
8089 16909 MT
(\267)SH
/Times-Roman SF
8870 XM
(Children are treated as unordered.)SH
/Symbol SF
8089 18803 MT
(\267)SH
/Times-Roman SF
8870 XM
(Add and delete \050both nodes and links\051 attempt to minimally change the graph.)SH
6120 21101 MT
(If a new layout function is written without regard to the)
237 W( bookkeeping slots or the various methods)236 W
6120 22297 MT
(associated with the aggregraph, the other methods will work with the new)
244 W( layout function but will)245 W
6120 23493 MT
(probably not keep the graph looking as nice as possible.)SH
6120 25791 MT
(With the default link prototypes it is only necessary to)
121 W( place the nodes, because the links attach to the)120 W
6120 26987 MT
(nodes automatically with Garnet formulas.)
136 W( \050Note)
548 W( that the default links are designed for a left to right)137 W
6120 28183 MT
(layout of the graph.  If a different layout)
1 W( is desired another prototype may be desired.  Of course, formulas)SH
6120 29379 MT
(can still be used rather than explicitly placing each link.\051)SH
6120 31677 MT
(In general, the other graph)
3 W( methods may need to maintain or use the same bookkeeping information as the)4 W
6120 32873 MT
(layout function.  For example,)148 W
10 /Courier AF
20455 XM
(add-node)SH
11 /Times-Roman AF
25678 XM
(and)SH
10 /Courier AF
27689 XM
(delete-node)SH
11 /Times-Roman AF
34712 XM
(both affect the)
148 W( ")147 W
10 /Courier AF
(:layout-info-)SH
11 /Times-Roman AF
(" slots)147 W
6120 34069 MT
(used by the default layout function.  \050Specifically they)
171 W( add or delete rectangles respectively from the)172 W
6120 35265 MT
(object stored in the)181 W
10 /Courier AF
15519 XM
(:layout-info-rect-conflict-object)SH
11 /Times-Roman AF
35774 XM
(slot of the graph object.  This object)180 W
6120 36461 MT
(keeps track of)
70 W( all rectangles \050nodes\051 placed on the graph and when queried with a new rectangle returns)71 W
6120 37657 MT
(any stored rectangles that it overlaps.\051  When redefining the layout function, it may be)
199 W( necessary to)198 W
6120 38853 MT
(redefine these functions.)SH
ES
%%Page: 345 50
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Index)SH
51386 XM
(Page 345)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
8280 8272 MT
(Index)SH
8 /Times-Roman AF
8280 11525 MT
(*defined-names* 329)400 W
23880 XM
(Link-prototype 336)400 W
8280 12449 MT
(*required-names* 330)400 W
23880 XM
(Loading aggregadgets)
SH( 297)400 W
8280 13373 MT
(*standard-names* 329)400 W
8280 14297 MT
(*verbose-write-gadget* 329)400 W
23880 XM
(Me 329)400 W
23880 15221 MT
(Modify \050keyboard in aggregadgets\051)
SH( 310)400 W
8280 16145 MT
(Add-component 321,)
400 W( 327)SH
23880 XM
(Modify \050keyword\051)
SH( 310,)
400 W( 314)SH
8280 17069 MT
(Add-interactor 324)400 W
23880 XM
(Multi-line 306)400 W
8280 17993 MT
(Add-item 325)400 W
8280 18917 MT
(Add-local-component 327)400 W
23880 XM
(Node 336)400 W
8280 19841 MT
(Add-local-interactor 328)400 W
23880 XM
(Node-prototype 336)400 W
8280 20765 MT
(Add-local-item 328)400 W
23880 XM
(Notice-items-changed 315)400 W
8280 21689 MT
(Aggregadget 297)400 W
23880 XM
(Null-object 327)400 W
8280 22613 MT
(Aggregraph slots)
SH( 340)400 W
8280 23537 MT
(Aggregraphs 335)400 W
23880 XM
(O-formula 301)400 W
8280 24461 MT
(Aggrelists 312)400 W
23880 XM
(Omit \050keyword in aggregadgets\051)
SH( 310)400 W
23880 25385 MT
(Operates-on 307)400 W
8280 26309 MT
(Back-pointer 336)400 W
8280 27233 MT
(Behaviors slot)
SH( 307)400 W
23880 XM
(Part-generating functions)SH
24978 28157 MT
(Aggrelists 318)400 W
8280 29081 MT
(Change-item 326)400 W
24978 XM
(All parts)
SH( 305)400 W
8280 30005 MT
(Children 329)400 W
24978 XM
(Single parts)
SH( 303)400 W
8280 30929 MT
(Children-function 335)400 W
23880 XM
(Parts in aggregadgets)
SH( 297)400 W
8280 31853 MT
(Commas 301)400 W
23880 XM
(Parts in aggrelists)
SH( 320)400 W
8280 32777 MT
(Components of aggrelists)
SH( 315)400 W
23880 XM
(Pixel-margin 314)400 W
8280 33701 MT
(Components slot)
SH( 298,)
400 W( 299)SH
8280 34625 MT
(Constants in aggregadgets)
SH( 300)400 W
23880 XM
(Rank-margin 314)400 W
8280 35549 MT
(Constants in aggrelists)
SH( 313,)
400 W( 315, 321)SH
23880 XM
(Remove-component 324)400 W
8280 36473 MT
(Copy-gadget 321)400 W
23880 XM
(Remove-interactor 324)400 W
23880 37397 MT
(Remove-item 326)400 W
8280 38321 MT
(Defined-names 329)400 W
23880 XM
(Remove-local-component 328)400 W
8280 39245 MT
(Dependencies 301)400 W
23880 XM
(Remove-local-interactor 328)400 W
8280 40169 MT
(Destroy 299)400 W
23880 XM
(Remove-local-item 328)400 W
8280 41093 MT
(Destroy-me 299)400 W
23880 XM
(Remove-nth-component 327)400 W
8280 42017 MT
(Direction 313)400 W
23880 XM
(Remove-nth-item 326)400 W
8280 42941 MT
(Do-not-dump-objects 328)400 W
23880 XM
(Replace-item-prototype-object 326)400 W
8280 43865 MT
(Do-not-dump-slots 328)400 W
23880 XM
(Required-names 330)400 W
8280 45713 MT
(Fixed-height-p 314)400 W
23880 XM
(Saving aggregadgets)
SH( 328)400 W
8280 46637 MT
(Fixed-height-size 314)400 W
23880 XM
(Scalable aggregraph)
SH( 342)400 W
8280 47561 MT
(Fixed-width-p 313)400 W
23880 XM
(Scalable aggregraph image)
SH( 342)400 W
8280 48485 MT
(Fixed-width-size 314)400 W
23880 XM
(Source-node 335)400 W
8280 49409 MT
(Formulas)SH
23880 XM
(Source-roots 335)400 W
9378 50333 MT
(in aggregadgets)
SH( 301)400 W
23880 XM
(Standard-names 329)400 W
8280 51257 MT
(Framed-text example)
SH( 308)400 W
8280 52181 MT
(Function for :interactors)
SH( 307)400 W
23880 XM
(Take-default-component 324)400 W
8280 53105 MT
(Functions for parts)SH
9378 54029 MT
(All parts)
SH( 305)400 W
23880 XM
(V-align 314)400 W
9378 54953 MT
(Single parts)
SH( 303)400 W
23880 XM
(V-spacing 313)400 W
23880 55877 MT
(Values \050lisp function\051)
SH( 306)400 W
8280 56801 MT
(Garnet-aggregraphs-loader 335)400 W
23880 XM
(Verbose-write-gadget 329)400 W
8280 57725 MT
(Graph-node 335,)
400 W( 336)SH
8280 58649 MT
(Gvl-sibling 302)400 W
23880 XM
(Windows for interactors)
SH( 307)400 W
23880 59573 MT
(Write-gadget 328)400 W
8280 60497 MT
(H-align 314)400 W
8280 61421 MT
(H-spacing 313)400 W
8280 63269 MT
(Indent 314)400 W
8280 64193 MT
(Info-function 335)400 W
8280 65117 MT
(Interactors 307)400 W
8280 66041 MT
(Interactors function)
SH( 307)400 W
8280 66965 MT
(Item-prototype 314)400 W
8280 67889 MT
(Itemized aggrelists)
SH( 312,)
400 W( 314)SH
8280 68813 MT
(Items 315)400 W
8280 70661 MT
(Layout function)
SH( 343)400 W
8280 71585 MT
(Layout-graph 343)400 W
ES
%%Page: 346 51
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(Page 346)
SH( Aggregadgets)830 W
50643 XM
(Index)SH
46800 50 6120 4486 UL
ES
%%Page: i 52
BS
0 SI
10 /Times-Roman AF
8280 4286 MT
(Aggregadgets)SH
47914 XM
(Table of Contents)SH
46800 50 8280 4486 UL
16 /Times-Bold AF
25591 8272 MT
(Table of Contents)SH
12 SS 
8280 9796 MT
(1. Aggregadgets)SH
53280 XM
(297)SH
10 SS 
9780 11186 MT
(1.1. Accessing Aggregadgets and Aggrelists)SH
53580 XM
(297)SH
9780 12266 MT
(1.2. Aggregadgets)SH
53580 XM
(297)SH
11780 13346 MT
(1.2.1. How to Use Aggregadgets)SH
53580 XM
(297)SH
11780 14426 MT
(1.2.2. Named Components)SH
53580 XM
(298)SH
11780 15506 MT
(1.2.3. Destroying Aggregadgets)SH
53580 XM
(300)SH
11780 16586 MT
(1.2.4. Constants and Aggregadgets)SH
53580 XM
(300)SH
11780 17666 MT
(1.2.5. Implementation of Aggregadgets)SH
53580 XM
(301)SH
11780 18746 MT
(1.2.6. Dependencies Among Components)SH
53580 XM
(301)SH
11780 19826 MT
(1.2.7. Multi-level Aggregadgets)SH
53580 XM
(302)SH
11780 20906 MT
(1.2.8. Nested Part Expressions for Aggregadgets)SH
53580 XM
(303)SH
11780 21986 MT
(1.2.9. Creating a Part with a Function)SH
53580 XM
(304)SH
11780 23066 MT
(1.2.10. Creating All of the Parts with a Function)SH
53580 XM
(306)SH
9780 24146 MT
(1.3. Interactors in Aggregadgets)SH
53580 XM
(307)SH
9780 25226 MT
(1.4. Instances of Aggregadgets)SH
53580 XM
(309)SH
11780 26306 MT
(1.4.1. Default Instances of Aggregadgets)SH
53580 XM
(309)SH
11780 27386 MT
(1.4.2. Overriding Slots and Structure)SH
53580 XM
(309)SH
11780 28466 MT
(1.4.3. Simulated Multiple Inheritance)SH
53580 XM
(310)SH
11780 29546 MT
(1.4.4. Instance Examples)SH
53580 XM
(310)SH
11780 30626 MT
(1.4.5. More Syntax: Extending an Aggregadget)SH
53580 XM
(311)SH
9780 31706 MT
(1.5. Aggrelists)SH
53580 XM
(312)SH
11780 32786 MT
(1.5.1. How to Use Aggrelists)SH
53580 XM
(313)SH
11780 33866 MT
(1.5.2. Itemized Aggrelists)SH
53580 XM
(314)SH
13780 34946 MT
(1.5.2.1. The :item-prototype Slot)SH
53580 XM
(314)SH
13780 36026 MT
(1.5.2.2. The :items Slot)SH
53580 XM
(315)SH
13780 37106 MT
(1.5.2.3. Aggrelist Components)SH
53580 XM
(315)SH
13780 38186 MT
(1.5.2.4. Constants and Aggrelists)SH
53580 XM
(315)SH
13780 39266 MT
(1.5.2.5. A Simple Aggrelist Example)SH
53580 XM
(316)SH
13780 40346 MT
(1.5.2.6. An Aggrelist with an Interactor)SH
53580 XM
(316)SH
13780 41426 MT
(1.5.2.7. An Aggrelist with a Part-Generating Function)SH
53580 XM
(318)SH
11780 42506 MT
(1.5.3. Non-Itemized Aggrelists)SH
53580 XM
(320)SH
9780 43586 MT
(1.6. Instances of Aggrelists)SH
53580 XM
(321)SH
11780 44666 MT
(1.6.1. Overriding the Item Prototype Object)SH
53580 XM
(321)SH
9780 45746 MT
(1.7. Manipulating Gadgets Procedurally)SH
53580 XM
(321)SH
11780 46826 MT
(1.7.1. Copying Gadgets)SH
53580 XM
(321)SH
11780 47906 MT
(1.7.2. Aggregadget Manipulation)SH
53580 XM
(322)SH
13780 48986 MT
(1.7.2.1. Add-Component)SH
53580 XM
(322)SH
13780 50066 MT
(1.7.2.2. Remove Component)SH
53580 XM
(324)SH
13780 51146 MT
(1.7.2.3. Add-Interactor)SH
53580 XM
(324)SH
13780 52226 MT
(1.7.2.4. Remove-Interactor)SH
53580 XM
(324)SH
13780 53306 MT
(1.7.2.5. Take-Default-Component)SH
53580 XM
(324)SH
11780 54386 MT
(1.7.3. Itemized Aggrelist Manipulation)SH
53580 XM
(325)SH
13780 55466 MT
(1.7.3.1. Add-Item)SH
53580 XM
(325)SH
13780 56546 MT
(1.7.3.2. Remove-Item)SH
53580 XM
(326)SH
13780 57626 MT
(1.7.3.3. Remove-Nth-Item)SH
53580 XM
(326)SH
13780 58706 MT
(1.7.3.4. Change-Item)SH
53580 XM
(326)SH
13780 59786 MT
(1.7.3.5. Replace-Item-Prototype-Object)SH
53580 XM
(326)SH
11780 60866 MT
(1.7.4. Ordinary Aggrelist Manipulation)SH
53580 XM
(327)SH
13780 61946 MT
(1.7.4.1. Add-Component)SH
53580 XM
(327)SH
13780 63026 MT
(1.7.4.2. Remove-Component)SH
53580 XM
(327)SH
13780 64106 MT
(1.7.4.3. Remove-Nth-Component)SH
53580 XM
(327)SH
11780 65186 MT
(1.7.5. Local Modification)SH
53580 XM
(327)SH
9780 66266 MT
(1.8. Reading and Writing Aggregadgets and Aggrelists)SH
53580 XM
(328)SH
11780 67346 MT
(1.8.1. Write-Gadget)SH
53580 XM
(328)SH
13780 68426 MT
(1.8.1.1. Avoiding Deeply Nested Parts Slots)SH
53580 XM
(328)SH
ES
%%Page: ii 53
BS
0 SI
10 /Times-Bold AF
11620 7870 MT
(1.8.1.2. More Details)SH
51420 XM
(329)SH
11620 8950 MT
(1.8.1.3. Writing to Streams)SH
51420 XM
(329)SH
11620 10030 MT
(1.8.1.4. References to External Objects)SH
51420 XM
(329)SH
11620 11110 MT
(1.8.1.5. References to Graphic Qualities)SH
51420 XM
(330)SH
11620 12190 MT
(1.8.1.6. Saving References From Within Formulas)SH
51420 XM
(330)SH
7620 13270 MT
(1.9. More Examples)SH
51420 XM
(331)SH
9620 14350 MT
(1.9.1. A Customizable Check-Box)SH
51420 XM
(331)SH
9620 15430 MT
(1.9.2. Hierarchical Implementation of a Customizable Check-Box)SH
51420 XM
(331)SH
9620 16510 MT
(1.9.3. Menu Aggregadget with built-in interactor, using Aggrelists)SH
51420 XM
(331)SH
12 SS 
6120 18034 MT
(2. Aggregraphs)SH
51120 XM
(335)SH
10 SS 
7620 19424 MT
(2.1. Using Aggregraphs)SH
51420 XM
(335)SH
9620 20504 MT
(2.1.1. Accessing Aggregraphs)SH
51420 XM
(335)SH
9620 21584 MT
(2.1.2. Overview)SH
51420 XM
(335)SH
9620 22664 MT
(2.1.3. Aggregraph Nodes)SH
51420 XM
(336)SH
9620 23744 MT
(2.1.4. A Simple Example)SH
51420 XM
(337)SH
9620 24824 MT
(2.1.5. An Example With an Interactor)SH
51420 XM
(339)SH
7620 25904 MT
(2.2. Aggregraph)SH
51420 XM
(340)SH
7620 26984 MT
(2.3. Scalable Aggregraph)SH
51420 XM
(342)SH
7620 28064 MT
(2.4. Scalable Aggregraph Image)SH
51420 XM
(342)SH
7620 29144 MT
(2.5. Customizing the :layout-graph Function)SH
51420 XM
(343)SH
12 SS 
6120 30668 MT
(Index)SH
51120 XM
(345)SH
ES
%%Trailer
%%Pages: 53
%%DocumentFonts: Times-Roman Times-Bold Symbol Courier Times-Italic Times-BoldItalic
