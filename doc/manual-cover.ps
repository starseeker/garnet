%!PS-Adobe-2.0
%%Title: manual-cover.mss
%%DocumentFonts: (atend)
%%Creator: Andrew Mickish and Scribe 7(1700)
%%CreationDate: 12 December 1994 13:01
%%Pages: (atend)
%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq 
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath translate
    100.0 -100.0 scale pop /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
    div dup scale 100.0 -100.0 scale
    /showpage {} def
    /letter {} def
    /lettersmall {} def
    /note {} def
    } bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
   {dup FontMapDict exch known{FontMapDict exch get} if
   original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
/RC {100.0 -100.0 scale
612.0 0.0 translate
-90.0 rotate
.01 -.01 scale} bind def
/URC {100.0 -100.0 scale
90.0 rotate
-612.0 0.0 translate
.01 -.01 scale} bind def
/RCC {100.0 -100.0 scale
0.0 -792.0 translate 90.0 rotate
.01 -.01 scale} bind def
/URCC {100.0 -100.0 scale
-90.0 rotate 0.0 792.0 translate
.01 -.01 scale} bind def
%%EndProlog
%%Page: 0 1
BS
RCC
0 SI
36 /Times-Roman AF
33460 16845 MT
(Reference Manual V3.0)SH
65 100 0 440 40610 GB 
%%BeginDocument: color-logo.PS
%!PS-Adobe-2.0
%%Title: Garnet Logo
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 10, 1992, 4:53 PM
%%For: 
%%This file uses real color
%%DocumentFonts: (atend)
%%BoundingBox: 104 277 508 514
%%%Pages: 1
%%EndComments


/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
32 -206 translate
gsave
0 648 404 237 ClipToRectangle
0 0 translate
gsave
83 607 104 593 139 454 126 431 56 414 34 428 0 567 13 589 83 607 18 0 0 0 0 false 0 0 [] 1 0 1 0.06 0.35 true DrawPolyline
104 593 93 580 85 578 83 586 83 607 104 593 12 0 0 0 0 false 0 0 [] 1 0 0.66 0 0.10 true DrawPolyline
0 567 17 560 24 562 22 571 13 589 0 567 12 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
34 428 46 441 53 443 56 435 56 414 34 428 12 0 0 0 0 false 0 0 [] 1 0 0.66 0 0.10 true DrawPolyline
58 452 53 443 24 562 32 557 58 452 10 0 0 0 0 false 0 0 [] 1 0 0.66 0 0.10 true DrawPolyline
139 454 122 461 115 459 116 450 126 431 139 454 12 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
107 464 115 459 85 578 81 569 107 464 10 0 0 0 0 false 0 0 [] 1 0 1.00 0.70 0.70 true DrawPolyline
104 593 139 454 122 461 93 580 104 593 10 0 0 0 0 false 0 0 [] 1 0 0.93 0.01 0.28 true DrawPolyline
0 567 34 428 46 441 17 560 0 567 10 0 0 0 0 false 0 0 [] 1 0 0.88 0 0.23 true DrawPolyline
83 607 83 586 22 571 13 589 83 607 10 0 0 0 0 false 0 0 [] 1 0 0.88 0 0.23 true DrawPolyline
126 431 116 450 56 435 56 414 126 431 10 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
85 578 24 562 32 557 81 569 85 578 10 0 0 0 0 false 0 0 [] 1 0 1.00 0.84 0.84 true DrawPolyline
115 459 53 443 58 452 107 464 115 459 10 0 0 0 0 false 0 0 [] 1 0 1.00 0.50 0.50 true DrawPolyline
115 459 122 461 93 580 85 578 115 459 10 0 0 0 0 false 0 0 [] 1 0 1.00 0.50 0.50 true DrawPolyline
93 580 83 586 85 578 93 580 8 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawPolyline
84 606 55 616 82 610 73 617 82 612 78 648 86 610 92 624 88 608 114 604 88 606 92 580 84 606 26 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawPolyline
53 443 115 459 116 450 56 435 53 443 10 0 0 0 0 false 0 0 [] 1 0 0.88 0 0.23 true DrawPolyline
46 441 53 443 24 562 17 560 46 441 10 0 0 0 0 false 0 0 [] 1 0 0.93 0.01 0.28 true DrawPolyline
24 562 22 571 83 586 85 578 24 562 10 0 0 0 0 false 0 0 [] 1 0 0.93 0.01 0.28 true DrawPolyline
60 512 490 280 56 0 false 0 0 0 false 0 0 0 false (Garnet) 96 /Times-Bold DrawText
grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 104 277 508 514

%%EndDocument
 GE 14 SS 
21013 39179 MT
(\050This page and the next one are intended as covers for binders that)SH
24725 40646 MT
(that have slots for inserts.  These two pages are)SH
/Times-Italic SF
51518 XM
(color)SH
/Times-Roman SF
25835 42113 MT
(postscript, in case you have have a color printer.\051)SH
23638 45047 MT
(\050This page can be cut and used on the)SH
/Times-Italic SF
45064 XM
(edge)SH
/Times-Roman SF
48058 XM
(of the binder.)SH
30832 46514 MT
(The next page is for the cover.\051)SH
URCC
ES
%%Page: 1 2
BS
0 SI
42 SS 
1 1 0 0 58600 GB 
%%BeginDocument: color-logo.PS
%!PS-Adobe-2.0
%%Title: Garnet Logo
%%Creator: Make-PS-File -- Garnet Version 2.1
%%CreationDate: Jun 10, 1992, 4:53 PM
%%For: 
%%This file uses real color
%%DocumentFonts: (atend)
%%BoundingBox: 104 277 508 514
%%%Pages: 1
%%EndComments


/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
1 1 scale

%
% Begin new window
%
32 -206 translate
gsave
0 648 404 237 ClipToRectangle
0 0 translate
gsave
83 607 104 593 139 454 126 431 56 414 34 428 0 567 13 589 83 607 18 0 0 0 0 false 0 0 [] 1 0 1 0.06 0.35 true DrawPolyline
104 593 93 580 85 578 83 586 83 607 104 593 12 0 0 0 0 false 0 0 [] 1 0 0.66 0 0.10 true DrawPolyline
0 567 17 560 24 562 22 571 13 589 0 567 12 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
34 428 46 441 53 443 56 435 56 414 34 428 12 0 0 0 0 false 0 0 [] 1 0 0.66 0 0.10 true DrawPolyline
58 452 53 443 24 562 32 557 58 452 10 0 0 0 0 false 0 0 [] 1 0 0.66 0 0.10 true DrawPolyline
139 454 122 461 115 459 116 450 126 431 139 454 12 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
107 464 115 459 85 578 81 569 107 464 10 0 0 0 0 false 0 0 [] 1 0 1.00 0.70 0.70 true DrawPolyline
104 593 139 454 122 461 93 580 104 593 10 0 0 0 0 false 0 0 [] 1 0 0.93 0.01 0.28 true DrawPolyline
0 567 34 428 46 441 17 560 0 567 10 0 0 0 0 false 0 0 [] 1 0 0.88 0 0.23 true DrawPolyline
83 607 83 586 22 571 13 589 83 607 10 0 0 0 0 false 0 0 [] 1 0 0.88 0 0.23 true DrawPolyline
126 431 116 450 56 435 56 414 126 431 10 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawPolyline
85 578 24 562 32 557 81 569 85 578 10 0 0 0 0 false 0 0 [] 1 0 1.00 0.84 0.84 true DrawPolyline
115 459 53 443 58 452 107 464 115 459 10 0 0 0 0 false 0 0 [] 1 0 1.00 0.50 0.50 true DrawPolyline
115 459 122 461 93 580 85 578 115 459 10 0 0 0 0 false 0 0 [] 1 0 1.00 0.50 0.50 true DrawPolyline
93 580 83 586 85 578 93 580 8 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawPolyline
84 606 55 616 82 610 73 617 82 612 78 648 86 610 92 624 88 608 114 604 88 606 92 580 84 606 26 0 0 0 0 false 0 0 [] 1 1 0 0 0 false DrawPolyline
53 443 115 459 116 450 56 435 53 443 10 0 0 0 0 false 0 0 [] 1 0 0.88 0 0.23 true DrawPolyline
46 441 53 443 24 562 17 560 46 441 10 0 0 0 0 false 0 0 [] 1 0 0.93 0.01 0.28 true DrawPolyline
24 562 22 571 83 586 85 578 24 562 10 0 0 0 0 false 0 0 [] 1 0 0.93 0.01 0.28 true DrawPolyline
60 512 490 280 56 0 false 0 0 0 false 0 0 0 false (Garnet) 96 /Times-Bold DrawText
grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: 
%%BoundingBox: 104 277 508 514

%%EndDocument
 GE 0 0 1 SC
/Times-Roman SF
8907 37022 MT
(Garnet Reference Manual)SH
20801 45024 MT
(Version 3.0)SH
1 0 0 SC
24 SS 
8100 59049 MT
(G)SH
0 0 0 SC
(enerating an)SH
1 0 0 SC
8100 61421 MT
(A)SH
0 0 0 SC
(malgam of)SH
1 0 0 SC
8100 63793 MT
(R)SH
0 0 0 SC
(ealtime,)SH
1 1 0 30600 65303 GB 
%%BeginDocument: color-cmulogo.ps
%!PS-Adobe-2.0 EPSF-1.2
%%Title: CMULogo.PS
%%Creator: Dale Moore CMU-CS/RI 
%%CreationDate: 14-APR-1987
%%DocumentFonts: Times-Bold
%%%Pages: 1
%%BoundingBox: (atend)
%%EndComments

%++
% Color-CMULOGO.PS
% Created by Brad Myers from Black and white logo that was in 
%        /usr/misc/.scribe/lib/database.v7/cmulogo.ps
%
% Description:
%
%       This is the PostScript version of the CMU Logo.  It
%       attempts to follow as closely as possible the standard
%       for the logo as set forth in the "Carnegie Mellon
%       Logo and Graphics Standard".  It is available from
%       campus printing.
%
%       The execeptions to the logo standard as published 
%       are that the font Time-Bold (ITC) is used in place of the
%       standard of Bauer Bodini Bold (Compugraphic).  Both
%       the Bauer Bodini Bold font and Times-Bold font are
%       Serif fonts and very similar in design.  The Bauer font
%       is slightly more condensed than the Times font.  The
%       same text set in the same pt size will use approx 10% less
%       horizontal space in a Bauer font that the same text set in Times.
%
%       This implementation does not enforce the standard that
%       minimum point size of the Carnegie Mellon name is
%       12 points.
%
%       The logo is printed at the origin (0,0), on the current page.
%       Many printers can not print near the border of the page.
%       This will cause the output to be clipped.  .i.e the entire
%       logo will not appear when this document is printed by itself.
%
%       We print the logo at the origin for backward compatability.
%       Scribe files that do not use BoundingBox=File, (.i.e those
%       that use "Height=x, Width=y" expect the lower left x and
%       lower left y to be at the origin.  By printing at the origin
%       we can satisfy both styles of use of @Graphic, at the expense
%       of having the diagram clipped.
%
%       This PostScript program also executes the showpage operator.
%       V5(1500) of Scribe does not disable the showpage operator
%       by temporarily binding it to a noop.  Using this PostScript
%       program inside of V5 of scribe will not produce the expected
%       results.  This problem was fixed in V6(1600) of scribe.
%
%       Also be aware of psrev and included documents.  Many printers
%       produce pages in the "wrong" order.  Due to the way these
%       printers stack paper on output, the first page printed ends
%       up on the bottom, face up.  The last page printed ends up on top,
%       face up.  Because of this, many spoolers pipe their PostScript
%       through the psrev utility.  The psrev utility uses the %%Page:
%       comments to reverse the order of the pages in a PostScript
%       document.  When a PostScript file is included in a another
%       there will be two page ones.  Some versions of the psrev utility
%       do not correctly handle the included PostScript file and fail to
%       reverse the pages.  Causing included PostScript files that
%       include other PostScript files to fail.
%
% Modifications:
%
%       20-OCT-1988     Dale Moore      CMU-CS
%       Removed /inch def.  No Longer needed.  
%       Added %%EndProlog, part of Document Structuring Convention.
%       Changed dict size to 1, no longer need dict of size 2.
%--

1 dict begin

/cmulogo
{
    % do the cmu logo at the currentpoint.
    % The text of the logo will be in a 1 point font.
    % the lower left of the logo will be at the currentpoint
    gsave
        % move the coordinate system to current x y
        currentpoint translate
        
        % First the tilted square
        gsave
            1 0 0 setrgbcolor
            0.8700 0.0544 moveto
            14.0 rotate
            0.0272 setlinewidth
            0.0 3.4286 rlineto
            3.4286 0.0 rlineto
            0.0 -3.4286 rlineto
            closepath stroke
        grestore

        % now the Carnegie-Mellon
        /Times-Bold findfont setfont
        1.638 2.5573 moveto (Carnegie) show
        1.638 1.5973 moveto (Mellon) show
    grestore
} bind def

%%EndProlog
%%%Page: 1 1
%%%PageBoundingBox: (atend)
gsave
    18 18 scale
    0 0 moveto
    cmulogo
grestore

showpage
%%%PageBoundingBox: 0 0 100 79
%%Trailer
end
%%BoundingBox: 0 0 100 79

%%EndDocument
 GE 1 0 0 SC
8100 66165 MT
(N)SH
0 0 0 SC
(ovel)SH
20 SS 
30600 68323 MT
(School of Computer Science)SH
1 0 0 SC
24 SS 
8100 68537 MT
(E)SH
0 0 0 SC
(ditors and)SH
1 0 0 SC
8100 70909 MT
(T)SH
0 0 0 SC
(oolkits)SH
ES
%%Trailer
%%Pages: 2
%%DocumentFonts: Times-Roman Times-Italic
