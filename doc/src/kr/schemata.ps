%!PS-Adobe-2.0
%%Title: SCHEMATA FIGURE
%%Creator: Make-PS-File -- Garnet Version 2.0.alpha
%%CreationDate: May 1, 1992, 7:21 AM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 282 540 510
%%Pages: 1
%%EndComments


/ArcDict 22 dict def
ArcDict /mtrx matrix put
/DrawArc
   {
        ArcDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def
        newpath
	  x y translate
	  xrad yrad scale
          % Fill the arc
          newpath
            0 0 moveto  0 0 1 startangle endangle arc  closepath
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          % Draw the border
          newpath
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-halftone line-red line-green line-blue line-color-p
            line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/PolylineDict 15 dict def
/DrawPolyline
   {	% stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
	newpath
	  moveto
	  num-points -2 0 {pop lineto} for
	  fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/TextDict 19 dict def
/DrawText
   {	% stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
	findfont exch scalefont setfont
	/s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
	/x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
	newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
	  left base-y moveto
	  x-dist 0 s ashow
        grestore
        end
   } def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse
   {    EllipseDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def  /thickness-by-2 thickness 2 div def
        % Draw the filling
        newpath
	  x y translate
          gsave
	    xrad thickness-by-2 sub  yrad thickness-by-2 sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
	    fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          grestore
        % Draw the border
        newpath
          xrad yrad scale
          0 0 1 startangle endangle arc
	  savematrix setmatrix
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
	moveto		        % Go to the left,top corner
	w 0 rlineto	        % top side
	0 h neg rlineto		% right side
	w neg 0 rlineto		% bottom side
	closepath		% left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {	% stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /thickness-by-2 thickness 2 div def
        % Draw filling
        newpath
          left thickness-by-2 add  top thickness-by-2 sub   width thickness sub  height thickness sub
          RectanglePath
	  fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern thickness StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
	/height exch def  /width exch def
        newpath
	  moveto		% Go to the left,top corner
	  width 0 rlineto	% top side
	  0 height neg rlineto	% right side
	  width neg 0 rlineto	% bottom side
	  closepath		% left side
	gsave 1 setgray fill grestore
	clip newpath
        end
   } def

/FillShape
   {	% stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
	{ pop pop pop 
	  dup 0 ge
	    % if fill-halftone >= 0, then fill the shape with a halftone
	    { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {	% stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
	% If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
	dup 0 ge
	  % if line-thickness >= 0, then draw the outline
	  {gsave
	   setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
	   stroke
	   grestore}
	  {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%Page: 1 1

gsave
72 72 translate
0.6419753 0.6419753 scale

%
% Begin new window
%
0 -327 translate
gsave
0 1009 729 355 ClipToRectangle
0 0 translate
gsave
460.0 714.0 25.0 25.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
122.0 714.0 25.0 25.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
15 721 710 76 14 0 false 0 0 0 false 0 0 0 false (RECTANGLE-1) 12 /Courier DrawText
497 743 732 109 14 0 false 0 0 0 false 0 0 0 false (:is-a BOX-OBJECT) 12 /Courier DrawText
497 729 718 31 14 0 false 0 0 0 false 0 0 0 false (:x 34) 12 /Courier DrawText
497 715 704 190 14 0 false 0 0 0 false 0 0 0 false (:y \050+ \050gvl :left-obj :y\051 15\051) 12 /Courier DrawText
497 701 690 143 14 0 false 0 0 0 false 0 0 0 false (:left-obj RECTANGLE-1) 12 /Courier DrawText
160 736 725 109 14 0 false 0 0 0 false 0 0 0 false (:is-a BOX-OBJECT) 12 /Courier DrawText
160 722 711 31 14 0 false 0 0 0 false 0 0 0 false (:x 10) 12 /Courier DrawText
160 708 697 31 14 0 false 0 0 0 false 0 0 0 false (:y 20) 12 /Courier DrawText
350 722 711 76 14 0 false 0 0 0 false 0 0 0 false (RECTANGLE-2) 12 /Courier DrawText
299.0 962.0 25.0 25.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
332 983 972 80 14 0 false 0 0 0 false 0 0 0 false (:color :blue) 12 /Courier DrawText
332 969 958 270 14 0 false 0 0 0 false 0 0 0 false (:update-demon 'Graphical-Object-Changed) 12 /Courier DrawText
332 955 944 137 14 0 false 0 0 0 false 0 0 0 false (:is-a-inv BOX-OBJECT) 12 /Courier DrawText
131 969 958 133 14 0 false 0 0 0 false 0 0 0 false (MY-GRAPHICAL-OBJECT) 12 /Courier DrawText
299.0 834.0 25.0 25.0 0 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawEllipse
333 855 844 151 14 0 false 0 0 0 false 0 0 0 false (:is-a GRAPHICAL-OBJECT) 12 /Courier DrawText
333 841 830 80 14 0 false 0 0 0 false 0 0 0 false (:thickness 1) 12 /Courier DrawText
333 827 816 227 14 0 false 0 0 0 false 0 0 0 false (:is-a-inv RECTANGLE-1 RECTANGLE-2) 12 /Courier DrawText
193 841 830 70 14 0 false 0 0 0 false 0 0 0 false (BOX-OBJECT) 12 /Courier DrawText
0 0 0 0 true 0 0 [] 1 259 808 142 745 DrawLine
257 812 268 813 261 804 257 812 8 0 0 0 0 true 0 0 [] 1 0 0 0 0 false DrawPolyline
0 0 0 0 true 0 0 [] 1 334 803 436 743 DrawLine
331 799 325 808 337 807 331 799 8 0 0 0 0 true 0 0 [] 1 0 0 0 0 false DrawPolyline
0 0 0 0 true 0 0 [] 1 299 921 299 870 DrawLine
294 921 299 931 304 921 294 921 8 0 0 0 0 true 0 0 [] 1 0 0 0 0 false DrawPolyline
0 0 0 0 true 0 0 [] 1 331 871 423 941 DrawLine
334 867 323 865 328 875 334 867 8 0 0 0 0 true 0 0 [] 1 0 0 0 0 false DrawPolyline
360.0 684.0 225.0 25.0 180 360 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawArc
0 0 0 0 true 0 0 [] 1 138 680 139 679 DrawLine
134 676 131 687 142 684 134 676 8 0 0 0 0 true 0 0 [] 1 0 0 0 0 false DrawPolyline
0 0 0 0 true 0 0 [] 1 214 751 429 813 DrawLine
215 746 204 748 213 756 215 746 8 0 0 0 0 true 0 0 [] 1 0 0 0 0 false DrawPolyline
0 0 0 0 true 0 0 [] 1 476 756 507 813 DrawLine
480 754 471 747 472 758 480 754 8 0 0 0 0 true 0 0 [] 1 0 0 0 0 false DrawPolyline
grestore

grestore

0 1009 729 355 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
grestore


showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 72 282 540 510
