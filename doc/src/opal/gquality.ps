%!PS-Adobe-2.0 EPSF-2.0
%%Title: Opal 9
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Sep 27, 1993, 1:09 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 112 177 499 615
%%Pages: 1
%%EndComments


/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
	    % fore-color back-color string size font-name => -
    TextDict begin
	gsave
	    findfont exch scalefont setfont
	    /s exch def
	    /back-color exch def /fore-color exch def /fill-p exch def
	    /height exch def  /opal-width exch def
	    /base-y exch def  /top exch def
	    /left exch 1 sub def % XXX: I don't know why!

	    % Calculate distance to add between each character, based on the 
	    % width expected by Opal, the width expected by postscript, and 
	    % the number of characters to distribute the change over.
	    /x-dist opal-width s stringwidth pop sub s length div def

	    % Draw background of text if appropriate
	    fill-p {
		gsave
		    newpath
		    left top opal-width height RectanglePath
		    back-color FillShape
		grestore
	    } if

	    % Draw text in the appropriate color
	    newpath
	    s length 0 ne {
		left base-y moveto
		fore-color aload length 3 eq {
		    setrgbcolor
		    x-dist 0 s ashow
		} { % Halftone pattern:
		    %   fgR fgG fgB bgR bgG bgB top pattern
		    %   fgR fgG fgB false top pattern
		    /pattern exch def /top exch def /opaque? exch def
		    opaque? not { .5 .5 .5 } if
		    /bgB exch def /bgG exch def /bgR exch def
		    /fgB exch def /fgG exch def /fgR exch def

		    fgR bgR add 2 div
		    fgG bgG add 2 div
		    fgB bgB add 2 div
		    setrgbcolor

		    opaque? {
			x-dist 0 s ashow
		    } {
			mark
			/ch 1 string def
			/space { /space { x-dist 0 rmoveto } def } def
%			/jt statusdict begin jobtimeout end def
			gsave { % try really hard to do it right
			    s {
				% don't take more than 2 seconds a character
%				statusdict begin 2 setjobtimeout end
				space
				ch 0 3 -1 roll put
				ch true charpath
				currentpoint /yy exch def /xx exch def
				fgR fgG fgB false top pattern FillPattern
				newpath xx yy moveto
			    } forall
			} stopped grestore { % fall back in case we fail
			    x-dist 0 s ashow
			} if
%			statusdict begin jt setjobtimeout end
			cleartomark
		    } ifelse
		} ifelse
	    } if
	grestore
    end
} def

/RoundtanglePath { % left top width height radius => -
    /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
    /right l w add def  /bottom t h sub def
    l r add t moveto                         % origin
    right t right t r sub r arcto            % top side
    right bottom right r sub bottom r arcto  % right side
    l bottom l bottom r add r arcto          % bottom side
    l t l r add t r arcto		     % left side
    16 {pop} repeat  % each arcto accumulates 4 stack parameters
} def

/RoundtangleDict 27 dict def
/DrawRoundtangle { % left top width height radius line-color
		   % cap join dash thickness fill-color => -
    gsave RoundtangleDict begin
	/fill-color exch def  /thickness exch def
	/dash-pattern exch def  /line-join exch def  /line-cap exch def
	/line-color exch def  /radius exch def
	/height exch def  /width exch def  /top exch def  /left exch def
        
	% Draw filling
	newpath
	left thickness add top thickness sub
	width thickness 2 mul sub height thickness 2 mul sub
        radius thickness sub dup 0 lt { pop 0 } if RoundtanglePath
	fill-color FillShape

	left thickness 2 div add top thickness 2 div sub
	width thickness sub height thickness sub
        radius thickness 2 div sub dup 0 lt { pop 0 } if RoundtanglePath

	% Draw border
	line-color line-cap line-join dash-pattern thickness
	StrokeShape
    end grestore
} def


/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
	% point
	oddwidth? {
	  /x1 x1 .5 add def /y1 y1 .5 sub def
	  /x2 x2 .5 add def /y2 y2 .5 sub def
	} if
      } {
	% horizontal
	oddwidth? {
	  /y1 y1 .5 sub def
	  /y2 y2 .5 sub def
	} if
      } ifelse
    } {
      dx 0 eq {
	% vertical
	oddwidth? {
	  /x1 x1 .5 add def
	  /x2 x2 .5 add def
	} if
      } {
	% diagonal
	oddwidth? {
	  /x1 x1 .5 add def /y1 y1 .5 sub def
	  /x2 x2 .5 add def /y2 y2 .5 sub def
	} if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
	4 index AdjustLine
	moveto lineto
	StrokeShape
    end grestore
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto			% Go to the left,top corner
    w 0 rlineto			% top side
    0 h neg rlineto		% right side
    w neg 0 rlineto		% bottom side
    closepath			% left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
		 % cap join dash thickness fill-color => -
    RectangleDict begin
	/fill-color exch def  /thickness exch def /dash-pattern exch def
	/line-join exch def  /line-cap exch def /line-color exch def
	/height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
	% Draw filling
	newpath
	left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
	RectanglePath
	fill-color FillShape
	% Draw border
	newpath
	left thickness 2 div add  top thickness 2 div sub
	width thickness sub  height thickness sub
	RectanglePath
	line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
	  aload length 3 eq { setrgbcolor fill } {
	      FillPattern
	  } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
	% if line-thickness >= 0, then draw the outline
	gsave
	    setlinewidth 0 setdash setlinejoin setlinecap
	    aload length 3 eq { setrgbcolor stroke } {
		strokepath FillPattern
	    } ifelse
	grestore
    } {
	pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
	/height exch def  /width exch def
        newpath
	    moveto			% Go to the left,top corner
	    width 0 rlineto		% top side
	    0 height neg rlineto	% right side
	    width neg 0 rlineto		% bottom side
	    closepath			% left side
	gsave 1 setgray fill grestore
	clip newpath
    end
} def


%%EndProlog
%%Page: 1 1

gsave
72 72 translate
1 1 scale
40 543 translate

%
% Begin new window
%
gsave
0 0 387 438 ClipToRectangle
gsave
0 0 translate
0 0 387 438 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
0 0 translate
0 0 387 438 ClipToRectangle
gsave
-10 10 translate
[0 0 0] 0 0 [] 1 191 -56 161 -259 DrawLine
[0 0 0] 0 0 [] 1 191 -174 161 -259 DrawLine
[0 0 0] 0 0 [] 1 191 -285 161 -259 DrawLine
[0 0 0] 0 0 [] 1 191 -361 161 -259 DrawLine
[0 0 0] 0 0 [] 1 191 -423 161 -259 DrawLine
10 -248 151 22 5 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRoundtangle
14 -252 -263 140 14 false [0 0 0] [1 1 1] (OPAL:GRAPHIC-QUALITY) 12 /Courier-Bold DrawText
191 -10 206 92 5 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRoundtangle
195 -14 -25 125 14 false [0 0 0] [1 1 1] (OPAL:FILLING-STYLE) 12 /Courier-Bold DrawText
197 -29 -40 123 14 false [0 0 0] [1 1 1] (:fill-style :solid) 12 /Courier DrawText
197 -43 -54 137 14 false [0 0 0] [1 1 1] (:fill-rule :even-odd) 12 /Courier DrawText
197 -57 -68 80 14 false [0 0 0] [1 1 1] (:stipple NIL) 12 /Courier DrawText
197 -71 -82 193 14 false [0 0 0] [1 1 1] (:foreground-color opal:black) 12 /Courier DrawText
197 -85 -96 192 14 false [0 0 0] [1 1 1] (:background-color opal:white) 12 /Courier DrawText
191 -107 206 134 5 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRoundtangle
195 -111 -122 104 14 false [0 0 0] [1 1 1] (OPAL:LINE-STYLE) 12 /Courier-Bold DrawText
197 -126 -137 115 14 false [0 0 0] [1 1 1] (:line-thickness 0) 12 /Courier DrawText
197 -140 -151 123 14 false [0 0 0] [1 1 1] (:line-style :solid) 12 /Courier DrawText
197 -154 -165 109 14 false [0 0 0] [1 1 1] (:cap-style :butt) 12 /Courier DrawText
197 -168 -179 122 14 false [0 0 0] [1 1 1] (:join-style :miter) 12 /Courier DrawText
197 -182 -193 115 14 false [0 0 0] [1 1 1] (:dash-pattern NIL) 12 /Courier DrawText
197 -196 -207 80 14 false [0 0 0] [1 1 1] (:stipple NIL) 12 /Courier DrawText
197 -210 -221 193 14 false [0 0 0] [1 1 1] (:foreground-color opal:black) 12 /Courier DrawText
197 -224 -235 192 14 false [0 0 0] [1 1 1] (:background-color opal:white) 12 /Courier DrawText
191 -246 114 78 5 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRoundtangle
195 -250 -261 70 14 false [0 0 0] [1 1 1] (OPAL:COLOR) 12 /Courier-Bold DrawText
197 -265 -276 52 14 false [0 0 0] [1 1 1] (:red 1.0) 12 /Courier DrawText
197 -279 -290 66 14 false [0 0 0] [1 1 1] (:green 1.0) 12 /Courier DrawText
197 -293 -304 59 14 false [0 0 0] [1 1 1] (:blue 1.0) 12 /Courier DrawText
197 -307 -318 101 14 false [0 0 0] [1 1 1] (:color-name NIL) 12 /Courier DrawText
191 -329 108 64 5 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRoundtangle
195 -333 -344 62 14 false [0 0 0] [1 1 1] (OPAL:FONT) 12 /Courier-Bold DrawText
197 -348 -359 95 14 false [0 0 0] [1 1 1] (:family :fixed) 12 /Courier DrawText
197 -362 -373 81 14 false [0 0 0] [1 1 1] (:face :roman) 12 /Courier DrawText
197 -376 -387 88 14 false [0 0 0] [1 1 1] (:size :medium) 12 /Courier DrawText
191 -398 143 50 5 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRoundtangle
195 -402 -413 132 14 false [0 0 0] [1 1 1] (OPAL:FONT-FROM-FILE) 12 /Courier-Bold DrawText
197 -417 -428 68 14 false [0 0 0] [1 1 1] (:font-name ) 12 /Courier DrawText
197 -431 -442 94 14 false [0 0 0] [1 1 1] (:font-path NIL) 12 /Courier DrawText
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold 
%%BoundingBox: 112 177 499 615
