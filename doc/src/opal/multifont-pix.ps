%!PS-Adobe-2.0 EPSF-2.0
%%Title: Opal 1
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Aug 23, 1993, 3:31 PM
%%For: 
%%This file uses real color
%%DocumentFonts: (atend)
%%BoundingBox: 189 284 423 508
%%Pages: 1
%%EndComments


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
	       % cap join dash thickness fill-color => -
    EllipseDict begin
	/fill-color exch def /thickness exch def
	/dash-pattern exch def  /line-join exch def  /line-cap exch def
	/line-color exch def  /endangle exch def /startangle exch def
	/yrad exch def  /xrad exch def /y exch def /x exch def
	/savematrix mtrx currentmatrix def
	% Draw the filling
	gsave
	    newpath
	    x y translate
	    xrad thickness sub yrad thickness sub scale
	    0 0 1 startangle endangle arc
	    savematrix setmatrix
	    fill-color FillShape
	    newpath
	    x y translate
	    xrad thickness 2 div sub yrad thickness 2 div sub scale
	    0 0 1 startangle endangle arc
	    savematrix setmatrix
	    line-color
	    0 % line-cap
	    line-join dash-pattern thickness
	    StrokeShape
	grestore
    end
} def

/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
	    % fore-color back-color string size font-name => -
    TextDict begin
	gsave
	    findfont exch scalefont setfont
	    /s exch def
	    /back-color exch def /fore-color exch def /fill-p exch def
	    /height exch def  /opal-width exch def
	    /base-y exch def  /top exch def
	    /left exch 1 sub def % XXX: I don't know why!

	    % Calculate distance to add between each character, based on the 
	    % width expected by Opal, the width expected by postscript, and 
	    % the number of characters to distribute the change over.
	    /x-dist opal-width s stringwidth pop sub s length div def

	    % Draw background of text if appropriate
	    fill-p {
		gsave
		    newpath
		    left top opal-width height RectanglePath
		    back-color FillShape
		grestore
	    } if

	    % Draw text in the appropriate color
	    newpath
	    s length 0 ne {
		left base-y moveto
		fore-color aload length 3 eq {
		    setrgbcolor
		    x-dist 0 s ashow
		} { % Halftone pattern:
		    %   fgR fgG fgB bgR bgG bgB top pattern
		    %   fgR fgG fgB false top pattern
		    /pattern exch def /top exch def /opaque? exch def
		    opaque? not { .5 .5 .5 } if
		    /bgB exch def /bgG exch def /bgR exch def
		    /fgB exch def /fgG exch def /fgR exch def

		    fgR bgR add 2 div
		    fgG bgG add 2 div
		    fgB bgB add 2 div
		    setrgbcolor

		    opaque? {
			x-dist 0 s ashow
		    } {
			mark
			/ch 1 string def
			/space { /space { x-dist 0 rmoveto } def } def
%			/jt statusdict begin jobtimeout end def
			gsave { % try really hard to do it right
			    s {
				% don't take more than 2 seconds a character
%				statusdict begin 2 setjobtimeout end
				space
				ch 0 3 -1 roll put
				ch true charpath
				currentpoint /yy exch def /xx exch def
				fgR fgG fgB false top pattern FillPattern
				newpath xx yy moveto
			    } forall
			} stopped grestore { % fall back in case we fail
			    x-dist 0 s ashow
			} if
%			statusdict begin jt setjobtimeout end
			cleartomark
		    } ifelse
		} ifelse
	    } if
	grestore
    end
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto			% Go to the left,top corner
    w 0 rlineto			% top side
    0 h neg rlineto		% right side
    w neg 0 rlineto		% bottom side
    closepath			% left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
		 % cap join dash thickness fill-color => -
    RectangleDict begin
	/fill-color exch def  /thickness exch def /dash-pattern exch def
	/line-join exch def  /line-cap exch def /line-color exch def
	/height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
	% Draw filling
	newpath
	left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
	RectanglePath
	fill-color FillShape
	% Draw border
	newpath
	left thickness 2 div add  top thickness 2 div sub
	width thickness sub  height thickness sub
	RectanglePath
	line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawGenericWindowFrame { % label left top w h
			  % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
	  aload length 3 eq { setrgbcolor fill } {
	      FillPattern
	  } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
	% if line-thickness >= 0, then draw the outline
	gsave
	    setlinewidth 0 setdash setlinejoin setlinecap
	    aload length 3 eq { setrgbcolor stroke } {
		strokepath FillPattern
	    } ifelse
	grestore
    } {
	pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
	/height exch def  /width exch def
        newpath
	    moveto			% Go to the left,top corner
	    width 0 rlineto		% top side
	    0 height neg rlineto	% right side
	    width neg 0 rlineto		% bottom side
	    closepath			% left side
	gsave 1 setgray fill grestore
	clip newpath
    end
} def


%%EndProlog
%%Page: 1 1

gsave
72 72 translate
1 1 scale
117 436 translate

%
% Begin new window
%
gsave
0 0 234 224 ClipToRectangle
gsave
0 0 234 224 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
2 -2 translate
() 0 0 230 220 2 2 2 2 DrawGenericWindowFrame
0 0 230 220 ClipToRectangle
gsave
0 0 230 220 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
20 -20 -31 126 14 true [0 0 0] [1 1 1] (An example string ) 12 /Courier DrawText
20 -34 -45 140 14 true [0 0 0] [1 1 1] (with multiple lines ) 12 /Courier DrawText
20 -60 -71 126 14 true [0 0 0] [1 1 1] (An example string ) 12 /Courier-Oblique DrawText
20 -74 -85 140 14 true [0 0 0] [1 1 1] (with multiple lines ) 12 /Courier-Oblique DrawText
20 -100 -111 35 14 true [0 0 0] [1 1 1] (Here ) 12 /Courier DrawText
55 -100 -111 14 14 true [0 0 0] [1 1 1] (is) 12 /Courier-Oblique DrawText
69 -100 -111 28 14 true [0 0 0] [1 1 1] ( my ) 12 /Courier DrawText
97 -100 -111 49 14 true [0 0 0] [1 1 1] (example) 12 /Courier-Bold DrawText
146 -100 -111 63 14 true [0 0 0] [1 1 1] ( string. ) 12 /Courier DrawText
20 -130 -150 119 23 true [0 0 0] [1 1 1] (Here is a circle:) 12 /Courier DrawText
149.0 -140.0 10.0 10.0 0 360 [0 0 0] 0 0 [] 1 null DrawEllipse
159 -130 -150 7 23 true [0 0 0] [1 1 1] ( ) 12 /Courier DrawText
20 -160 -171 56 14 true [0 0 0] [1 1 1] (Here is ) 12 /Courier DrawText
76 -160 -171 42 14 true [1 1 0] [1 1 1] (yellow) 12 /Courier-Bold DrawText
118 -160 -171 35 14 true [0 0 0] [1 1 1] ( and ) 12 /Courier DrawText
153 -160 -171 21 14 true [1 0 0] [1 1 1] (red) 12 /Courier-Bold DrawText
174 -160 -171 42 14 true [0 0 0] [1 1 1] ( text ) 12 /Courier DrawText
20 -190 -201 28 14 true [0 0 0] [1 1 1] (The ) 12 /Courier DrawText
43 -194 -205 6 14 true [0 0 0] [1 1 1] (>) 10 /Courier-Bold DrawText
48 -190 -201 91 14 true [0 0 0] [1 1 1] (\050parentheses\051) 12 /Courier DrawText
136 -194 -205 6 14 true [0 0 0] [1 1 1] (<) 10 /Courier-Bold DrawText
139 -190 -201 84 14 true [0 0 0] [1 1 1] ( are marked ) 12 /Courier DrawText
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier-Bold /Courier-Oblique /Courier Helvetica-Bold 
%%BoundingBox: 189 284 423 508
