%!PS-Adobe-2.0 EPSF-2.0
%%Title: Untitled
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Sep 8, 1993, 7:12 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 169 219 443 573
%%Pages: 1
%%EndComments


/DefImage { % image-name font-name w h string => -
  20 dict begin
    /ImageString exch def /ImageHeight exch def /ImageWidth exch def
    /FontName exch def
    /ImageName exch def
    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def
    /Encoding [
      /image 255 { /.notdef } repeat
    ] def
    /BuildChar { % font char => -
      pop begin
        1 0
	0 0 1 1 setcachedevice
	gsave
	  ImageWidth ImageHeight false
	  [ ImageWidth 0 0 ImageHeight 0 0 ]
          {ImageString} imagemask
	grestore
      end
    } def
    ImageName currentdict definefont
    FontName exch
    ImageName ImageString
  end
  def def
} def


/BitmapDict 20 dict def
/DrawBitmap { % left top width height pattern transparent-p color => -
    BitmapDict begin
	/color exch def /transparent-p exch def
	/pattern exch def  /height exch def  /width exch def
	gsave
	    translate
	    width height scale
	    color length 3 eq {
	        color aload pop setrgbcolor
	    } {
	        .5 setgray % fudge pattern fills
	    } ifelse
	    transparent-p {
		% The case where the background is not drawn
		width height false
		[ width 0 0 height 0 height ]
		{pattern} imagemask
	    } {
		% The case where the background is drawn
		width height 1
		[ width 0 0 height 0 height ]
		{pattern} image
	    } ifelse
	grestore
    end
} def

/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
	       % cap join dash thickness fill-color => -
    EllipseDict begin
	/fill-color exch def /thickness exch def
	/dash-pattern exch def  /line-join exch def  /line-cap exch def
	/line-color exch def  /endangle exch def /startangle exch def
	/yrad exch def  /xrad exch def /y exch def /x exch def
	/savematrix mtrx currentmatrix def
	% Draw the filling
	gsave
	    newpath
	    x y translate
	    xrad thickness sub yrad thickness sub scale
	    0 0 1 startangle endangle arc
	    savematrix setmatrix
	    fill-color FillShape
	    newpath
	    x y translate
	    xrad thickness 2 div sub yrad thickness 2 div sub scale
	    0 0 1 startangle endangle arc
	    savematrix setmatrix
	    line-color
	    0 % line-cap
	    line-join dash-pattern thickness
	    StrokeShape
	grestore
    end
} def

/PolylineDict 20 dict def
/DrawPolyline { % x1 y1 {{x y ...} ...} line-color
		% join cap dash thickness fill-color => -
    gsave PolylineDict begin
	/fill-color exch def  /thickness exch def  /dash-pattern exch def
	/line-join exch def  /line-cap exch def  /line-color exch def
	% Don't draw the path of the fill if the filling-style is null.
	fill-color null eq not {
		3 copy
		newpath
		3 1 roll moveto
		{ aload length 2 idiv { lineto } repeat } forall
		fill-color FillShape
		} if

	newpath
	.5 -.5 translate

	% Stroke after every sub-array to avoid a limitcheck error
	2 index 2 index moveto
	{ aload length 2 sub 2 idiv { lineto } repeat
	2 copy lineto
	line-color line-cap line-join dash-pattern thickness StrokeShape
	moveto
	} forall

	currentpoint
	3 -1 roll sub abs .01 lt
	3 1 roll sub abs .01 lt and {
	  0 0 rlineto closepath
	} if

	line-color line-cap line-join dash-pattern
	thickness
%	dup -1 ne { .5 add } if % fudge outline width thicker
	StrokeShape

    end grestore
} def

/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
	% point
	oddwidth? {
	  /x1 x1 .5 add def /y1 y1 .5 sub def
	  /x2 x2 .5 add def /y2 y2 .5 sub def
	} if
      } {
	% horizontal
	oddwidth? {
	  /y1 y1 .5 sub def
	  /y2 y2 .5 sub def
	} if
      } ifelse
    } {
      dx 0 eq {
	% vertical
	oddwidth? {
	  /x1 x1 .5 add def
	  /x2 x2 .5 add def
	} if
      } {
	% diagonal
	oddwidth? {
	  /x1 x1 .5 add def /y1 y1 .5 sub def
	  /x2 x2 .5 add def /y2 y2 .5 sub def
	} if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
	4 index AdjustLine
	moveto lineto
	StrokeShape
    end grestore
} def

/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
	    % fore-color back-color string size font-name => -
    TextDict begin
	gsave
	    findfont exch scalefont setfont
	    /s exch def
	    /back-color exch def /fore-color exch def /fill-p exch def
	    /height exch def  /opal-width exch def
	    /base-y exch def  /top exch def
	    /left exch 1 sub def % XXX: I don't know why!

	    % Calculate distance to add between each character, based on the 
	    % width expected by Opal, the width expected by postscript, and 
	    % the number of characters to distribute the change over.
	    /x-dist opal-width s stringwidth pop sub s length div def

	    % Draw background of text if appropriate
	    fill-p {
		gsave
		    newpath
		    left top opal-width height RectanglePath
		    back-color FillShape
		grestore
	    } if

	    % Draw text in the appropriate color
	    newpath
	    s length 0 ne {
		left base-y moveto
		fore-color aload length 3 eq {
		    setrgbcolor
		    x-dist 0 s ashow
		} { % Halftone pattern:
		    %   fgR fgG fgB bgR bgG bgB top pattern
		    %   fgR fgG fgB false top pattern
		    /pattern exch def /top exch def /opaque? exch def
		    opaque? not { .5 .5 .5 } if
		    /bgB exch def /bgG exch def /bgR exch def
		    /fgB exch def /fgG exch def /fgR exch def

		    fgR bgR add 2 div
		    fgG bgG add 2 div
		    fgB bgB add 2 div
		    setrgbcolor

		    opaque? {
			x-dist 0 s ashow
		    } {
			mark
			/ch 1 string def
			/space { /space { x-dist 0 rmoveto } def } def
%			/jt statusdict begin jobtimeout end def
			gsave { % try really hard to do it right
			    s {
				% don't take more than 2 seconds a character
%				statusdict begin 2 setjobtimeout end
				space
				ch 0 3 -1 roll put
				ch true charpath
				currentpoint /yy exch def /xx exch def
				fgR fgG fgB false top pattern FillPattern
				newpath xx yy moveto
			    } forall
			} stopped grestore { % fall back in case we fail
			    x-dist 0 s ashow
			} if
%			statusdict begin jt setjobtimeout end
			cleartomark
		    } ifelse
		} ifelse
	    } if
	grestore
    end
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto			% Go to the left,top corner
    w 0 rlineto			% top side
    0 h neg rlineto		% right side
    w neg 0 rlineto		% bottom side
    closepath			% left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
		 % cap join dash thickness fill-color => -
    RectangleDict begin
	/fill-color exch def  /thickness exch def /dash-pattern exch def
	/line-join exch def  /line-cap exch def /line-color exch def
	/height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
	% Draw filling
	newpath
	left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
	RectanglePath
	fill-color FillShape
	% Draw border
	newpath
	left thickness 2 div add  top thickness 2 div sub
	width thickness sub  height thickness sub
	RectanglePath
	line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/DrawGenericWindowFrame { % label left top w h
			  % leftmargin topmargin rightmargin bottommargin => -
  30 dict begin

  { % setup
    /bottommargin exch def /rightmargin exch def
    /topmargin exch def /leftmargin exch def
    /h exch def /w exch def /y exch h sub def /x exch def
    /label exch def
    /pointsize
      topmargin 1 sub
      dup 1 lt { pop 1 } if
      dup 12 gt { 12 sub 3 div 12 add } if
    def

    /bottom y def /top y h add def
    /left x def /right  x w add def
    1 setlinewidth
    0 setlinecap
  } exec

  { % background
    newpath
    left leftmargin sub bottom bottommargin sub moveto
    left leftmargin sub top topmargin add lineto
    right rightmargin add top topmargin add lineto
    right rightmargin add bottom bottommargin sub lineto
    closepath
    0 setgray fill

    left bottom moveto
    left top lineto
    right top lineto
    right bottom lineto
    closepath
    1 setgray fill
  } exec

  topmargin 8 ge {
    /Helvetica-Bold findfont pointsize scalefont setfont
    label stringwidth pop
    left right add 2 div
    exch 2 div sub
    top topmargin 2 div add pointsize 2 div sub 2 add moveto
    1 setgray
    label show
  } if

  end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
	  aload length 3 eq { setrgbcolor fill } {
	      FillPattern
	  } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
	% if line-thickness >= 0, then draw the outline
	gsave
	    setlinewidth 0 setdash setlinejoin setlinecap
	    aload length 3 eq { setrgbcolor stroke } {
		strokepath FillPattern
	    } ifelse
	grestore
    } {
	pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
	/height exch def  /width exch def
        newpath
	    moveto			% Go to the left,top corner
	    width 0 rlineto		% top side
	    0 height neg rlineto	% right side
	    width neg 0 rlineto		% bottom side
	    closepath			% left side
	gsave 1 setgray fill grestore
	clip newpath
    end
} def

/image-3 /image-3-font 16 16 <
ffff ff3f ff3f fe7f ee7f e4ff e0ff e01f e03f e07f e0ff e1ff e3ff e7ff efff
ffff>
DefImage

/image-2 /image-2-font 16 16 <
ff3f fe1f fe1f cc3f c43f c07f c00f c00f c01f c03f c07f c0ff c1ff c3ff c7ff
cfff>
DefImage

/image-1 /image-1-font 9 10 <
007f ffff ffff 007f ffff ffff 007f ffff ffff 007f>
DefImage


%%EndProlog
%%Page: 1 1

gsave
72 72 translate
1 1 scale
97 501 translate

%
% Begin new window
%
gsave
0 0 274 354 ClipToRectangle
gsave
0 0 274 354 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
2 -2 translate
() 0 0 270 350 2 2 2 2 DrawGenericWindowFrame
0 0 270 350 ClipToRectangle
gsave
135 -15 49 86 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
130 -10 49 86 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
131 -11 47 27 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
137 -14 -31 35 21 false [1 1 1] [1 1 1] (Title) 18 /Times-Roman DrawText
134 -41 -52 41 14 false [0 0 0] [1 1 1] (Label1) 12 /Courier DrawText
134 -60 -71 41 14 false [0 0 0] [1 1 1] (Label2) 12 /Courier DrawText
134 -79 -90 41 14 false [0 0 0] [1 1 1] (Label3) 12 /Courier DrawText
190 -25 20 67 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
190 -5 20 20 [0 0 0] 0 0 [] 1 null DrawRectangle
200 -8 {
  { 200 -8 207 -15 203 -15 203 -22 197 -22 197 -15 193 -15 }
} [0 0 0] 0 0 [] 1 [1 dup dup] DrawPolyline
190 -92 20 20 [0 0 0] 0 0 [] 1 null DrawRectangle
200 -109 {
  { 200 -109 207 -102 203 -102 203 -95 197 -95 197 -102 193 -102 }
} [0 0 0] 0 0 [] 1 [1 dup dup] DrawPolyline
191 -25 18 18 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
210 -5 50 107 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
218 -8 -25 35 21 false [0 0 0] [1 1 1] (Title) 18 /Times-Roman DrawText
210 -5 50 27 [0 0 0] 0 0 [] 2 null DrawRectangle
214 -35 -46 41 14 false [0 0 0] [1 1 1] (Label1) 12 /Courier DrawText
214 -55 -66 41 14 false [0 0 0] [1 1 1] (Label2) 12 /Courier DrawText
214 -75 -86 41 14 false [0 0 0] [1 1 1] (Label3) 12 /Courier DrawText
214 -95 -106 41 14 false [0 0 0] [1 1 1] (Label4) 12 /Courier DrawText
20 -150 61 34 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
10 -140 61 34 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
15 -145 51 24 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
20 -150 -161 41 14 false [0 0 0] [1 1 1] (Label1) 12 /Courier DrawText
96 -150 61 34 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
86 -140 61 34 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
91 -145 51 24 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
96 -150 -161 41 14 false [0 0 0] [1 1 1] (Label2) 12 /Courier DrawText
172 -150 61 34 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
162 -140 61 34 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
167 -145 51 24 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
172 -150 -161 41 14 false [0 0 0] [1 1 1] (Label3) 12 /Courier DrawText
71 -205 20 20 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
66 -200 20 20 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
69 -203 14 14 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
20 -205 -216 41 14 false [0 0 0] [1 1 1] (Label1) 12 /Courier DrawText
71 -235 20 20 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
66 -230 20 20 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
69 -233 14 14 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
20 -235 -246 41 14 false [0 0 0] [1 1 1] (Label2) 12 /Courier DrawText
71 -265 20 20 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
66 -260 20 20 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
69 -263 14 14 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
20 -265 -276 41 14 false [0 0 0] [1 1 1] (Label3) 12 /Courier DrawText
209.5 -209.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
204.5 -204.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
204.5 -204.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [1 dup dup] DrawEllipse
147 -200 -211 41 14 false [0 0 0] [1 1 1] (Label1) 12 /Courier DrawText
209.5 -242.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
204.5 -237.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
204.5 -237.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [1 dup dup] DrawEllipse
147 -233 -244 41 14 false [0 0 0] [1 1 1] (Label2) 12 /Courier DrawText
209.5 -275.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0 0 0] DrawEllipse
204.5 -270.5 11.5 11.5 0 360 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawEllipse
204.5 -270.5 8.5 8.5 0 360 [0 0 0] 0 0 [] 1 [1 dup dup] DrawEllipse
147 -266 -277 41 14 false [0 0 0] [1 1 1] (Label3) 12 /Courier DrawText
50 -313 -324 39 14 false [0 0 0] [1 1 1] (Color:) 12 /Courier-Bold DrawText
104 -316 42 14 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
99 -311 42 14 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
99 -311 42 14 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
110 -311 -322 21 14 false [0 0 0] [1 1 1] (Red) 12 /Courier DrawText
0 0 52 14 [0 0 0] 0 0 [] -1 [1 dup dup] DrawRectangle
5 0 -11 42 14 false [0 0 0] [1 1 1] (Family) 12 /Courier DrawText
52 0 37 14 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
57 0 -11 27 14 false [1 1 1] [1 1 1] (Face) 12 /Courier DrawText
89 0 36 14 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
94 0 -11 26 14 false [1 1 1] [1 1 1] (Size) 12 /Courier DrawText
27 -102 19 20 [0 0 0] 0 0 [] 1 [0 0 0] DrawRectangle
25 -100 19 20 [0 0 0] 0 0 [] 1 [0.50 dup dup] DrawRectangle
27 -102 15 16 [0 0 0] 0 0 [] 1 [1 dup dup] DrawRectangle
30 -105 9 10 image-1 false [0 0 0] DrawBitmap
88 -43 -54 18 14 false [0 0 0] [1 1 1] (\050a\051) 12 /Courier-Bold DrawText
60 -102 -113 18 14 false [0 0 0] [1 1 1] (\050b\051) 12 /Courier-Bold DrawText
148 -117 -128 18 14 false [0 0 0] [1 1 1] (\050c\051) 12 /Courier-Bold DrawText
219 -117 -128 18 14 false [0 0 0] [1 1 1] (\050d\051) 12 /Courier-Bold DrawText
241 -155 -166 18 14 false [0 0 0] [1 1 1] (\050e\051) 12 /Courier-Bold DrawText
101 -220 -231 18 14 false [0 0 0] [1 1 1] (\050f\051) 12 /Courier-Bold DrawText
229 -214 -225 18 14 false [0 0 0] [1 1 1] (\050g\051) 12 /Courier-Bold DrawText
160 -312 -323 18 14 false [0 0 0] [1 1 1] (\050h\051) 12 /Courier-Bold DrawText
grestore

grestore


%
% Begin new window
%
gsave
4 -18 translate
() 0 0 79 60 2 2 2 2 DrawGenericWindowFrame
0 0 79 60 ClipToRectangle
gsave
3 -25 70 14 [0 0 0] 0 0 [] -1 [0 0 0] DrawRectangle
3 -5 -16 35 14 false [0 0 0] [1 1 1] (Fixed) 12 /Courier DrawText
5 -25 -36 33 14 false [1 1 1] [0 0 0] (Serif) 12 /Courier DrawText
5 -45 -56 68 14 false [0 0 0] [1 1 1] (Sans-Serif) 12 /Courier DrawText
54 -33 16 16 image-2 true [1 1 1] DrawBitmap
54 -33 16 16 image-3 true [0 0 0] DrawBitmap
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Courier-Bold /Courier /Times-Roman Helvetica-Bold 
%%BoundingBox: 169 219 443 573
